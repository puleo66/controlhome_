###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       09/Feb/2018  17:20:36
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\HW Projects\ControlHome\CntrHome - RF69w\uc-terminal\src\view.c
#    Command line =  
#        "E:\HW Projects\ControlHome\CntrHome - RF69w\uc-terminal\src\view.c"
#        -lCN "E:\HW Projects\ControlHome\CntrHome - RF69w\Debug\List" -o
#        "E:\HW Projects\ControlHome\CntrHome - RF69w\Debug\Obj" --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\APP\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\BSP\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\CPU\inc\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-CPU\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-RTC\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-LIB\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uCOS-II\Ports\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uCOS-II\Source\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\I2C-Out\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\Direct_Sw\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\Wdt_led\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-LCD\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-RF\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\api\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\config\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\os\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\fsl\fat\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\clib\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\lbl\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\device\mmc\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\file\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-Terminal\src\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-Terminal\inc\" -Oh
#    List file    =  
#        E:\HW Projects\ControlHome\CntrHome - RF69w\Debug\List\view.lst
#    Object file  =  
#        E:\HW Projects\ControlHome\CntrHome - RF69w\Debug\Obj\view.o
#
###############################################################################

E:\HW Projects\ControlHome\CntrHome - RF69w\uc-terminal\src\view.c
      1          /*
      2          *********************************************************************************************************
      3          *                                           uC/OS-View
      4          *
      5          *                             (c) Copyright 2005, Micrium, Weston, FL
      6          *                                       All Rights Reserved
      7          *
      8          *
      9          * Filename   : VIEW.C
     10          * Version    : V1.33
     11          * Programmer : JJL
     12          *********************************************************************************************************
     13          */
     14          
     15          #define  VIEW_GLOBALS
     16          #include <includes.h>

   \                                 In section .bss, align 4
   \   __absolute INT8U View_RxState
   \                     View_RxState:
   \   00000000                      DS8 1
   \   __absolute INT8U View_RxRemainLen
   \                     View_RxRemainLen:
   \   00000001                      DS8 1
   \   __absolute INT8U View_RxChkSum
   \                     View_RxChkSum:
   \   00000002                      DS8 1
   \   __absolute INT8U View_RxBufCnt
   \                     View_RxBufCnt:
   \   00000003                      DS8 1
   \   __absolute INT8U View_RxRdIx
   \                     View_RxRdIx:
   \   00000004                      DS8 1
   \   __absolute INT8U View_TxChkSum
   \                     View_TxChkSum:
   \   00000005                      DS8 1
   \   __absolute INT8U View_TxState
   \                     View_TxState:
   \   00000006                      DS8 1
   \   __absolute BOOLEAN View_TxActiveFlag
   \                     View_TxActiveFlag:
   \   00000007                      DS8 1
     17          
     18          #if USBD_MODULE == DEF_ENABLED
     19          /*
     20          *********************************************************************************************************
     21          *                                               CONSTANTS
     22          *********************************************************************************************************
     23          */
     24          
     25          #ifndef  VIEW_SUPPORT_MEM
     26          #define  VIEW_SUPPORT_MEM               0                /* Current version doesn't support memory Rd/Wr    */
     27          #endif
     28                                                                      /* Inbound  packets (from PC)                      */
     29          #define  VIEW_PROTOCOL_RX_SD0        0xED                /* Start delimiters                                */
     30          #define  VIEW_PROTOCOL_RX_SD1        0x8C
     31          #define  VIEW_PROTOCOL_RX_ED         0x8D                /* End   delimiter                                 */
     32          
     33                                                                      /* Outbound packets (to PC)                        */
     34          #define  VIEW_PROTOCOL_TX_SD0        0x8C                /* Start delimiters                                */
     35          #define  VIEW_PROTOCOL_TX_SD1        0xED
     36          #define  VIEW_PROTOCOL_TX_ED         0x8D                /* End   delimiter                                 */
     37          
     38          
     39          #define  VIEW_RX_STATE_SD0              0                /* waiting for start first  start delimiter (SD0)  */
     40          #define  VIEW_RX_STATE_SD1              1                /* waiting for start second start delimiter (SD1)  */
     41          #define  VIEW_RX_STATE_LEN              2                /* waiting for len byte                            */
     42          #define  VIEW_RX_STATE_DATA             3                /* waiting for data                                */
     43          #define  VIEW_RX_STATE_CHKSUM           4                /* waiting for checksum                            */
     44          #define  VIEW_RX_STATE_ED               5                /* waiting for end delimiter                       */
     45          
     46          #define  VIEW_TX_STATE_SD0              0                /* Transmit state machine states                   */
     47          #define  VIEW_TX_STATE_SD1              1
     48          #define  VIEW_TX_STATE_DATA_LEN         2
     49          #define  VIEW_TX_STATE_DATA             3
     50          #define  VIEW_TX_STATE_CHKSUM           4
     51          #define  VIEW_TX_STATE_ED               5
     52          #define  VIEW_TX_STATE_STR_LEN          6
     53          #define  VIEW_TX_STATE_STR_TYPE         7
     54          #define  VIEW_TX_STATE_STR_DATA         8
     55          
     56          #define  VIEW_CPU_NAME_SIZE            30
     57          
     58          /*$PAGE*/
     59          /*
     60          *********************************************************************************************************
     61          *                                           LOCAL VARIABLES
     62          *********************************************************************************************************
     63          */
     64          OS_TCB  *ptcb;
     65          INT8U    stat;
   \                     stat:
   \   00000008                      DS8 1
   \   00000009                      DS8 3
   \   __absolute INT8U View_RxBuf[28]
   \                     View_RxBuf:
   \   0000000C                      DS8 28
   \   __absolute INT16U View_RxPktCtr
   \                     View_RxPktCtr:
   \   00000028                      DS8 2
   \   __absolute INT16U View_TxLen
   \                     View_TxLen:
   \   0000002A                      DS8 2
   \   __absolute INT16U View_TxIx
   \                     View_TxIx:
   \   0000002C                      DS8 2
   \   __absolute INT16U View_TxBufCnt
   \                     View_TxBufCnt:
   \   0000002E                      DS8 2
   \   __absolute INT16U View_TxPktCtr
   \                     View_TxPktCtr:
   \   00000030                      DS8 2
   \   __absolute INT16U View_TxStrCnt
   \                     View_TxStrCnt:
   \   00000032                      DS8 2
   \   __absolute INT16U View_TxLenEnd
   \                     View_TxLenEnd:
   \   00000034                      DS8 2
   \   00000036                      DS8 2
   \   __absolute INT32U View_RxCtr
   \                     View_RxCtr:
   \   00000038                      DS8 4
   \   __absolute INT32U View_TxCtr
   \                     View_TxCtr:
   \   0000003C                      DS8 4
   \                     ptcb:
   \   00000040                      DS8 4

   \                                 In section .bss, align 4
   \   __absolute INT8U View_TxBuf[128]
   \                     View_TxBuf:
   \   00000000                      DS8 128

   \                                 In section .bss, align 4
   \   __absolute INT8U *View_TxBufPtr
   \                     View_TxBufPtr:
   \   00000000                      DS8 4

   \                                 In section .bss, align 2
   \   __absolute INT16U View_TxStrLen
   \                     View_TxStrLen:
   \   00000000                      DS8 2
   \   __absolute INT16U View_TxStrDlyCtr
   \                     View_TxStrDlyCtr:
   \   00000002                      DS8 2

   \                                 In section .bss, align 4
   \   __absolute INT8U View_TxStrBuf[128]
   \                     View_TxStrBuf:
   \   00000000                      DS8 128

   \                                 In section .bss, align 4
   \   __absolute void (*View_TerminalRxCallbackFnct)(INT8U)
   \                     View_TerminalRxCallbackFnct:
   \   00000000                      DS8 4
     66          
     67          /*
     68          *********************************************************************************************************
     69          *                                      LOCAL FUNCTION PROTOTYPES
     70          *********************************************************************************************************
     71          */
     72          
     73          static  INT8U   View_CmdParsePkt(void);
     74          static  void    View_CmdGetSysInfo(void);
     75          static  void    View_CmdGetTaskList(void);
     76          static  void    View_CmdGetTaskInfo(void);
     77          static  void    View_CmdGetStackInfo (void);
     78          static  void    View_CmdGetTaskInfo_InvalidTask(void);
     79          static  INT8U   View_CmdGetTaskInfo_TCBStat(OS_TCB *ptcb);
     80          static  void    View_CmdMemRdINT8U(void);
     81          static  void    View_CmdMemRdINT16U(void);
     82          static  void    View_CmdMemRdINT32U(void);
     83          static  void    View_CmdMemWrINT8U(void);
     84          static  void    View_CmdMemWrINT16U(void);
     85          static  void    View_CmdMemWrINT32U(void);
     86          
     87          void    View_RxPkt(void);
     88          static  void    View_RxStoINT8U(INT8U rx_data);
     89          static  void    View_RxBufClr(void);
     90          static  INT8U   View_RxGetINT8U(void);
     91          static  INT16U  View_RxGetINT16U(void);
     92          static  INT32U  View_RxGetINT32U(void);
     93          
     94          static  void    View_TxStart(void);
     95          static  void    View_TxStoINT16U(INT16U tx_data);
     96          static  void    View_TxStoINT32U(INT32U tx_data);
     97          static  void    View_TxStoPtr(void *ptr);
     98          
     99          static  void    View_TxBufClr (void);
    100          static  void    View_TxStoUSB (INT8U tx_data);
    101          static  void    View_Tx_USB (void);
    102          static  void    View_TxDefClr (void);
    103          /*$PAGE*/
    104          /*
    105          *********************************************************************************************************
    106          *                                       uC/OS-View COMMAND HANDLER
    107          *                                            (Parse Packet)
    108          *********************************************************************************************************
    109          */
    110          

   \                                 In section .text, align 2, keep-with-next
    111          static  INT8U  View_CmdParsePkt (void)
    112          {
   \                     View_CmdParsePkt: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB089             SUB      SP,SP,#+36
    113              INT8U cmd0;
    114          
    115          
    116              cmd0 = View_RxGetINT8U();                             /* First byte contains command                     */
   \   00000004   0x.... 0x....      BL       View_RxGetINT8U
   \   00000008   0x4604             MOV      R4,R0
    117              Util_CmdParsePkt (cmd0);
   \   0000000A   0x.... 0x....      BL       Util_CmdParsePkt
    118          /*
    119              if (cmd0 == 'C') {
    120                  //OSView_CmdSendToApp();
    121                  View_TxBufCnt = 0;
    122                  return (0);
    123              }
    124          */
    125              //if (View_TxBufCnt > 0) {                              /* Do cmds only if Tx of the last one is done      */
    126              //    return (0);
    127              //}
    128          
    129              switch (cmd0) {
   \   0000000E   0x2C30             CMP      R4,#+48
   \   00000010   0xF000 0x816A      BEQ.W    ??View_CmdParsePkt_0
   \   00000014   0x2C31             CMP      R4,#+49
   \   00000016   0xF000 0x8198      BEQ.W    ??View_CmdParsePkt_1
   \   0000001A   0x2C32             CMP      R4,#+50
   \   0000001C   0xF000 0x81B8      BEQ.W    ??View_CmdParsePkt_2
   \   00000020   0x2C34             CMP      R4,#+52
   \   00000022   0xF000 0x81E2      BEQ.W    ??View_CmdParsePkt_3
   \   00000026   0x2C54             CMP      R4,#+84
   \   00000028   0xF000 0x8095      BEQ.W    ??View_CmdParsePkt_4
   \   0000002C   0x2C62             CMP      R4,#+98
   \   0000002E   0xF000 0x80F5      BEQ.W    ??View_CmdParsePkt_5
   \   00000032   0x2C6C             CMP      R4,#+108
   \   00000034   0xF000 0x80D4      BEQ.W    ??View_CmdParsePkt_6
   \   00000038   0x2C73             CMP      R4,#+115
   \   0000003A   0xD005             BEQ.N    ??View_CmdParsePkt_7
   \   0000003C   0x2C74             CMP      R4,#+116
   \   0000003E   0xD030             BEQ.N    ??View_CmdParsePkt_8
   \   00000040   0x2C77             CMP      R4,#+119
   \   00000042   0xF000 0x811F      BEQ.W    ??View_CmdParsePkt_9
   \   00000046   0xE213             B.N      ??View_CmdParsePkt_10
    130                       
    131                  case 's':
    132                       View_TxStoINT8U(cmd0);
   \                     ??View_CmdParsePkt_7: (+1)
   \   00000048   0x2073             MOVS     R0,#+115
   \   0000004A   0x.... 0x....      BL       View_TxStoINT8U
    133                       View_TxStoINT8U(0x7C);
   \   0000004E   0x207C             MOVS     R0,#+124
   \   00000050   0x.... 0x....      BL       View_TxStoINT8U
    134                       View_CmdGetSysInfo();
   \   00000054   0x.... 0x....      BL       OSTimeGet
   \   00000058   0x.... 0x....      BL       View_TxStoINT32U
   \   0000005C   0x207C             MOVS     R0,#+124
   \   0000005E   0x.... 0x....      BL       View_TxStoINT8U
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable11
   \   00000066   0x6804             LDR      R4,[R0, #+0]
   \   00000068   0x0C20             LSRS     R0,R4,#+16
   \   0000006A   0x.... 0x....      BL       View_TxStoINT16U
   \   0000006E   0xB2A0             UXTH     R0,R4
   \   00000070   0x.... 0x....      BL       View_TxStoINT16U
   \   00000074   0x207C             MOVS     R0,#+124
   \   00000076   0x.... 0x....      BL       View_TxStoINT8U
   \   0000007A   0x2001             MOVS     R0,#+1
   \   0000007C   0x.... 0x....      BL       View_TxStoINT8U
   \   00000080   0x201E             MOVS     R0,#+30
   \   00000082   0x.... 0x....      BL       View_TxStoINT8U
   \   00000086   0x207C             MOVS     R0,#+124
   \   00000088   0x.... 0x....      BL       View_TxStoINT8U
   \   0000008C   0x211E             MOVS     R1,#+30
   \   0000008E   0x4668             MOV      R0,SP
   \   00000090   0x.... 0x....      BL       __aeabi_memclr4
   \   00000094   0x4668             MOV      R0,SP
   \   00000096   0x.... 0x....      BL       View_GetCPUName
   \   0000009A   0x4668             MOV      R0,SP
   \   0000009C   0x.... 0x....      BL       View_TxStoStr
    135                       break;
   \   000000A0   0xE1E6             B.N      ??View_CmdParsePkt_10
    136          
    137                  case 't':
    138                       View_TxStoINT8U(cmd0);
   \                     ??View_CmdParsePkt_8: (+1)
   \   000000A2   0x2074             MOVS     R0,#+116
   \   000000A4   0x.... 0x....      BL       View_TxStoINT8U
    139                       View_TxStoINT8U(0x7C);
   \   000000A8   0x207C             MOVS     R0,#+124
   \   000000AA   0x.... 0x....      BL       View_TxStoINT8U
    140                       View_CmdGetTaskInfo();
   \   000000AE   0x.... 0x....      LDR.W    R4,??DataTable11_1
   \   000000B2   0x7921             LDRB     R1,[R4, #+4]
   \   000000B4   0x1908             ADDS     R0,R1,R4
   \   000000B6   0x1C49             ADDS     R1,R1,#+1
   \   000000B8   0x7B00             LDRB     R0,[R0, #+12]
   \   000000BA   0x7121             STRB     R1,[R4, #+4]
   \   000000BC   0xB2C9             UXTB     R1,R1
   \   000000BE   0x190A             ADDS     R2,R1,R4
   \   000000C0   0x1C49             ADDS     R1,R1,#+1
   \   000000C2   0x7B12             LDRB     R2,[R2, #+12]
   \   000000C4   0x7121             STRB     R1,[R4, #+4]
   \   000000C6   0xEA42 0x2000      ORR      R0,R2,R0, LSL #+8
   \   000000CA   0xB2C9             UXTB     R1,R1
   \   000000CC   0x190B             ADDS     R3,R1,R4
   \   000000CE   0x1C49             ADDS     R1,R1,#+1
   \   000000D0   0x7B1B             LDRB     R3,[R3, #+12]
   \   000000D2   0x7121             STRB     R1,[R4, #+4]
   \   000000D4   0xB2C9             UXTB     R1,R1
   \   000000D6   0x190D             ADDS     R5,R1,R4
   \   000000D8   0x1C49             ADDS     R1,R1,#+1
   \   000000DA   0x7B2D             LDRB     R5,[R5, #+12]
   \   000000DC   0x7121             STRB     R1,[R4, #+4]
   \   000000DE   0xEA45 0x2103      ORR      R1,R5,R3, LSL #+8
   \   000000E2   0xEA51 0x4500      ORRS     R5,R1,R0, LSL #+16
   \   000000E6   0x6425             STR      R5,[R4, #+64]
   \   000000E8   0xBF18             IT       NE 
   \   000000EA   0x2D01             CMPNE    R5,#+1
   \   000000EC   0xD075             BEQ.N    ??View_CmdParsePkt_11
   \   000000EE   0xF105 0x004C      ADD      R0,R5,#+76
   \   000000F2   0x.... 0x....      BL       View_TxStoStr
   \   000000F6   0x207C             MOVS     R0,#+124
   \   000000F8   0x.... 0x....      BL       View_TxStoINT8U
   \   000000FC   0xF895 0x0032      LDRB     R0,[R5, #+50]
   \   00000100   0x.... 0x....      BL       View_TxStoINT8U
   \   00000104   0x207C             MOVS     R0,#+124
   \   00000106   0x.... 0x....      BL       View_TxStoINT8U
   \   0000010A   0xF105 0x062E      ADD      R6,R5,#+46
   \   0000010E   0x78B0             LDRB     R0,[R6, #+2]
   \   00000110   0xB910             CBNZ.N   R0,??View_CmdParsePkt_12
   \   00000112   0x8830             LDRH     R0,[R6, #+0]
   \   00000114   0xB100             CBZ.N    R0,??View_CmdParsePkt_12
   \   00000116   0x20F0             MOVS     R0,#+240
   \                     ??View_CmdParsePkt_12: (+1)
   \   00000118   0x7220             STRB     R0,[R4, #+8]
   \   0000011A   0x7A20             LDRB     R0,[R4, #+8]
   \   0000011C   0x.... 0x....      BL       View_TxStoINT8U
   \   00000120   0x207C             MOVS     R0,#+124
   \   00000122   0x.... 0x....      BL       View_TxStoINT8U
   \   00000126   0xF105 0x000C      ADD      R0,R5,#+12
   \   0000012A   0xF105 0x0438      ADD      R4,R5,#+56
   \   0000012E   0x6900             LDR      R0,[R0, #+16]
   \   00000130   0x.... 0x....      BL       View_TxStoINT32U
   \   00000134   0x207C             MOVS     R0,#+124
   \   00000136   0x.... 0x....      BL       View_TxStoINT8U
   \   0000013A   0x8830             LDRH     R0,[R6, #+0]
   \   0000013C   0x.... 0x....      BL       View_TxStoINT32U
   \   00000140   0x207C             MOVS     R0,#+124
   \   00000142   0x.... 0x....      BL       View_TxStoINT8U
   \   00000146   0x6860             LDR      R0,[R4, #+4]
   \   00000148   0x.... 0x....      BL       View_TxStoINT32U
   \   0000014C   0x207C             MOVS     R0,#+124
   \   0000014E   0x.... 0x....      BL       View_TxStoINT8U
   \   00000152   0x6820             LDR      R0,[R4, #+0]
   \   00000154   0xE03B             B.N      ??View_CmdParsePkt_13
    141                       break;
    142                       
    143                  case 'T':
    144                       View_TxStoINT8U(cmd0);
   \                     ??View_CmdParsePkt_4: (+1)
   \   00000156   0x2054             MOVS     R0,#+84
   \   00000158   0x.... 0x....      BL       View_TxStoINT8U
    145                       View_TxStoINT8U(0x7C);
   \   0000015C   0x207C             MOVS     R0,#+124
   \   0000015E   0x.... 0x....      BL       View_TxStoINT8U
    146                       View_CmdGetStackInfo();
   \   00000162   0x.... 0x....      LDR.W    R4,??DataTable11_1
   \   00000166   0x7921             LDRB     R1,[R4, #+4]
   \   00000168   0x1908             ADDS     R0,R1,R4
   \   0000016A   0x1C49             ADDS     R1,R1,#+1
   \   0000016C   0x7B00             LDRB     R0,[R0, #+12]
   \   0000016E   0x7121             STRB     R1,[R4, #+4]
   \   00000170   0xB2C9             UXTB     R1,R1
   \   00000172   0x190A             ADDS     R2,R1,R4
   \   00000174   0x1C49             ADDS     R1,R1,#+1
   \   00000176   0x7B12             LDRB     R2,[R2, #+12]
   \   00000178   0x7121             STRB     R1,[R4, #+4]
   \   0000017A   0xEA42 0x2000      ORR      R0,R2,R0, LSL #+8
   \   0000017E   0xB2C9             UXTB     R1,R1
   \   00000180   0x190B             ADDS     R3,R1,R4
   \   00000182   0x1C49             ADDS     R1,R1,#+1
   \   00000184   0x7B1B             LDRB     R3,[R3, #+12]
   \   00000186   0x7121             STRB     R1,[R4, #+4]
   \   00000188   0xB2C9             UXTB     R1,R1
   \   0000018A   0x190D             ADDS     R5,R1,R4
   \   0000018C   0x1C49             ADDS     R1,R1,#+1
   \   0000018E   0x7B2D             LDRB     R5,[R5, #+12]
   \   00000190   0x7121             STRB     R1,[R4, #+4]
   \   00000192   0xEA45 0x2103      ORR      R1,R5,R3, LSL #+8
   \   00000196   0xEA51 0x4500      ORRS     R5,R1,R0, LSL #+16
   \   0000019A   0x6425             STR      R5,[R4, #+64]
   \   0000019C   0xBF18             IT       NE 
   \   0000019E   0x2D01             CMPNE    R5,#+1
   \   000001A0   0xD01B             BEQ.N    ??View_CmdParsePkt_11
   \   000001A2   0xF105 0x0438      ADD      R4,R5,#+56
   \   000001A6   0x68E0             LDR      R0,[R4, #+12]
   \   000001A8   0x.... 0x....      BL       View_TxStoINT32U
   \   000001AC   0x207C             MOVS     R0,#+124
   \   000001AE   0x.... 0x....      BL       View_TxStoINT8U
   \   000001B2   0x68E8             LDR      R0,[R5, #+12]
   \   000001B4   0x0080             LSLS     R0,R0,#+2
   \   000001B6   0x.... 0x....      BL       View_TxStoINT32U
   \   000001BA   0x207C             MOVS     R0,#+124
   \   000001BC   0x.... 0x....      BL       View_TxStoINT8U
   \   000001C0   0x6920             LDR      R0,[R4, #+16]
   \   000001C2   0x.... 0x....      BL       View_TxStoINT32U
   \   000001C6   0x207C             MOVS     R0,#+124
   \   000001C8   0x.... 0x....      BL       View_TxStoINT8U
   \   000001CC   0x6828             LDR      R0,[R5, #+0]
   \                     ??View_CmdParsePkt_13: (+1)
   \   000001CE   0x.... 0x....      BL       View_TxStoINT32U
   \   000001D2   0x207C             MOVS     R0,#+124
   \   000001D4   0x.... 0x....      BL       View_TxStoINT8U
   \   000001D8   0xE14A             B.N      ??View_CmdParsePkt_10
   \                     ??View_CmdParsePkt_11: (+1)
   \   000001DA   0x.... 0x....      BL       View_CmdGetTaskInfo_InvalidTask
   \   000001DE   0xE147             B.N      ??View_CmdParsePkt_10
    147                       break;
    148          
    149                  case 'l':
    150                       View_TxStoINT8U(cmd0);
   \                     ??View_CmdParsePkt_6: (+1)
   \   000001E0   0x206C             MOVS     R0,#+108
   \   000001E2   0x.... 0x....      BL       View_TxStoINT8U
    151                       View_TxStoINT8U(0x7C);
   \   000001E6   0x207C             MOVS     R0,#+124
   \   000001E8   0x.... 0x....      BL       View_TxStoINT8U
    152                       View_CmdGetTaskList();
   \   000001EC   0x.... 0x....      LDR.W    R5,??DataTable11_2
   \   000001F0   0x.... 0x....      LDR.W    R4,??DataTable11_1
   \   000001F4   0x2620             MOVS     R6,#+32
   \                     ??View_CmdParsePkt_14: (+1)
   \   000001F6   0x682F             LDR      R7,[R5, #+0]
   \   000001F8   0x6427             STR      R7,[R4, #+64]
   \   000001FA   0x2F00             CMP      R7,#+0
   \   000001FC   0xBF18             IT       NE 
   \   000001FE   0x2F01             CMPNE    R7,#+1
   \   00000200   0xD008             BEQ.N    ??View_CmdParsePkt_15
   \   00000202   0x0C38             LSRS     R0,R7,#+16
   \   00000204   0x.... 0x....      BL       View_TxStoINT16U
   \   00000208   0xB2B8             UXTH     R0,R7
   \   0000020A   0x.... 0x....      BL       View_TxStoINT16U
   \   0000020E   0x207C             MOVS     R0,#+124
   \   00000210   0x.... 0x....      BL       View_TxStoINT8U
   \                     ??View_CmdParsePkt_15: (+1)
   \   00000214   0x1D2D             ADDS     R5,R5,#+4
   \   00000216   0x1E76             SUBS     R6,R6,#+1
   \   00000218   0xD1ED             BNE.N    ??View_CmdParsePkt_14
   \   0000021A   0xE129             B.N      ??View_CmdParsePkt_10
    153                       break;
    154          
    155                  case 'b':
    156                       View_TxStoINT8U(cmd0);
   \                     ??View_CmdParsePkt_5: (+1)
   \   0000021C   0x2062             MOVS     R0,#+98
   \   0000021E   0x.... 0x....      BL       View_TxStoINT8U
    157                       View_TxStoINT8U(0x7C);
   \   00000222   0x207C             MOVS     R0,#+124
   \   00000224   0x.... 0x....      BL       View_TxStoINT8U
    158                       View_CmdMemRdINT8U();
   \   00000228   0x.... 0x....      LDR.W    R4,??DataTable11_1
   \   0000022C   0x7921             LDRB     R1,[R4, #+4]
   \   0000022E   0x1908             ADDS     R0,R1,R4
   \   00000230   0x1C49             ADDS     R1,R1,#+1
   \   00000232   0x7B00             LDRB     R0,[R0, #+12]
   \   00000234   0x7121             STRB     R1,[R4, #+4]
   \   00000236   0xB2C9             UXTB     R1,R1
   \   00000238   0x190A             ADDS     R2,R1,R4
   \   0000023A   0x1C49             ADDS     R1,R1,#+1
   \   0000023C   0x7B12             LDRB     R2,[R2, #+12]
   \   0000023E   0x7121             STRB     R1,[R4, #+4]
   \   00000240   0xEA42 0x2000      ORR      R0,R2,R0, LSL #+8
   \   00000244   0xB2C9             UXTB     R1,R1
   \   00000246   0x190B             ADDS     R3,R1,R4
   \   00000248   0x1C49             ADDS     R1,R1,#+1
   \   0000024A   0x7B1B             LDRB     R3,[R3, #+12]
   \   0000024C   0x7121             STRB     R1,[R4, #+4]
   \   0000024E   0xB2C9             UXTB     R1,R1
   \   00000250   0x190D             ADDS     R5,R1,R4
   \   00000252   0x1C49             ADDS     R1,R1,#+1
   \   00000254   0x7B2D             LDRB     R5,[R5, #+12]
   \   00000256   0x7121             STRB     R1,[R4, #+4]
   \   00000258   0xEA45 0x2203      ORR      R2,R5,R3, LSL #+8
   \   0000025C   0xEA42 0x4500      ORR      R5,R2,R0, LSL #+16
   \   00000260   0xB2C9             UXTB     R1,R1
   \   00000262   0x1908             ADDS     R0,R1,R4
   \   00000264   0x7B06             LDRB     R6,[R0, #+12]
   \   00000266   0x1C48             ADDS     R0,R1,#+1
   \   00000268   0x2E00             CMP      R6,#+0
   \   0000026A   0x7120             STRB     R0,[R4, #+4]
   \   0000026C   0xF000 0x8100      BEQ.W    ??View_CmdParsePkt_10
   \                     ??View_CmdParsePkt_16: (+1)
   \   00000270   0xF815 0x0B01      LDRB     R0,[R5], #+1
   \   00000274   0x.... 0x....      BL       View_TxStoINT8U
   \   00000278   0x207C             MOVS     R0,#+124
   \   0000027A   0x.... 0x....      BL       View_TxStoINT8U
   \   0000027E   0x1E76             SUBS     R6,R6,#+1
   \   00000280   0xD1F6             BNE.N    ??View_CmdParsePkt_16
   \   00000282   0xE0F5             B.N      ??View_CmdParsePkt_10
    159                       break;
    160                       
    161                  case 'w':
    162                       View_TxStoINT8U(cmd0);
   \                     ??View_CmdParsePkt_9: (+1)
   \   00000284   0x2077             MOVS     R0,#+119
   \   00000286   0x.... 0x....      BL       View_TxStoINT8U
    163                       View_CmdMemRdINT16U();
   \   0000028A   0x.... 0x....      LDR.W    R4,??DataTable11_1
   \   0000028E   0x7921             LDRB     R1,[R4, #+4]
   \   00000290   0x1908             ADDS     R0,R1,R4
   \   00000292   0x1C49             ADDS     R1,R1,#+1
   \   00000294   0x7B00             LDRB     R0,[R0, #+12]
   \   00000296   0x7121             STRB     R1,[R4, #+4]
   \   00000298   0xB2C9             UXTB     R1,R1
   \   0000029A   0x190A             ADDS     R2,R1,R4
   \   0000029C   0x1C49             ADDS     R1,R1,#+1
   \   0000029E   0x7B12             LDRB     R2,[R2, #+12]
   \   000002A0   0x7121             STRB     R1,[R4, #+4]
   \   000002A2   0xEA42 0x2000      ORR      R0,R2,R0, LSL #+8
   \   000002A6   0xB2C9             UXTB     R1,R1
   \   000002A8   0x190B             ADDS     R3,R1,R4
   \   000002AA   0x1C49             ADDS     R1,R1,#+1
   \   000002AC   0x7B1B             LDRB     R3,[R3, #+12]
   \   000002AE   0x7121             STRB     R1,[R4, #+4]
   \   000002B0   0xB2C9             UXTB     R1,R1
   \   000002B2   0x190D             ADDS     R5,R1,R4
   \   000002B4   0x1C49             ADDS     R1,R1,#+1
   \   000002B6   0x7B2D             LDRB     R5,[R5, #+12]
   \   000002B8   0x7121             STRB     R1,[R4, #+4]
   \   000002BA   0xEA45 0x2203      ORR      R2,R5,R3, LSL #+8
   \   000002BE   0xEA42 0x4500      ORR      R5,R2,R0, LSL #+16
   \   000002C2   0xB2C9             UXTB     R1,R1
   \   000002C4   0x1908             ADDS     R0,R1,R4
   \   000002C6   0x7B06             LDRB     R6,[R0, #+12]
   \   000002C8   0x1C48             ADDS     R0,R1,#+1
   \   000002CA   0x2E00             CMP      R6,#+0
   \   000002CC   0x7120             STRB     R0,[R4, #+4]
   \   000002CE   0xF000 0x80CF      BEQ.W    ??View_CmdParsePkt_10
   \                     ??View_CmdParsePkt_17: (+1)
   \   000002D2   0xF835 0x4B02      LDRH     R4,[R5], #+2
   \   000002D6   0x0A20             LSRS     R0,R4,#+8
   \   000002D8   0x.... 0x....      BL       View_TxStoINT8U
   \   000002DC   0xB2E0             UXTB     R0,R4
   \   000002DE   0x.... 0x....      BL       View_TxStoINT8U
   \   000002E2   0x1E76             SUBS     R6,R6,#+1
   \   000002E4   0xD1F5             BNE.N    ??View_CmdParsePkt_17
   \   000002E6   0xE0C3             B.N      ??View_CmdParsePkt_10
    164                       break;
    165          
    166                  case '0':
    167                       View_TxStoINT8U(cmd0);
   \                     ??View_CmdParsePkt_0: (+1)
   \   000002E8   0x2030             MOVS     R0,#+48
   \   000002EA   0x.... 0x....      BL       View_TxStoINT8U
    168                       View_CmdMemRdINT32U();
   \   000002EE   0x.... 0x....      LDR.W    R4,??DataTable11_1
   \   000002F2   0x7921             LDRB     R1,[R4, #+4]
   \   000002F4   0x1908             ADDS     R0,R1,R4
   \   000002F6   0x1C49             ADDS     R1,R1,#+1
   \   000002F8   0x7B00             LDRB     R0,[R0, #+12]
   \   000002FA   0x7121             STRB     R1,[R4, #+4]
   \   000002FC   0xB2C9             UXTB     R1,R1
   \   000002FE   0x190A             ADDS     R2,R1,R4
   \   00000300   0x1C49             ADDS     R1,R1,#+1
   \   00000302   0x7B12             LDRB     R2,[R2, #+12]
   \   00000304   0x7121             STRB     R1,[R4, #+4]
   \   00000306   0xEA42 0x2000      ORR      R0,R2,R0, LSL #+8
   \   0000030A   0xB2C9             UXTB     R1,R1
   \   0000030C   0x190B             ADDS     R3,R1,R4
   \   0000030E   0x1C49             ADDS     R1,R1,#+1
   \   00000310   0x7B1B             LDRB     R3,[R3, #+12]
   \   00000312   0x7121             STRB     R1,[R4, #+4]
   \   00000314   0xB2C9             UXTB     R1,R1
   \   00000316   0x190D             ADDS     R5,R1,R4
   \   00000318   0x1C49             ADDS     R1,R1,#+1
   \   0000031A   0x7B2D             LDRB     R5,[R5, #+12]
   \   0000031C   0x7121             STRB     R1,[R4, #+4]
   \   0000031E   0xEA45 0x2103      ORR      R1,R5,R3, LSL #+8
   \   00000322   0xEA41 0x4400      ORR      R4,R1,R0, LSL #+16
   \   00000326   0x.... 0x....      BL       View_RxGetINT8U
   \   0000032A   0x0005             MOVS     R5,R0
   \   0000032C   0xF000 0x80A0      BEQ.W    ??View_CmdParsePkt_10
   \                     ??View_CmdParsePkt_18: (+1)
   \   00000330   0xF854 0x6B04      LDR      R6,[R4], #+4
   \   00000334   0x0C30             LSRS     R0,R6,#+16
   \   00000336   0x.... 0x....      BL       View_TxStoINT16U
   \   0000033A   0xB2B0             UXTH     R0,R6
   \   0000033C   0x1E6D             SUBS     R5,R5,#+1
   \   0000033E   0x.... 0x....      BL       View_TxStoINT16U
   \   00000342   0xB2ED             UXTB     R5,R5
   \   00000344   0x2D00             CMP      R5,#+0
   \   00000346   0xD1F3             BNE.N    ??View_CmdParsePkt_18
   \   00000348   0xE092             B.N      ??View_CmdParsePkt_10
    169                       break;
    170          
    171                  case '1':
    172                       View_TxStoINT8U(cmd0);
   \                     ??View_CmdParsePkt_1: (+1)
   \   0000034A   0x2031             MOVS     R0,#+49
   \   0000034C   0x.... 0x....      BL       View_TxStoINT8U
    173                       View_CmdMemWrINT8U();
   \   00000350   0x.... 0x....      LDR.W    R4,??DataTable11_1
   \   00000354   0x7921             LDRB     R1,[R4, #+4]
   \   00000356   0x1908             ADDS     R0,R1,R4
   \   00000358   0x1C49             ADDS     R1,R1,#+1
   \   0000035A   0x7B00             LDRB     R0,[R0, #+12]
   \   0000035C   0x7121             STRB     R1,[R4, #+4]
   \   0000035E   0xB2C9             UXTB     R1,R1
   \   00000360   0x190A             ADDS     R2,R1,R4
   \   00000362   0x1C49             ADDS     R1,R1,#+1
   \   00000364   0x7B12             LDRB     R2,[R2, #+12]
   \   00000366   0x7121             STRB     R1,[R4, #+4]
   \   00000368   0xEA42 0x2000      ORR      R0,R2,R0, LSL #+8
   \   0000036C   0xB2C9             UXTB     R1,R1
   \   0000036E   0x190B             ADDS     R3,R1,R4
   \   00000370   0x1C49             ADDS     R1,R1,#+1
   \   00000372   0x7B1B             LDRB     R3,[R3, #+12]
   \   00000374   0x7121             STRB     R1,[R4, #+4]
   \   00000376   0xB2C9             UXTB     R1,R1
   \   00000378   0x190D             ADDS     R5,R1,R4
   \   0000037A   0x1C49             ADDS     R1,R1,#+1
   \   0000037C   0x7B2D             LDRB     R5,[R5, #+12]
   \   0000037E   0x7121             STRB     R1,[R4, #+4]
   \   00000380   0xEA45 0x2103      ORR      R1,R5,R3, LSL #+8
   \   00000384   0xEA41 0x4400      ORR      R4,R1,R0, LSL #+16
   \   00000388   0x.... 0x....      BL       View_RxGetINT8U
   \   0000038C   0x7020             STRB     R0,[R4, #+0]
    174                       break;
   \   0000038E   0xE06F             B.N      ??View_CmdParsePkt_10
    175          
    176                  case '2':
    177                       View_TxStoINT8U(cmd0);
   \                     ??View_CmdParsePkt_2: (+1)
   \   00000390   0x2032             MOVS     R0,#+50
   \   00000392   0x.... 0x....      BL       View_TxStoINT8U
    178                       View_CmdMemWrINT16U();
   \   00000396   0x.... 0x....      LDR.W    R4,??DataTable11_1
   \   0000039A   0x7921             LDRB     R1,[R4, #+4]
   \   0000039C   0x1908             ADDS     R0,R1,R4
   \   0000039E   0x1C49             ADDS     R1,R1,#+1
   \   000003A0   0x7B00             LDRB     R0,[R0, #+12]
   \   000003A2   0x7121             STRB     R1,[R4, #+4]
   \   000003A4   0xB2C9             UXTB     R1,R1
   \   000003A6   0x190A             ADDS     R2,R1,R4
   \   000003A8   0x1C49             ADDS     R1,R1,#+1
   \   000003AA   0x7B12             LDRB     R2,[R2, #+12]
   \   000003AC   0x7121             STRB     R1,[R4, #+4]
   \   000003AE   0xEA42 0x2000      ORR      R0,R2,R0, LSL #+8
   \   000003B2   0xB2C9             UXTB     R1,R1
   \   000003B4   0x190B             ADDS     R3,R1,R4
   \   000003B6   0x1C49             ADDS     R1,R1,#+1
   \   000003B8   0x7B1B             LDRB     R3,[R3, #+12]
   \   000003BA   0x7121             STRB     R1,[R4, #+4]
   \   000003BC   0xB2C9             UXTB     R1,R1
   \   000003BE   0x190D             ADDS     R5,R1,R4
   \   000003C0   0x1C49             ADDS     R1,R1,#+1
   \   000003C2   0x7B2D             LDRB     R5,[R5, #+12]
   \   000003C4   0x7121             STRB     R1,[R4, #+4]
   \   000003C6   0xB2C9             UXTB     R1,R1
   \   000003C8   0x190E             ADDS     R6,R1,R4
   \   000003CA   0x1C49             ADDS     R1,R1,#+1
   \   000003CC   0x7B36             LDRB     R6,[R6, #+12]
   \   000003CE   0x7121             STRB     R1,[R4, #+4]
   \   000003D0   0xB2C9             UXTB     R1,R1
   \   000003D2   0x190F             ADDS     R7,R1,R4
   \   000003D4   0x1C49             ADDS     R1,R1,#+1
   \   000003D6   0x7B3F             LDRB     R7,[R7, #+12]
   \   000003D8   0x7121             STRB     R1,[R4, #+4]
   \   000003DA   0xEA45 0x2103      ORR      R1,R5,R3, LSL #+8
   \   000003DE   0xEA41 0x4000      ORR      R0,R1,R0, LSL #+16
   \   000003E2   0xEA47 0x2106      ORR      R1,R7,R6, LSL #+8
   \   000003E6   0x8001             STRH     R1,[R0, #+0]
    179                       break;
   \   000003E8   0xE042             B.N      ??View_CmdParsePkt_10
    180          
    181                  case '4':
    182                       View_TxStoINT8U(cmd0);
   \                     ??View_CmdParsePkt_3: (+1)
   \   000003EA   0x2034             MOVS     R0,#+52
   \   000003EC   0x.... 0x....      BL       View_TxStoINT8U
    183                       View_CmdMemWrINT32U();
   \   000003F0   0x.... 0x....      LDR.W    R4,??DataTable11_1
   \   000003F4   0x7921             LDRB     R1,[R4, #+4]
   \   000003F6   0x1908             ADDS     R0,R1,R4
   \   000003F8   0x1C49             ADDS     R1,R1,#+1
   \   000003FA   0x7B00             LDRB     R0,[R0, #+12]
   \   000003FC   0x7121             STRB     R1,[R4, #+4]
   \   000003FE   0xB2C9             UXTB     R1,R1
   \   00000400   0x190A             ADDS     R2,R1,R4
   \   00000402   0x1C49             ADDS     R1,R1,#+1
   \   00000404   0x7B12             LDRB     R2,[R2, #+12]
   \   00000406   0x7121             STRB     R1,[R4, #+4]
   \   00000408   0xEA42 0x2000      ORR      R0,R2,R0, LSL #+8
   \   0000040C   0xB2C9             UXTB     R1,R1
   \   0000040E   0x190B             ADDS     R3,R1,R4
   \   00000410   0x1C49             ADDS     R1,R1,#+1
   \   00000412   0x7B1B             LDRB     R3,[R3, #+12]
   \   00000414   0x7121             STRB     R1,[R4, #+4]
   \   00000416   0xB2C9             UXTB     R1,R1
   \   00000418   0x190D             ADDS     R5,R1,R4
   \   0000041A   0x1C49             ADDS     R1,R1,#+1
   \   0000041C   0x7B2D             LDRB     R5,[R5, #+12]
   \   0000041E   0x7121             STRB     R1,[R4, #+4]
   \   00000420   0xEA45 0x2203      ORR      R2,R5,R3, LSL #+8
   \   00000424   0xB2C9             UXTB     R1,R1
   \   00000426   0x190E             ADDS     R6,R1,R4
   \   00000428   0x1C49             ADDS     R1,R1,#+1
   \   0000042A   0x7B36             LDRB     R6,[R6, #+12]
   \   0000042C   0x7121             STRB     R1,[R4, #+4]
   \   0000042E   0xEA42 0x4000      ORR      R0,R2,R0, LSL #+16
   \   00000432   0xB2C9             UXTB     R1,R1
   \   00000434   0x190F             ADDS     R7,R1,R4
   \   00000436   0x1C49             ADDS     R1,R1,#+1
   \   00000438   0x7B3F             LDRB     R7,[R7, #+12]
   \   0000043A   0x7121             STRB     R1,[R4, #+4]
   \   0000043C   0xFA5F 0xFC81      UXTB     R12,R1
   \   00000440   0xEB0C 0x0104      ADD      R1,R12,R4
   \   00000444   0xF10C 0x0E01      ADD      LR,R12,#+1
   \   00000448   0x7B09             LDRB     R1,[R1, #+12]
   \   0000044A   0xF884 0xE004      STRB     LR,[R4, #+4]
   \   0000044E   0xEA47 0x2206      ORR      R2,R7,R6, LSL #+8
   \   00000452   0xFA5F 0xFE8E      UXTB     LR,LR
   \   00000456   0xEB0E 0x0C04      ADD      R12,LR,R4
   \   0000045A   0xF10E 0x0E01      ADD      LR,LR,#+1
   \   0000045E   0xF89C 0xC00C      LDRB     R12,[R12, #+12]
   \   00000462   0xF884 0xE004      STRB     LR,[R4, #+4]
   \   00000466   0xEA4C 0x2101      ORR      R1,R12,R1, LSL #+8
   \   0000046A   0xEA41 0x4102      ORR      R1,R1,R2, LSL #+16
   \   0000046E   0x6001             STR      R1,[R0, #+0]
    184                       break;
    185          
    186                  default:
    187                       break;
    188              }
    189              
    190              /* Terminal Util */
    191          /*
    192              if(View_TxBufCnt == 0){
    193                Util_CmdParsePkt (cmd0);
    194              }
    195          */    
    196              return (View_TxBufCnt);
   \                     ??View_CmdParsePkt_10: (+1)
   \   00000470   0x....             LDR.N    R0,??DataTable11_1
   \   00000472   0x8DC0             LDRH     R0,[R0, #+46]
   \   00000474   0xB2C0             UXTB     R0,R0
   \   00000476   0xB009             ADD      SP,SP,#+36
   \   00000478   0xBDF0             POP      {R4-R7,PC}       ;; return
    197          }
    198          
    199          /*
    200          *********************************************************************************************************
    201          *                                       uC/OS-View COMMAND HANDLER
    202          *                                        (Get System Information)
    203          *********************************************************************************************************
    204          */
    205          
    206          static  void  View_CmdGetSysInfo (void)
    207          {
    208              INT8U   s[VIEW_CPU_NAME_SIZE+1];
    209              INT8U   i;
    210              INT32U  time;
    211          
    212              time = OSTimeGet();                                   /* Send current value of tick counter              */
    213              View_TxStoINT32U(time);
    214              View_TxStoINT8U(0x7C);                                   /* Indicate profiling information will be sent     */
    215              View_TxStoPtr(OSTCBCur);                              /* Current task's OS_TCB                           */
    216              View_TxStoINT8U(0x7C);                                   /* Indicate profiling information will be sent     */
    217              View_TxStoINT16U(OS_VERSION);                         /* Send uC/OS-II's version number                  */
    218              View_TxStoINT8U(0x7C);                                   /* Indicate profiling information will be sent     */
    219          
    220              for (i = 0; i < VIEW_CPU_NAME_SIZE; i++) {            /* Clear buffer to help with debug.                */
    221                  s[i] = 0x00;
    222              }
    223              View_GetCPUName(s);                                   /* Get Processor Name in string 's'                */
    224              View_TxStoStr(s);
    225          
    226          }
    227          
    228          /*
    229          *********************************************************************************************************
    230          *                                       uC/OS-View COMMAND HANDLER
    231          *                                            (Get Task List)
    232          *********************************************************************************************************
    233          */
    234          
    235          static  void  View_CmdGetTaskList (void)
    236          {
    237              INT8U   prio;
    238                                                                /* Identifier for data type                        */
    239              for (prio = 0; prio <= OS_LOWEST_PRIO; prio++) {
    240                  ptcb = OSTCBPrioTbl[prio];
    241                  if (ptcb != (OS_TCB *)0 && ptcb != (OS_TCB *)1) {        /* Does task exist? (Not a Mutex reserved task)    */
    242                      View_TxStoINT32U((INT32U)ptcb);                      /* Yes, send the task's TCB address                */
    243                      View_TxStoINT8U(0x7C);
    244                  }
    245              }
    246          }
    247          
    248          /*
    249          *********************************************************************************************************
    250          *                                       uC/OS-View COMMAND HANDLER
    251          *                                         (Get Task Information)
    252          *********************************************************************************************************
    253          */
    254          
    255          static  void  View_CmdGetStackInfo (void)
    256          {
    257          
    258          
    259              ptcb   = (OS_TCB *)View_RxGetINT32U();                         /* Get the desired task's TCB address     */
    260          
    261              if (ptcb != (OS_TCB *)0 && ptcb != (OS_TCB *)1) {              /* Make sure we have a valid TCB pointer  */
    262                  View_TxStoINT32U((INT32U)ptcb->OSTCBStkBase);              /* Stack base address                     */
    263                  View_TxStoINT8U(0x7C);
    264                  View_TxStoINT32U(ptcb->OSTCBStkSize * sizeof(OS_STK));     /* Stack size (in #bytes)                 */
    265                  View_TxStoINT8U(0x7C);
    266                  View_TxStoINT32U(ptcb->OSTCBStkUsed);                      /* Number of bytes used                   */
    267                  View_TxStoINT8U(0x7C);
    268                  View_TxStoINT32U((INT32U)ptcb->OSTCBStkPtr);               /* Current stack pointer address          */
    269                  View_TxStoINT8U(0x7C);
    270              } else {
    271                  View_CmdGetTaskInfo_InvalidTask();
    272              }
    273          }
    274          
    275          /*$PAGE*/
    276          
    277          /*
    278          *********************************************************************************************************
    279          *                                       uC/OS-View COMMAND HANDLER
    280          *                                         (Get Task Stack Information)
    281          *********************************************************************************************************
    282          */
    283          
    284          static  void  View_CmdGetTaskInfo (void)
    285          {
    286          
    287          
    288              ptcb   = (OS_TCB *)View_RxGetINT32U();                         /* Get the desired task's TCB address     */
    289          
    290              if (ptcb != (OS_TCB *)0 && ptcb != (OS_TCB *)1) {              /* Make sure we have a valid TCB pointer  */
    291                  View_TxStoStr(ptcb->OSTCBTaskName); 			   /* Task name                              */
    292                  View_TxStoINT8U(0x7C);
    293                  View_TxStoINT8U(ptcb->OSTCBPrio);                          /* Prio                                   */
    294                  View_TxStoINT8U(0x7C);
    295                  stat = View_CmdGetTaskInfo_TCBStat(ptcb);                  /* Task status                            */
    296                  View_TxStoINT8U(stat);
    297                  View_TxStoINT8U(0x7C);
    298                  View_TxStoINT32U((INT32U)ptcb->OSTCBEventPtr);             /* Pointer to event task is waiting for.  */
    299                  View_TxStoINT8U(0x7C);
    300                  View_TxStoINT32U((INT32U)ptcb->OSTCBDly);                  /* Timeout (i.e. ticks of delayed task)   */
    301                  View_TxStoINT8U(0x7C);
    302                  View_TxStoINT32U(ptcb->OSTCBCyclesTot);                    /* ExecTime                               */
    303                  View_TxStoINT8U(0x7C);
    304                  View_TxStoINT32U(ptcb->OSTCBCtxSwCtr);                     /* NumActivations                         */
    305                  View_TxStoINT8U(0x7C);
    306              } else {
    307                  View_CmdGetTaskInfo_InvalidTask();
    308              }
    309          }
    310          
    311          /*$PAGE*/
    312          /*
    313          *********************************************************************************************************
    314          *                                       uC/OS-View COMMAND HANDLER
    315          *                                             (Invalid Task)
    316          *********************************************************************************************************
    317          */
    318          

   \                                 In section .text, align 2, keep-with-next
    319          static  void  View_CmdGetTaskInfo_InvalidTask (void)
    320          {
   \                     View_CmdGetTaskInfo_InvalidTask: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    321              View_TxStoStr((INT8U *)"INVALID TASK!");	    	  /* Task name                                       */
   \   00000002   0x.... 0x....      ADR.W    R0,?_0
   \   00000006   0x.... 0x....      BL       View_TxStoStr
    322              View_TxStoINT8U(0x7C);
   \   0000000A   0x207C             MOVS     R0,#+124
   \   0000000C   0x.... 0x....      BL       View_TxStoINT8U
    323              View_TxStoINT8U(0);                                   /* Prio                                            */
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x.... 0x....      BL       View_TxStoINT8U
    324              View_TxStoINT8U(0x7C);
   \   00000016   0x207C             MOVS     R0,#+124
   \   00000018   0x.... 0x....      BL       View_TxStoINT8U
    325              View_TxStoINT8U(0);                                   /* Stat                                            */
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x.... 0x....      BL       View_TxStoINT8U
    326              View_TxStoINT8U(0x7C); 
   \   00000022   0x207C             MOVS     R0,#+124
   \   00000024   0x.... 0x....      BL       View_TxStoINT8U
    327              View_TxStoINT32U(0);                                  /* Data                                            */
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x.... 0x....      BL       View_TxStoINT8U
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x.... 0x....      BL       View_TxStoINT8U
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x.... 0x....      BL       View_TxStoINT8U
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x.... 0x....      BL       View_TxStoINT8U
    328              View_TxStoINT8U(0x7C);
   \   00000040   0x207C             MOVS     R0,#+124
   \   00000042   0x.... 0x....      BL       View_TxStoINT8U
    329              View_TxStoINT32U(0);                                  /* Timeout                                         */
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0x.... 0x....      BL       View_TxStoINT8U
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0x.... 0x....      BL       View_TxStoINT8U
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0x.... 0x....      BL       View_TxStoINT8U
   \   00000058   0x2000             MOVS     R0,#+0
   \   0000005A   0x.... 0x....      BL       View_TxStoINT8U
    330              View_TxStoINT8U(0x7C);
   \   0000005E   0x207C             MOVS     R0,#+124
   \   00000060   0x.... 0x....      BL       View_TxStoINT8U
    331              View_TxStoINT32U(0);                                  /* ExecTime                                        */
   \   00000064   0x2000             MOVS     R0,#+0
   \   00000066   0x.... 0x....      BL       View_TxStoINT8U
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0x.... 0x....      BL       View_TxStoINT8U
   \   00000070   0x2000             MOVS     R0,#+0
   \   00000072   0x.... 0x....      BL       View_TxStoINT8U
   \   00000076   0x2000             MOVS     R0,#+0
   \   00000078   0x.... 0x....      BL       View_TxStoINT8U
    332              View_TxStoINT8U(0x7C);
   \   0000007C   0x207C             MOVS     R0,#+124
   \   0000007E   0x.... 0x....      BL       View_TxStoINT8U
    333              View_TxStoINT32U(0);                                  /* NumActivations                                  */
   \   00000082   0x2000             MOVS     R0,#+0
   \   00000084   0x.... 0x....      BL       View_TxStoINT8U
   \   00000088   0x2000             MOVS     R0,#+0
   \   0000008A   0x.... 0x....      BL       View_TxStoINT8U
   \   0000008E   0x2000             MOVS     R0,#+0
   \   00000090   0x.... 0x....      BL       View_TxStoINT8U
   \   00000094   0xE8BD 0x4002      POP      {R1,LR}
   \   00000098   0x2000             MOVS     R0,#+0
   \   0000009A   0x....             B.N      View_TxStoINT8U
    334          }
    335          
    336          /*
    337          *********************************************************************************************************
    338          *                                           Obtain CPU name
    339          *********************************************************************************************************
    340          */
    341          

   \                                 In section .text, align 2, keep-with-next
    342          void  View_GetCPUName (INT8U *s)
    343          {
   \                     View_GetCPUName: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    344              INT8U  cpu_clk_freq;
    345          
    346          
    347              cpu_clk_freq = (INT8U)(BSP_CPU_ClkFreq() / 1000000L);
   \   00000004   0x.... 0x....      BL       BSP_CPU_ClkFreq
    348              strcpy((char *)s, "ControlHome 2.02 STM32 ( xx MHz )");
   \   00000008   0x2222             MOVS     R2,#+34
   \   0000000A   0x....             LDR.N    R1,??DataTable11_3  ;; 0xf4240
   \   0000000C   0xFBB0 0xF5F1      UDIV     R5,R0,R1
   \   00000010   0x.... 0x....      ADR.W    R1,?_1
   \   00000014   0x4620             MOV      R0,R4
   \   00000016   0x.... 0x....      BL       __aeabi_memcpy
   \   0000001A   0xB2ED             UXTB     R5,R5
    349              s[25] = cpu_clk_freq / 10 + '0';
   \   0000001C   0x200A             MOVS     R0,#+10
   \   0000001E   0xFB95 0xF0F0      SDIV     R0,R5,R0
   \   00000022   0xF100 0x0130      ADD      R1,R0,#+48
   \   00000026   0x7661             STRB     R1,[R4, #+25]
    350              s[26] = cpu_clk_freq % 10 + '0';
   \   00000028   0xEB00 0x0180      ADD      R1,R0,R0, LSL #+2
   \   0000002C   0xEBA5 0x0041      SUB      R0,R5,R1, LSL #+1
   \   00000030   0x3030             ADDS     R0,R0,#+48
   \   00000032   0x76A0             STRB     R0,[R4, #+26]
    351          }
   \   00000034   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    352          
    353          /*
    354          *********************************************************************************************************
    355          *                                       uC/OS-View COMMAND HANDLER
    356          *                                         (Get ptcb->OSTCBStat)
    357          *********************************************************************************************************
    358          */
    359          
    360          static  INT8U  View_CmdGetTaskInfo_TCBStat (OS_TCB *ptcb)
    361          {
    362          
    363              if (ptcb->OSTCBStat != OS_STAT_RDY) {
    364                  stat = ptcb->OSTCBStat;
    365              } else {
    366                  if (ptcb->OSTCBDly > 0) {                           /* Task status                                     */
    367                      stat = 0xF0;
    368                  } else {
    369                      stat = ptcb->OSTCBStat;
    370                  }
    371              }
    372              return (stat);
    373          }
    374          
    375          /*$PAGE*/
    376          /*
    377          *********************************************************************************************************
    378          *                                       uC/OS-View COMMAND HANDLER
    379          *                                              (Memory)
    380          *********************************************************************************************************
    381          */
    382          
    383          static  void  View_CmdMemRdINT8U (void)
    384          {
    385              INT32U addr;
    386              INT8U  nbytes;
    387          
    388          
    389              addr   = View_RxGetINT32U();
    390              nbytes = View_RxGetINT8U();
    391              while (nbytes--) {
    392                  View_TxStoINT8U(*(INT8U *)addr);
    393                  View_TxStoINT8U(0x7C);
    394                  addr++;
    395              }
    396          }
    397          
    398          static  void  View_CmdMemRdINT16U (void)
    399          {
    400              INT32U addr;
    401              INT8U  nbytes;
    402          
    403          
    404              addr   = View_RxGetINT32U();
    405              nbytes = View_RxGetINT8U();
    406              while (nbytes--) {
    407                  View_TxStoINT16U(*(INT16U *)addr);
    408                  addr += 2;
    409              }
    410          }
    411          
    412          
    413          static  void  View_CmdMemRdINT32U (void)
    414          {
    415              INT32U addr;
    416              INT8U  nbytes;
    417          
    418          
    419              addr   = View_RxGetINT32U();
    420              nbytes = View_RxGetINT8U();
    421              while (nbytes--) {
    422                  View_TxStoINT32U(*(INT32U *)addr);
    423                  addr += 4;
    424              }
    425          }
    426          
    427          /*
    428          *********************************************************************************************************
    429          *                                       uC/OS-View COMMAND HANDLER
    430          *                                           (Write Functions)
    431          *********************************************************************************************************
    432          */
    433          
    434          static  void  View_CmdMemWrINT8U (void)
    435          {
    436              INT8U *p;
    437          
    438          
    439              p    = (INT8U *)View_RxGetINT32U();
    440              (*p) = View_RxGetINT8U();
    441          }
    442          
    443          
    444          static  void  View_CmdMemWrINT16U (void)
    445          {
    446              INT16U *p;
    447          
    448          
    449              p    = (INT16U *)View_RxGetINT32U();
    450              (*p) = View_RxGetINT16U();
    451          }
    452          
    453          
    454          static  void  View_CmdMemWrINT32U (void)
    455          {
    456          
    457              INT32U *p;
    458          
    459          
    460              p    = (INT32U *)View_RxGetINT32U();
    461              (*p) = View_RxGetINT32U();
    462          
    463          }
    464          
    465          /*
    466          *********************************************************************************************************
    467          *                                              Rx Handler
    468          *
    469          * Description: This routine is called from the Rx interrupt service handler.
    470          *********************************************************************************************************
    471          */
    472          

   \                                 In section .text, align 4, keep-with-next
    473          void  View_RxHandler (INT8U rx_data)
    474          {
   \                     View_RxHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    475              View_RxCtr++;
   \   00000002   0x....             LDR.N    R4,??DataTable11_1
   \   00000004   0x6BA1             LDR      R1,[R4, #+56]
   \   00000006   0x1C49             ADDS     R1,R1,#+1
   \   00000008   0x63A1             STR      R1,[R4, #+56]
    476              switch (View_RxState) {
   \   0000000A   0x7821             LDRB     R1,[R4, #+0]
   \   0000000C   0x2905             CMP      R1,#+5
   \   0000000E   0xD842             BHI.N    ??View_RxHandler_1
   \   00000010   0xE8DF 0xF001      TBB      [PC, R1]
   \                     ??View_RxHandler_0:
   \   00000014   0x03 0x0B          DC8      0x3,0xB,0xF,0x1C
   \              0x0F 0x1C    
   \   00000018   0x2D 0x34          DC8      0x2D,0x34
    477                  case VIEW_RX_STATE_SD0:                          /* waiting for start first  start delimiter (SD0)  */
    478                       if (rx_data == VIEW_PROTOCOL_RX_SD0) {
   \                     ??View_RxHandler_2: (+1)
   \   0000001A   0x28ED             CMP      R0,#+237
   \   0000001C   0xD13D             BNE.N    ??View_RxHandler_3
    479                           View_RxState = VIEW_RX_STATE_SD1;
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0x7020             STRB     R0,[R4, #+0]
    480                           View_RxBufClr();
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x70E0             STRB     R0,[R4, #+3]
   \   00000026   0x7120             STRB     R0,[R4, #+4]
    481                       }
   \   00000028   0xBD10             POP      {R4,PC}
    482                       break;
    483          
    484                  case VIEW_RX_STATE_SD1:                          /* waiting for start second start delimiter (SD1)  */
    485                       if (rx_data == VIEW_PROTOCOL_RX_SD1) {
   \                     ??View_RxHandler_4: (+1)
   \   0000002A   0x288C             CMP      R0,#+140
   \   0000002C   0xD133             BNE.N    ??View_RxHandler_1
    486                           View_RxState = VIEW_RX_STATE_LEN;
   \   0000002E   0x2002             MOVS     R0,#+2
   \   00000030   0xE032             B.N      ??View_RxHandler_5
    487                       } else {
    488                           View_RxState = VIEW_RX_STATE_SD0;
    489                       }
    490                       break;
    491          
    492                  case VIEW_RX_STATE_LEN:                          /* waiting for 'len' byte                          */
    493                       if ((rx_data == 0x00) | (rx_data > VIEW_RX_BUF_SIZE)) {
   \                     ??View_RxHandler_6: (+1)
   \   00000032   0x1E41             SUBS     R1,R0,#+1
   \   00000034   0x4189             SBCS     R1,R1,R1
   \   00000036   0x281D             CMP      R0,#+29
   \   00000038   0xBFAC             ITE      GE 
   \   0000003A   0x2201             MOVGE    R2,#+1
   \   0000003C   0x2200             MOVLT    R2,#+0
   \   0000003E   0xEA52 0x71D1      ORRS     R1,R2,R1, LSR #+31
   \   00000042   0xD128             BNE.N    ??View_RxHandler_1
    494                           View_RxState  = VIEW_RX_STATE_SD0;    /* Can not handle this size ...                    */
    495                       } else {
    496                           View_RxChkSum    = rx_data;
   \   00000044   0x70A0             STRB     R0,[R4, #+2]
    497                           View_RxRemainLen = rx_data;
   \   00000046   0x7060             STRB     R0,[R4, #+1]
    498                           View_RxState     = VIEW_RX_STATE_DATA;
   \   00000048   0x2003             MOVS     R0,#+3
   \   0000004A   0xE025             B.N      ??View_RxHandler_5
    499                       }
    500                       break;
    501          
    502                  case VIEW_RX_STATE_DATA:                         /* waiting for data                                */
    503                       View_RxStoINT8U(rx_data);
   \                     ??View_RxHandler_7: (+1)
   \   0000004C   0x78E1             LDRB     R1,[R4, #+3]
   \   0000004E   0x291C             CMP      R1,#+28
   \   00000050   0xDA03             BGE.N    ??View_RxHandler_8
   \   00000052   0x190A             ADDS     R2,R1,R4
   \   00000054   0x1C49             ADDS     R1,R1,#+1
   \   00000056   0x7310             STRB     R0,[R2, #+12]
   \   00000058   0x70E1             STRB     R1,[R4, #+3]
    504                       View_RxChkSum += rx_data;
   \                     ??View_RxHandler_8: (+1)
   \   0000005A   0x78A1             LDRB     R1,[R4, #+2]
   \   0000005C   0x1840             ADDS     R0,R0,R1
   \   0000005E   0x70A0             STRB     R0,[R4, #+2]
    505                       if (--View_RxRemainLen == 0) {
   \   00000060   0x7860             LDRB     R0,[R4, #+1]
   \   00000062   0x1E40             SUBS     R0,R0,#+1
   \   00000064   0x7060             STRB     R0,[R4, #+1]
   \   00000066   0xB2C0             UXTB     R0,R0
   \   00000068   0xB9B8             CBNZ.N   R0,??View_RxHandler_3
    506                           View_RxState = VIEW_RX_STATE_CHKSUM;
   \   0000006A   0x2004             MOVS     R0,#+4
   \   0000006C   0xE014             B.N      ??View_RxHandler_5
    507                       }
    508                       break;
    509          
    510                  case VIEW_RX_STATE_CHKSUM:                       /* waiting for checksum                            */
    511                       View_RxChkSum += rx_data;
   \                     ??View_RxHandler_9: (+1)
   \   0000006E   0x78A1             LDRB     R1,[R4, #+2]
   \   00000070   0x1840             ADDS     R0,R0,R1
   \   00000072   0x70A0             STRB     R0,[R4, #+2]
    512                       if ((View_RxChkSum & 0xFF) == 0x00) {
   \   00000074   0xB2C0             UXTB     R0,R0
   \   00000076   0xB970             CBNZ.N   R0,??View_RxHandler_1
    513                           View_RxState = VIEW_RX_STATE_ED;
   \   00000078   0x2005             MOVS     R0,#+5
   \   0000007A   0xE00D             B.N      ??View_RxHandler_5
    514                       } else {
    515                           View_RxState = VIEW_RX_STATE_SD0;
    516                       }
    517                       break;
    518          
    519                  case VIEW_RX_STATE_ED:
    520                       if (rx_data == VIEW_PROTOCOL_RX_ED) {       /* End delimiter ?                                 */
   \                     ??View_RxHandler_10: (+1)
   \   0000007C   0x288D             CMP      R0,#+141
   \   0000007E   0xD10A             BNE.N    ??View_RxHandler_1
    521                           View_RxPktCtr++;
   \   00000080   0x8D20             LDRH     R0,[R4, #+40]
   \   00000082   0x1C40             ADDS     R0,R0,#+1
   \   00000084   0x8520             STRH     R0,[R4, #+40]
    522                           View_TxBufClr();
   \   00000086   0x2000             MOVS     R0,#+0
   \   00000088   0x85E0             STRH     R0,[R4, #+46]
   \   0000008A   0x8660             STRH     R0,[R4, #+50]
   \   0000008C   0x63E0             STR      R0,[R4, #+60]
    523                           View_TxDefClr();
   \   0000008E   0x.... 0x....      BL       View_TxDefClr
    524                           View_RxPkt();                            /* Parse received packet                           */
   \   00000092   0x.... 0x....      BL       View_RxPkt
    525                       }
    526                       View_RxState = VIEW_RX_STATE_SD0;
    527                       break;
    528          
    529                  default:
    530                       View_RxState = VIEW_RX_STATE_SD0;
   \                     ??View_RxHandler_1: (+1)
   \   00000096   0x2000             MOVS     R0,#+0
   \                     ??View_RxHandler_5: (+1)
   \   00000098   0x7020             STRB     R0,[R4, #+0]
    531                       break;
    532              }
    533          }
   \                     ??View_RxHandler_3: (+1)
   \   0000009A   0xBD10             POP      {R4,PC}          ;; return
    534          
    535          /*$PAGE*/
    536          /*
    537          *********************************************************************************************************
    538          *                                        PARSE RECEIVED PACKET
    539          *
    540          * Description: This function is called when a packet has been received and needs to be processed.
    541          *********************************************************************************************************
    542          */
    543          

   \                                 In section .text, align 2, keep-with-next
    544          void  View_RxPkt (void)
    545          {
   \                     View_RxPkt: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    546              INT16U   len;
    547          
    548          
    549              len = View_CmdParsePkt();                    /* We have a whole packet, parse it!                */
   \   00000002   0x.... 0x....      BL       View_CmdParsePkt
    550              if (len > 0) {
   \   00000006   0xB130             CBZ.N    R0,??View_RxPkt_0
    551                  View_TxLen = len + 3;
   \   00000008   0x....             LDR.N    R1,??DataTable11_1
   \   0000000A   0x1CC2             ADDS     R2,R0,#+3
    552                  View_TxLenEnd = len;
   \   0000000C   0x8688             STRH     R0,[R1, #+52]
   \   0000000E   0x854A             STRH     R2,[R1, #+42]
    553                  View_TxStart();
   \   00000010   0xE8BD 0x4001      POP      {R0,LR}
   \   00000014   0x....             B.N      View_TxStart
    554              }
    555          }
   \                     ??View_RxPkt_0: (+1)
   \   00000016   0xBD01             POP      {R0,PC}          ;; return
    556          
    557          /*$PAGE*/
    558          /*
    559          *********************************************************************************************************
    560          *                                        STORE DATA IN Rx BUFFER
    561          *
    562          * Description: This routine is called whenever a valid byte has been received.
    563          *********************************************************************************************************
    564          */
    565          
    566          static  void  View_RxStoINT8U (INT8U rx_data)
    567          {
    568              if (View_RxBufCnt < VIEW_RX_BUF_SIZE) {
    569                  View_RxBuf[View_RxBufCnt++] = rx_data;
    570              }
    571          }
    572          
    573          
    574          /*
    575          *********************************************************************************************************
    576          *                                           CLEAR Rx BUFFER
    577          *********************************************************************************************************
    578          */
    579          
    580          static  void  View_RxBufClr (void)
    581          {
    582              View_RxBufCnt = 0;
    583              View_RxRdIx   = 0;
    584          }
    585          
    586          /*
    587          *********************************************************************************************************
    588          *                                           CLEAR Tx BUFFER
    589          *********************************************************************************************************
    590          */
    591          
    592          static  void  View_TxBufClr (void)
    593          {
    594              View_TxBufCnt = 0;
    595              View_TxStrCnt = 0;
    596              View_TxCtr    = 0;
    597          }
    598          /*
    599          *********************************************************************************************************
    600          *                                     GET 8, 16 or 32-bit DATA
    601          *********************************************************************************************************
    602          */
    603          

   \                                 In section .text, align 2, keep-with-next
    604          static  INT8U  View_RxGetINT8U (void)
    605          {
    606              return (View_RxBuf[View_RxRdIx++]);
   \                     View_RxGetINT8U: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable11_1
   \   00000002   0x7901             LDRB     R1,[R0, #+4]
   \   00000004   0x1C4A             ADDS     R2,R1,#+1
   \   00000006   0x7102             STRB     R2,[R0, #+4]
   \   00000008   0x1808             ADDS     R0,R1,R0
   \   0000000A   0x7B00             LDRB     R0,[R0, #+12]
   \   0000000C   0x4770             BX       LR               ;; return
    607          }
    608          
    609          
    610          static  INT16U  View_RxGetINT16U (void)
    611          {
    612              INT16U  lowbyte;
    613              INT16U  highbyte;
    614          
    615          
    616              highbyte = View_RxGetINT8U();
    617              lowbyte  = View_RxGetINT8U();
    618              return ((highbyte << 8) | lowbyte);
    619          }
    620          
    621          
    622          static  INT32U  View_RxGetINT32U (void)
    623          {
    624              INT32U  highword;
    625              INT32U  lowword;
    626          
    627          
    628              highword = View_RxGetINT16U();
    629              lowword  = View_RxGetINT16U();
    630              return ((highword << 16) | lowword);
    631          }
    632          
    633          /*$PAGE*/
    634          /*
    635          *********************************************************************************************************
    636          *                                 SEND AN ASCII STRING TO TERMINAL WINDOW
    637          *
    638          * Description: This function allows an application to send strings to the TERMINAL window in the viewer.
    639          *
    640          * Arguments  : s     is a pointer to the string to send.
    641          *
    642          *              dly   allows the calling task to delay itself for 'dly' ticks until the current string
    643          *                    is sent.  If 'dly' is set to 0, then the string will not be sent if a string is
    644          *                    currently in the process of being sent.  In other words, if there is a string currently
    645          *                    being sent and you sent 'dly' to 0, View_TxStr() will return to the caller and the
    646          *                    string will not be sent.
    647          *
    648          * Note(s)    : 1) This function MUST be called from a TASK and NOT an ISR.
    649          *********************************************************************************************************
    650          */
    651          

   \                                 In section .text, align 2, keep-with-next
    652          void  View_TxStr (INT8U *s, INT16U dly)
    653          {
   \                     View_TxStr: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    654              INT16U  len;
    655          
    656          
    657              len = (INT16U)OS_StrLen(s);                           /* Make sure string fits in buffer           */
   \   00000006   0x.... 0x....      BL       OS_StrLen
   \   0000000A   0x4606             MOV      R6,R0
    658              if (len >= VIEW_TX_STR_SIZE) {                        /* Force end of string if string too long    */
   \   0000000C   0x2E80             CMP      R6,#+128
   \   0000000E   0xDB03             BLT.N    ??View_TxStr_0
    659                  len    = VIEW_TX_STR_SIZE - 1;
    660                  s[len] = '\0';
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x267F             MOVS     R6,#+127
   \   00000014   0xF884 0x007F      STRB     R0,[R4, #+127]
    661              }
    662              if (View_TxStrLen > 0) {                              /* Are currently busy sending a string?      */
   \                     ??View_TxStr_0: (+1)
   \   00000018   0x....             LDR.N    R7,??DataTable11_4
   \   0000001A   0x8838             LDRH     R0,[R7, #+0]
   \   0000001C   0xB148             CBZ.N    R0,??View_TxStr_1
    663                  if (dly > 0) {                                    /* Yes, does caller want to wait?            */
   \   0000001E   0xB1A5             CBZ.N    R5,??View_TxStr_2
    664                      while (View_TxStrLen > 0) {                   /* Yes, let other tasks run                  */
    665                          View_TxStrDlyCtr++;
   \                     ??View_TxStr_3: (+1)
   \   00000020   0x8878             LDRH     R0,[R7, #+2]
   \   00000022   0x1C40             ADDS     R0,R0,#+1
   \   00000024   0x8078             STRH     R0,[R7, #+2]
    666                          OSTimeDly(dly);
   \   00000026   0x4628             MOV      R0,R5
   \   00000028   0x.... 0x....      BL       OSTimeDly
    667                      }
   \   0000002C   0x8838             LDRH     R0,[R7, #+0]
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD1F6             BNE.N    ??View_TxStr_3
    668                      View_TxStrLen = len;                          /* Update the string length                  */
    669                      strcpy((char *)&View_TxStrBuf[0], (char *)s); /* Copy string to send to buffer             */
    670                      if (View_TxStrLen > 0) {
    671                          View_TxStart();
    672                      }
    673                  }
    674              } else {
    675                  View_TxStrLen = len;                             /* Update the string length                  */
   \                     ??View_TxStr_1: (+1)
   \   00000032   0x803E             STRH     R6,[R7, #+0]
    676                  strcpy((char *)&View_TxStrBuf[0], (char *)s);    /* Copy string to send to buffer             */
   \   00000034   0x4621             MOV      R1,R4
   \   00000036   0x....             LDR.N    R0,??DataTable11_5
   \   00000038   0x.... 0x....      BL       strcpy
    677                  if (View_TxStrLen > 0) {
   \   0000003C   0x8838             LDRH     R0,[R7, #+0]
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xBF1C             ITT      NE 
    678                      View_TxStart();
   \   00000042   0xE8BD 0x40F1      POPNE    {R0,R4-R7,LR}
   \   00000046   0x.... 0x....      BNE.W    View_TxStart
    679                  }
    680              }
    681          }
   \                     ??View_TxStr_2: (+1)
   \   0000004A   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    682          
    683          /*$PAGE*/
    684          /*
    685          *********************************************************************************************************
    686          *                                  START TRANSMISSION OF REPLY PACKET
    687          *********************************************************************************************************
    688          */
    689          

   \                                 In section .text, align 2, keep-with-next
    690          static  void  View_TxStart (void)
    691          {
   \                     View_TxStart: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    692          #if OS_CRITICAL_METHOD == 3
    693              OS_CPU_SR  cpu_sr = 0;
    694          #endif
    695          
    696          
    697              OS_ENTER_CRITICAL();
   \   00000002   0x.... 0x....      BL       OS_CPU_SR_Save
    698              if (View_TxActiveFlag == OS_FALSE) {
   \   00000006   0x....             LDR.N    R5,??DataTable11_1
   \   00000008   0x4604             MOV      R4,R0
   \   0000000A   0x79E8             LDRB     R0,[R5, #+7]
   \   0000000C   0xB978             CBNZ.N   R0,??View_TxStart_0
    699                do{
    700                  View_TxHandler_USB();
   \                     ??View_TxStart_1: (+1)
   \   0000000E   0x.... 0x....      BL       View_TxHandler_USB
    701                  View_TxLen--;
   \   00000012   0x8D68             LDRH     R0,[R5, #+42]
   \   00000014   0x1E40             SUBS     R0,R0,#+1
   \   00000016   0x8568             STRH     R0,[R5, #+42]
    702                }while(View_TxLen > 0);
   \   00000018   0xB280             UXTH     R0,R0
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD1F7             BNE.N    ??View_TxStart_1
    703                
    704                View_Tx_USB ();
   \   0000001E   0x....             LDR.N    R5,??DataTable11_5
   \   00000020   0x4628             MOV      R0,R5
   \   00000022   0x.... 0x....      BL       strlen
   \   00000026   0xB2C1             UXTB     R1,R0
   \   00000028   0x4628             MOV      R0,R5
   \   0000002A   0x.... 0x....      BL       usb_SendBuf
    705                
    706              }
    707              OS_EXIT_CRITICAL();
   \                     ??View_TxStart_0: (+1)
   \   0000002E   0x4620             MOV      R0,R4
   \   00000030   0xE8BD 0x4032      POP      {R1,R4,R5,LR}
   \   00000034   0x.... 0x....      B.W      OS_CPU_SR_Restore
    708          }
    709          
    710          /*
    711          *********************************************************************************************************
    712          *                                      Communication for uC/OS-View
    713          *
    714          * Description: Send 1 character to COM Port
    715          *********************************************************************************************************
    716          */
    717          

   \                                 In section .text, align 2, keep-with-next
    718          void  View_Tx1 (INT8U c)
    719          {
    720              usb_SendBuf((INT8U *)c, 1);
   \                     View_Tx1: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0x.... 0x....      B.W      usb_SendBuf
    721          }
    722          
    723          /*
    724          *********************************************************************************************************
    725          *                                      Communication for uC/OS-View
    726          *
    727          * Description: Send String to USB Port
    728          *********************************************************************************************************
    729          */
    730          
    731          static void  View_Tx_USB (void)
    732          {
    733             usb_SendBuf((unsigned char*)View_TxStrBuf,strlen((char const*)View_TxStrBuf));
    734          }
    735          
    736          /*
    737          *********************************************************************************************************
    738          *                                      Communication for uC/OS-View
    739          *
    740          * Description: Send String to USB Port
    741          *********************************************************************************************************
    742          */

   \                                 In section .text, align 2, keep-with-next
    743          static void  View_TxDefClr (void)
    744          {
    745            INT8U i;
    746            
    747             View_TxState      = VIEW_TX_STATE_SD0;
   \                     View_TxDefClr: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable11_1
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x7181             STRB     R1,[R0, #+6]
    748             View_TxActiveFlag = OS_FALSE;
   \   00000006   0x71C1             STRB     R1,[R0, #+7]
    749             for(i=0; i < VIEW_TX_BUF_SIZE; i++){
    750                View_TxBuf[i] = 0x00;
   \   00000008   0x2180             MOVS     R1,#+128
   \   0000000A   0x....             LDR.N    R0,??DataTable11_6
   \   0000000C   0x.... 0x....      B.W      __aeabi_memclr4
    751             }
    752          }
    753          
    754          
    755          /*
    756          *********************************************************************************************************
    757          *                                               Tx Handler
    758          *
    759          * Description: This routine is called from the transmitter buffer empty interrupt service handler.
    760          *              It will send out the next byte in the buffer.
    761          *
    762          * Returns:     none
    763          *********************************************************************************************************
    764          */
    765          

   \                                 In section .text, align 4, keep-with-next
    766          void  View_TxHandler_USB (void)
    767          {
   \                     View_TxHandler_USB: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    768              INT8U  tx_data;
    769                
    770              tx_data = 0;
    771              
    772              switch (View_TxState) {
   \   00000002   0x....             LDR.N    R4,??DataTable11_1
   \   00000004   0x79A0             LDRB     R0,[R4, #+6]
   \   00000006   0x2805             CMP      R0,#+5
   \   00000008   0xD862             BHI.N    ??View_TxHandler_USB_1
   \   0000000A   0xE8DF 0xF000      TBB      [PC, R0]
   \                     ??View_TxHandler_USB_0:
   \   0000000E   0x03 0x15          DC8      0x3,0x15,0x1F,0x2B
   \              0x1F 0x2B    
   \   00000012   0x43 0x4E          DC8      0x43,0x4E
    773                  case VIEW_TX_STATE_SD0:
    774                       if (View_TxLen > 0) {                         /* Packet in buffer or string waiting to be send ? */
   \                     ??View_TxHandler_USB_2: (+1)
   \   00000014   0x8D60             LDRH     R0,[R4, #+42]
   \   00000016   0xB168             CBZ.N    R0,??View_TxHandler_USB_3
    775                           View_TxStoUSB(VIEW_PROTOCOL_TX_SD0);
   \   00000018   0x6BE0             LDR      R0,[R4, #+60]
   \   0000001A   0x2880             CMP      R0,#+128
   \   0000001C   0xD202             BCS.N    ??View_TxHandler_USB_4
   \   0000001E   0x....             LDR.N    R2,??DataTable11_5
   \   00000020   0x218C             MOVS     R1,#+140
   \   00000022   0x5481             STRB     R1,[R0, R2]
    776                           View_TxCtr++;
   \                     ??View_TxHandler_USB_4: (+1)
   \   00000024   0x1C40             ADDS     R0,R0,#+1
   \   00000026   0x63E0             STR      R0,[R4, #+60]
    777                           View_TxActiveFlag = OS_TRUE;
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0x71E0             STRB     R0,[R4, #+7]
    778                           View_TxState      = VIEW_TX_STATE_SD1;
   \   0000002C   0x71A0             STRB     R0,[R4, #+6]
    779                           View_TxIx         = 0;
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x85A0             STRH     R0,[R4, #+44]
    780                       } else {                                       /* If there is nothing to do end transmission      */
    781                           View_TxActiveFlag = OS_FALSE;
    782                           break;
    783                       }
    784                       break;
   \   00000032   0xBD10             POP      {R4,PC}
   \                     ??View_TxHandler_USB_3: (+1)
   \   00000034   0x71E0             STRB     R0,[R4, #+7]
   \   00000036   0xBD10             POP      {R4,PC}
    785          
    786                  case VIEW_TX_STATE_SD1:
    787                       View_TxStoUSB(VIEW_PROTOCOL_TX_SD1);
   \                     ??View_TxHandler_USB_5: (+1)
   \   00000038   0x6BE0             LDR      R0,[R4, #+60]
   \   0000003A   0x2880             CMP      R0,#+128
   \   0000003C   0xD202             BCS.N    ??View_TxHandler_USB_6
   \   0000003E   0x....             LDR.N    R2,??DataTable11_5
   \   00000040   0x21ED             MOVS     R1,#+237
   \   00000042   0x5481             STRB     R1,[R0, R2]
    788                       View_TxCtr++;
   \                     ??View_TxHandler_USB_6: (+1)
   \   00000044   0x1C40             ADDS     R0,R0,#+1
   \   00000046   0x63E0             STR      R0,[R4, #+60]
    789                       View_TxState = VIEW_TX_STATE_DATA_LEN;
   \   00000048   0x2002             MOVS     R0,#+2
   \   0000004A   0xE02C             B.N      ??View_TxHandler_USB_7
    790                       break;
    791          
    792                  case VIEW_TX_STATE_DATA_LEN:                       /* Include the packet length in the packet         */
    793                       View_TxStoUSB(View_TxLen);
   \                     ??View_TxHandler_USB_8: (+1)
   \   0000004C   0x6BE0             LDR      R0,[R4, #+60]
   \   0000004E   0x8D61             LDRH     R1,[R4, #+42]
   \   00000050   0x2880             CMP      R0,#+128
   \   00000052   0xBF3C             ITT      CC 
   \   00000054   0x....             LDRCC.N  R2,??DataTable11_5
   \   00000056   0x5481             STRBCC   R1,[R0, R2]
    794                       View_TxCtr++;
   \   00000058   0x1C40             ADDS     R0,R0,#+1
   \   0000005A   0x63E0             STR      R0,[R4, #+60]
    795                       View_TxState  = VIEW_TX_STATE_DATA;
    796                       View_TxChkSum = View_TxLen;
   \   0000005C   0x7161             STRB     R1,[R4, #+5]
   \   0000005E   0x2003             MOVS     R0,#+3
   \   00000060   0x71A0             STRB     R0,[R4, #+6]
    797                       break;
   \   00000062   0xBD10             POP      {R4,PC}
    798          
    799                  case VIEW_TX_STATE_DATA:
    800                       tx_data = View_TxBuf[View_TxIx];           
   \                     ??View_TxHandler_USB_9: (+1)
   \   00000064   0x8DA1             LDRH     R1,[R4, #+44]
   \   00000066   0x....             LDR.N    R0,??DataTable11_6
   \   00000068   0x5C0A             LDRB     R2,[R1, R0]
    801                       View_TxStoUSB(tx_data);
   \   0000006A   0x6BE0             LDR      R0,[R4, #+60]
   \   0000006C   0x2880             CMP      R0,#+128
   \   0000006E   0xBF3C             ITT      CC 
   \   00000070   0x....             LDRCC.N  R3,??DataTable11_5
   \   00000072   0x54C2             STRBCC   R2,[R0, R3]
    802                       View_TxCtr++;
   \   00000074   0x1C40             ADDS     R0,R0,#+1
   \   00000076   0x63E0             STR      R0,[R4, #+60]
    803                       View_TxChkSum += tx_data;
   \   00000078   0x7960             LDRB     R0,[R4, #+5]
   \   0000007A   0x1810             ADDS     R0,R2,R0
   \   0000007C   0x7160             STRB     R0,[R4, #+5]
    804                       View_TxIx++;
   \   0000007E   0x1C48             ADDS     R0,R1,#+1
   \   00000080   0x85A0             STRH     R0,[R4, #+44]
    805                       if (View_TxIx >= View_TxLenEnd) {               /* See if we are done sending the packet           */
   \   00000082   0xB280             UXTH     R0,R0
   \   00000084   0x8EA1             LDRH     R1,[R4, #+52]
   \   00000086   0x4288             CMP      R0,R1
   \   00000088   0xD325             BCC.N    ??View_TxHandler_USB_10
    806                           View_TxState  = VIEW_TX_STATE_CHKSUM;
   \   0000008A   0x2004             MOVS     R0,#+4
   \   0000008C   0x71A0             STRB     R0,[R4, #+6]
    807                           View_TxLen    = 3;
   \   0000008E   0x2003             MOVS     R0,#+3
   \   00000090   0x8560             STRH     R0,[R4, #+42]
   \   00000092   0xBD10             POP      {R4,PC}
    808                       }
    809                       break;
    810          
    811                  case VIEW_TX_STATE_CHKSUM:                         /* Epilog ... checksum & end delimiter             */
    812                       View_TxStoUSB(View_TxChkSum);
   \                     ??View_TxHandler_USB_11: (+1)
   \   00000094   0x6BE0             LDR      R0,[R4, #+60]
   \   00000096   0x2880             CMP      R0,#+128
   \   00000098   0xD202             BCS.N    ??View_TxHandler_USB_12
   \   0000009A   0x7961             LDRB     R1,[R4, #+5]
   \   0000009C   0x....             LDR.N    R2,??DataTable11_5
   \   0000009E   0x5481             STRB     R1,[R0, R2]
    813                       View_TxCtr++;
   \                     ??View_TxHandler_USB_12: (+1)
   \   000000A0   0x1C40             ADDS     R0,R0,#+1
   \   000000A2   0x63E0             STR      R0,[R4, #+60]
    814                       View_TxState = VIEW_TX_STATE_ED;
   \   000000A4   0x2005             MOVS     R0,#+5
   \                     ??View_TxHandler_USB_7: (+1)
   \   000000A6   0x71A0             STRB     R0,[R4, #+6]
    815                       break;
   \   000000A8   0xBD10             POP      {R4,PC}
    816          
    817                  case VIEW_TX_STATE_ED:
    818                       View_TxStoUSB(VIEW_PROTOCOL_TX_ED);
   \                     ??View_TxHandler_USB_13: (+1)
   \   000000AA   0x6BE0             LDR      R0,[R4, #+60]
   \   000000AC   0x2880             CMP      R0,#+128
   \   000000AE   0xD202             BCS.N    ??View_TxHandler_USB_14
   \   000000B0   0x....             LDR.N    R2,??DataTable11_5
   \   000000B2   0x218D             MOVS     R1,#+141
   \   000000B4   0x5481             STRB     R1,[R0, R2]
    819                       View_TxCtr++;
   \                     ??View_TxHandler_USB_14: (+1)
   \   000000B6   0x1C40             ADDS     R0,R0,#+1
    820                       View_TxStoUSB(0x00);
   \   000000B8   0x2880             CMP      R0,#+128
   \   000000BA   0x63E0             STR      R0,[R4, #+60]
   \   000000BC   0xD202             BCS.N    ??View_TxHandler_USB_15
   \   000000BE   0x....             LDR.N    R2,??DataTable11_5
   \   000000C0   0x2100             MOVS     R1,#+0
   \   000000C2   0x5481             STRB     R1,[R0, R2]
    821                       View_TxDefClr ();
   \                     ??View_TxHandler_USB_15: (+1)
   \   000000C4   0x.... 0x....      BL       View_TxDefClr
    822                       View_TxPktCtr++;
   \   000000C8   0x8E20             LDRH     R0,[R4, #+48]
   \   000000CA   0x1C40             ADDS     R0,R0,#+1
   \   000000CC   0x8620             STRH     R0,[R4, #+48]
    823                       break;
   \   000000CE   0xBD10             POP      {R4,PC}
    824          
    825                  default:
    826                       View_TxDefClr ();
   \                     ??View_TxHandler_USB_1: (+1)
   \   000000D0   0xE8BD 0x4010      POP      {R4,LR}
   \   000000D4   0x....             B.N      View_TxDefClr
    827                       break;
    828              }
    829          }
   \                     ??View_TxHandler_USB_10: (+1)
   \   000000D6   0xBD10             POP      {R4,PC}          ;; return
    830          
    831          /*$PAGE*/
    832          /*
    833          *********************************************************************************************************
    834          *                                     STORE 8, 16 or 32-bit DATA
    835          *********************************************************************************************************
    836          */
    837          static  void  View_TxStoUSB (INT8U tx_data)
    838          {
    839              if (View_TxCtr < VIEW_TX_BUF_SIZE) {
    840                  View_TxStrBuf[View_TxCtr] = tx_data;
    841              }
    842          }
    843          

   \                                 In section .text, align 2, keep-with-next
    844          void  View_TxStoINT8U (INT8U tx_data)
    845          {
    846              if (View_TxBufCnt < VIEW_TX_BUF_SIZE) {
   \                     View_TxStoINT8U: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable11_1
   \   00000002   0x8DCA             LDRH     R2,[R1, #+46]
   \   00000004   0x2A80             CMP      R2,#+128
   \   00000006   0x4613             MOV      R3,R2
   \   00000008   0xDA0E             BGE.N    ??View_TxStoINT8U_0
    847                if(tx_data != 0x00){
   \   0000000A   0x1C5B             ADDS     R3,R3,#+1
   \   0000000C   0x.... 0x....      LDR.W    R12,??DataTable11_6
   \   00000010   0xB110             CBZ.N    R0,??View_TxStoINT8U_1
    848                  View_TxBuf[View_TxBufCnt++] = tx_data;
   \   00000012   0xF802 0x000C      STRB     R0,[R2, R12]
   \   00000016   0xE007             B.N      ??View_TxStoINT8U_0
    849                }else{
    850                  View_TxBuf[View_TxBufCnt++] = (INT8U)'!';
   \                     ??View_TxStoINT8U_1: (+1)
   \   00000018   0x2021             MOVS     R0,#+33
   \   0000001A   0xF802 0x000C      STRB     R0,[R2, R12]
    851                  View_TxBuf[View_TxBufCnt++] = (INT8U)'0';
   \   0000001E   0xB29B             UXTH     R3,R3
   \   00000020   0x2030             MOVS     R0,#+48
   \   00000022   0xF803 0x000C      STRB     R0,[R3, R12]
   \   00000026   0x1C5B             ADDS     R3,R3,#+1
   \                     ??View_TxStoINT8U_0: (+1)
   \   00000028   0x85CB             STRH     R3,[R1, #+46]
    852                }
    853              }
    854          }
   \   0000002A   0x4770             BX       LR               ;; return
    855          

   \                                 In section .text, align 2, keep-with-next
    856          static  void  View_TxStoINT16U (INT16U tx_data)
    857          {
   \                     View_TxStoINT16U: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    858              View_TxStoINT8U(tx_data >> 8);
   \   00000004   0x0A00             LSRS     R0,R0,#+8
   \   00000006   0x.... 0x....      BL       View_TxStoINT8U
    859              View_TxStoINT8U(tx_data & 0x00FF);
   \   0000000A   0xB2E0             UXTB     R0,R4
   \   0000000C   0xE8BD 0x4010      POP      {R4,LR}
   \   00000010   0x....             B.N      View_TxStoINT8U
    860          }
    861          
    862          

   \                                 In section .text, align 2, keep-with-next
    863          static  void  View_TxStoINT32U (INT32U tx_data)
    864          {
   \                     View_TxStoINT32U: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    865              View_TxStoINT16U(tx_data >> 16);
   \   00000004   0x0C20             LSRS     R0,R4,#+16
   \   00000006   0x.... 0x....      BL       View_TxStoINT16U
    866              View_TxStoINT16U(tx_data & 0x0000FFFFL);
   \   0000000A   0xB2A0             UXTH     R0,R4
   \   0000000C   0xE8BD 0x4010      POP      {R4,LR}
   \   00000010   0x....             B.N      View_TxStoINT16U
    867          }
    868          
    869          
    870          static  void  View_TxStoPtr (void *ptr)
    871          {
    872              INT32U  tx_data;
    873          
    874          
    875              tx_data = (INT32U)ptr;
    876              View_TxStoINT16U(tx_data >> 16);
    877              View_TxStoINT16U(tx_data & 0x0000FFFFL);
    878          }
    879          
    880          

   \                                 In section .text, align 2, keep-with-next
    881          void  View_TxStoStr (INT8U *s)
    882          {
   \                     View_TxStoStr: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    883              INT8U   len;
    884              INT8U   i;
    885              INT8U  *ps;
    886          
    887          
    888              len = 0;
   \   00000004   0x2500             MOVS     R5,#+0
    889              ps  = s;
   \   00000006   0x0020             MOVS     R0,R4
    890              if (ps != (INT8U *)0) {                                 /* Calculate length of string                      */
   \   00000008   0xD005             BEQ.N    ??View_TxStoStr_0
   \   0000000A   0xE000             B.N      ??View_TxStoStr_1
    891                  while (*ps) {
    892                      ps++;
    893                      len++;
   \                     ??View_TxStoStr_2: (+1)
   \   0000000C   0x1C6D             ADDS     R5,R5,#+1
    894                  }
   \                     ??View_TxStoStr_1: (+1)
   \   0000000E   0xF810 0x1B01      LDRB     R1,[R0], #+1
   \   00000012   0x2900             CMP      R1,#+0
   \   00000014   0xD1FA             BNE.N    ??View_TxStoStr_2
    895              }
    896              View_TxStoINT8U(len);                                 /* Store string, length first                      */
   \                     ??View_TxStoStr_0: (+1)
   \   00000016   0xB2E8             UXTB     R0,R5
   \   00000018   0x.... 0x....      BL       View_TxStoINT8U
    897              ps = s;
    898              for (i = 0; i < len; i++) {
   \   0000001C   0xB2ED             UXTB     R5,R5
   \   0000001E   0xB12D             CBZ.N    R5,??View_TxStoStr_3
    899                  View_TxStoINT8U((INT8U)*ps);
   \                     ??View_TxStoStr_4: (+1)
   \   00000020   0xF814 0x0B01      LDRB     R0,[R4], #+1
   \   00000024   0x.... 0x....      BL       View_TxStoINT8U
    900                  ps++;
    901              }
   \   00000028   0x1E6D             SUBS     R5,R5,#+1
   \   0000002A   0xD1F9             BNE.N    ??View_TxStoStr_4
    902          }
   \                     ??View_TxStoStr_3: (+1)
   \   0000002C   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   0x........         DC32     OSTCBCur

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_1:
   \   00000000   0x........         DC32     View_RxState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_2:
   \   00000000   0x........         DC32     OSTCBPrioTbl

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_3:
   \   00000000   0x000F4240         DC32     0xf4240

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_4:
   \   00000000   0x........         DC32     View_TxStrLen

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_5:
   \   00000000   0x........         DC32     View_TxStrBuf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_6:
   \   00000000   0x........         DC32     View_TxBuf

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x49 0x4E          DC8 "INVALID TASK!"
   \              0x56 0x41    
   \              0x4C 0x49    
   \              0x44 0x20    
   \              0x54 0x41    
   \              0x53 0x4B    
   \              0x21 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x43 0x6F          DC8 "ControlHome 2.02 STM32 ( xx MHz )"
   \              0x6E 0x74    
   \              0x72 0x6F    
   \              0x6C 0x48    
   \              0x6F 0x6D    
   \              0x65 0x20    
   \              0x32 0x2E    
   \              0x30 0x32    
   \              0x20 0x53    
   \              0x54 0x4D    
   \              0x33 0x32    
   \              0x20 0x28    
   \              0x20 0x78    
   \              0x78 0x20    
   \              0x4D 0x48    
   \              0x7A 0x20    
   \              0x29 0x00    
   \   00000022   0x00 0x00          DC8 0, 0
    903          
    904          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   View_CmdGetTaskInfo_InvalidTask
         0   -> View_TxStoINT8U
         8   -> View_TxStoINT8U
         8   -> View_TxStoStr
      56   View_CmdParsePkt
        56   -> OSTimeGet
        56   -> Util_CmdParsePkt
        56   -> View_CmdGetTaskInfo_InvalidTask
        56   -> View_GetCPUName
        56   -> View_RxGetINT8U
        56   -> View_TxStoINT16U
        56   -> View_TxStoINT32U
        56   -> View_TxStoINT8U
        56   -> View_TxStoStr
        56   -> __aeabi_memclr4
      16   View_GetCPUName
        16   -> BSP_CPU_ClkFreq
        16   -> __aeabi_memcpy
       0   View_RxGetINT8U
       8   View_RxHandler
         8   -> View_RxPkt
         8   -> View_TxDefClr
       8   View_RxPkt
         8   -> View_CmdParsePkt
         0   -> View_TxStart
       0   View_Tx1
         0   -> usb_SendBuf
       0   View_TxDefClr
         0   -> __aeabi_memclr4
       8   View_TxHandler_USB
         0   -> View_TxDefClr
         8   -> View_TxDefClr
      16   View_TxStart
         0   -> OS_CPU_SR_Restore
        16   -> OS_CPU_SR_Save
        16   -> View_TxHandler_USB
        16   -> strlen
        16   -> usb_SendBuf
       8   View_TxStoINT16U
         0   -> View_TxStoINT8U
         8   -> View_TxStoINT8U
       8   View_TxStoINT32U
         0   -> View_TxStoINT16U
         8   -> View_TxStoINT16U
       0   View_TxStoINT8U
      16   View_TxStoStr
        16   -> View_TxStoINT8U
      24   View_TxStr
        24   -> OSTimeDly
        24   -> OS_StrLen
        24   -> View_TxStart
        24   -> strcpy


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable11_2
       4  ??DataTable11_3
       4  ??DataTable11_4
       4  ??DataTable11_5
       4  ??DataTable11_6
      16  ?_0
      36  ?_1
     156  View_CmdGetTaskInfo_InvalidTask
    1146  View_CmdParsePkt
      54  View_GetCPUName
      14  View_RxGetINT8U
     156  View_RxHandler
      24  View_RxPkt
      68  View_RxState
          View_RxRemainLen
          View_RxChkSum
          View_RxBufCnt
          View_RxRdIx
          View_TxChkSum
          View_TxState
          View_TxActiveFlag
          stat
          View_RxBuf
          View_RxPktCtr
          View_TxLen
          View_TxIx
          View_TxBufCnt
          View_TxPktCtr
          View_TxStrCnt
          View_TxLenEnd
          View_RxCtr
          View_TxCtr
          ptcb
       4  View_TerminalRxCallbackFnct
       6  View_Tx1
     128  View_TxBuf
       4  View_TxBufPtr
      16  View_TxDefClr
     216  View_TxHandler_USB
      56  View_TxStart
      18  View_TxStoINT16U
      18  View_TxStoINT32U
      44  View_TxStoINT8U
      46  View_TxStoStr
      76  View_TxStr
     128  View_TxStrBuf
       4  View_TxStrLen
          View_TxStrDlyCtr

 
   336 bytes in section .bss
 2 126 bytes in section .text
 
 2 126 bytes of CODE memory
   336 bytes of DATA memory

Errors: none
Warnings: none
