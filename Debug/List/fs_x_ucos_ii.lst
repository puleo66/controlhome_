###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       09/Feb/2018  16:14:55
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\HW Projects\ControlHome\CntrHome - RF69w\uC-FatFS\os\fs_x_ucos_ii.c
#    Command line =  
#        "E:\HW Projects\ControlHome\CntrHome -
#        RF69w\uC-FatFS\os\fs_x_ucos_ii.c" -lCN "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\Debug\List" -o "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\Debug\Obj" --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\APP\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\BSP\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\CPU\inc\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-CPU\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-RTC\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-LIB\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uCOS-II\Ports\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uCOS-II\Source\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\I2C-Out\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\Direct_Sw\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\Wdt_led\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-LCD\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-RF\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\api\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\config\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\os\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\fsl\fat\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\clib\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\lbl\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\device\mmc\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\file\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-Terminal\src\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-Terminal\inc\" -Oh
#    List file    =  
#        E:\HW Projects\ControlHome\CntrHome -
#        RF69w\Debug\List\fs_x_ucos_ii.lst
#    Object file  =  
#        E:\HW Projects\ControlHome\CntrHome - RF69w\Debug\Obj\fs_x_ucos_ii.o
#
###############################################################################

E:\HW Projects\ControlHome\CntrHome - RF69w\uC-FatFS\os\fs_x_ucos_ii.c
      1          /*
      2          *********************************************************************************************************
      3          *                                             Micrium, Inc.
      4          *                                         949 Crestview Circle
      5          *                                        Weston,  FL 33327-1848
      6          *
      7          *                                         OS Layer for uC/FS
      8          *
      9          *                                   (c) Copyright 2002, Micrium, Inc.
     10          *                                          All rights reserved.
     11          *
     12          * Filename    : fs_x_ucos_ii.C
     13          * Programmers : Jean J. Labrosse
     14          *********************************************************************************************************
     15          */
     16          
     17          /*
     18          *********************************************************************************************************
     19          *                                            INCLUDE FILES
     20          *********************************************************************************************************
     21          */
     22          
     23          #include  "fs_port.h"
     24          #include  "fs_dev.h"
     25          #include  "fs_api.h"
     26          #include  "fs_os.h"
     27          #include  "fs_conf.h"
     28          
     29          #if FS_OS_TIME_SUPPORT == 1
     30          #include  <time.h>
     31          #endif
     32          
     33          #include  "includes.h"
     34          
     35          /*
     36          *********************************************************************************************************
     37          *                                         LOCAL GLOBAL VARIABLES
     38          *********************************************************************************************************
     39          */
     40          

   \                                 In section .bss, align 4
     41          static  OS_EVENT  *FS_SemFileHandle;
   \                     FS_SemFileHandle:
   \   00000000                      DS8 4
   \   00000004                      DS8 4
   \   00000008                      DS8 4
   \   0000000C                      DS8 4
   \   00000010                      DS8 4
   \   00000014                      DS8 4
     42          static  OS_EVENT  *FS_SemFileOps;
     43          static  OS_EVENT  *FS_SemMemManager;
     44          static  OS_EVENT  *FS_SemDeviceOps;
     45          
     46          #if FS_POSIX_DIR_SUPPORT
     47          static OS_EVENT   *FS_SemDirHandle;
     48          static OS_EVENT   *FS_SemDirOps;
     49          #endif  /* FS_POSIX_DIR_SUPPORT */
     50          
     51          /*$PAGE*/
     52          /*
     53          *********************************************************************************************************
     54          *                              Lock global table _FS_filehandle (fs_info.c)
     55          *********************************************************************************************************
     56          */
     57          

   \                                 In section .text, align 2, keep-with-next
     58          void  FS_X_OS_LockFileHandle (void) 
     59          {
   \                     FS_X_OS_LockFileHandle: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     60              INT8U  err;
     61          
     62          
     63              OSSemPend(FS_SemFileHandle, 0, &err);
   \   00000002   0x....             LDR.N    R0,??DataTable12
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x....             B.N      ?Subroutine0
     64          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x466A             MOV      R2,SP
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x.... 0x....      BL       OSSemPend
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
     65          
     66          
     67          /*
     68          *********************************************************************************************************
     69          *                              Unlock global table _FS_filehandle (fs_info.c)
     70          *********************************************************************************************************
     71          */
     72          

   \                                 In section .text, align 2, keep-with-next
     73          void  FS_X_OS_UnlockFileHandle (void) 
     74          {
     75              OSSemPost(FS_SemFileHandle);
   \                     FS_X_OS_UnlockFileHandle: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable12
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x.... 0x....      B.W      OSSemPost
     76          }
     77          
     78          /*
     79          *********************************************************************************************************
     80          *                                          Lock File Operations
     81          *********************************************************************************************************
     82          */
     83          

   \                                 In section .text, align 2, keep-with-next
     84          void  FS_X_OS_LockFileOp (FS_FILE *fp) 
     85          {
   \                     FS_X_OS_LockFileOp: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     86              INT8U  err;
     87          
     88          
     89              OSSemPend(FS_SemFileOps, 0, &err);
   \   00000002   0x....             LDR.N    R0,??DataTable12
   \   00000004   0x6840             LDR      R0,[R0, #+4]
   \   00000006                      REQUIRE ?Subroutine0
   \   00000006                      ;; // Fall through to label ?Subroutine0
     90          }
     91          
     92          /*
     93          *********************************************************************************************************
     94          *                                         Unlock File Operations
     95          *********************************************************************************************************
     96          */
     97          

   \                                 In section .text, align 2, keep-with-next
     98          void  FS_X_OS_UnlockFileOp (FS_FILE *fp) 
     99          {
    100              OSSemPost(FS_SemFileOps);
   \                     FS_X_OS_UnlockFileOp: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable12
   \   00000002   0x6840             LDR      R0,[R0, #+4]
   \   00000004   0x.... 0x....      B.W      OSSemPost
    101          }
    102          
    103          /*$PAGE*/
    104          /*
    105          *********************************************************************************************************
    106          *                                        Lock the Memory Manager
    107          *********************************************************************************************************
    108          */
    109          

   \                                 In section .text, align 2, keep-with-next
    110          void  FS_X_OS_LockMem (void)
    111          {
   \                     FS_X_OS_LockMem: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    112              INT8U  err;
    113          
    114          
    115              OSSemPend(FS_SemMemManager, 0, &err);
   \   00000002   0x....             LDR.N    R0,??DataTable12
   \   00000004   0x6880             LDR      R0,[R0, #+8]
   \   00000006   0x....             B.N      ?Subroutine0
    116          }
    117          
    118          /*
    119          *********************************************************************************************************
    120          *                                       Unlock the Memory Manager
    121          *********************************************************************************************************
    122          */
    123          

   \                                 In section .text, align 2, keep-with-next
    124          void  FS_X_OS_UnlockMem (void) 
    125          {
    126              OSSemPost(FS_SemMemManager);
   \                     FS_X_OS_UnlockMem: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable12
   \   00000002   0x6880             LDR      R0,[R0, #+8]
   \   00000004   0x.... 0x....      B.W      OSSemPost
    127          }
    128          
    129          /*
    130          *********************************************************************************************************
    131          *                                        Lock Device Operations
    132          *********************************************************************************************************
    133          */
    134          

   \                                 In section .text, align 2, keep-with-next
    135          void  FS_X_OS_LockDeviceOp (const FS__device_type *driver, FS_u32 id) 
    136          {
   \                     FS_X_OS_LockDeviceOp: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    137              INT8U  err;
    138          
    139          
    140              OSSemPend(FS_SemDeviceOps, 0, &err);
   \   00000002   0x....             LDR.N    R0,??DataTable12
   \   00000004   0x68C0             LDR      R0,[R0, #+12]
   \   00000006   0x....             B.N      ?Subroutine0
    141          }
    142          
    143          /*
    144          *********************************************************************************************************
    145          *                                       Unlock Device Operations
    146          *********************************************************************************************************
    147          */
    148          

   \                                 In section .text, align 2, keep-with-next
    149          void  FS_X_OS_UnlockDeviceOp (const FS__device_type *driver, FS_u32 id) 
    150          {
    151              OSSemPost(FS_SemDeviceOps);
   \                     FS_X_OS_UnlockDeviceOp: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable12
   \   00000002   0x68C0             LDR      R0,[R0, #+12]
   \   00000004   0x.... 0x....      B.W      OSSemPost
    152          }
    153          
    154          
    155          #if FS_POSIX_DIR_SUPPORT
    156          
    157          /*
    158          *********************************************************************************************************
    159          *                              Lock global table _FS_dirhandle (api_dir.c).
    160          *********************************************************************************************************
    161          */
    162          

   \                                 In section .text, align 2, keep-with-next
    163          void FS_X_OS_LockDirHandle (void)
    164          {
   \                     FS_X_OS_LockDirHandle: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    165              INT8U  err;
    166          
    167          
    168              OSSemPend(FS_SemDirHandle, 0, &err);
   \   00000002   0x....             LDR.N    R0,??DataTable12
   \   00000004   0x6900             LDR      R0,[R0, #+16]
   \   00000006   0x....             B.N      ?Subroutine0
    169          }
    170          
    171          
    172          /*
    173          *********************************************************************************************************
    174          *                              Unlock global table _FS_dirhandle (api_dir.c).
    175          *********************************************************************************************************
    176          */
    177          

   \                                 In section .text, align 2, keep-with-next
    178          void FS_X_OS_UnlockDirHandle (void)
    179          {
    180              OSSemPost(FS_SemDirHandle);
   \                     FS_X_OS_UnlockDirHandle: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable12
   \   00000002   0x6900             LDR      R0,[R0, #+16]
   \   00000004   0x.... 0x....      B.W      OSSemPost
    181          }
    182          
    183          
    184          /*
    185          *********************************************************************************************************
    186          *                                          Lock Directory Operations
    187          *********************************************************************************************************
    188          */
    189          

   \                                 In section .text, align 2, keep-with-next
    190          void FS_X_OS_LockDirOp (FS_DIR *dirp)
    191          {
   \                     FS_X_OS_LockDirOp: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    192              INT8U  err;
    193          
    194          
    195              OSSemPend(FS_SemDirOps, 0, &err);
   \   00000002   0x....             LDR.N    R0,??DataTable12
   \   00000004   0x6940             LDR      R0,[R0, #+20]
   \   00000006   0x....             B.N      ?Subroutine0
    196          }
    197          
    198          
    199          /*
    200          *********************************************************************************************************
    201          *                                          Unlock Directory Operations
    202          *********************************************************************************************************
    203          */
    204          

   \                                 In section .text, align 2, keep-with-next
    205          void FS_X_OS_UnlockDirOp (FS_DIR *dirp) 
    206          {
    207              OSSemPost(FS_SemDirOps);
   \                     FS_X_OS_UnlockDirOp: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable12
   \   00000002   0x6940             LDR      R0,[R0, #+20]
   \   00000004   0x.... 0x....      B.W      OSSemPost
    208          }
    209          
    210          #endif  /* FS_POSIX_DIR_SUPPORT */
    211          
    212          
    213          
    214          /*$PAGE*/
    215          /*
    216          *********************************************************************************************************
    217          *                                              Get Date
    218          *********************************************************************************************************
    219          */
    220          

   \                                 In section .text, align 2, keep-with-next
    221          FS_u16  FS_X_OS_GetDate (void) 
    222          {
   \                     FS_X_OS_GetDate: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    223          #if FS_OS_TIME_SUPPORT == 1
    224              FS_u16      fdate;
    225              time_t      t;
    226              struct tm  *ltime;
    227          
    228          
    229              time(&t);
   \   00000002   0x4668             MOV      R0,SP
   \   00000004   0x.... 0x....      BL       __time32
    230              ltime  = localtime(&t);
   \   00000008   0x4668             MOV      R0,SP
   \   0000000A   0x.... 0x....      BL       __localtime32
    231              fdate  = ltime->tm_mday;
    232              fdate += ((FS_u16)(ltime->tm_mon  +  1) << 5);
    233              fdate += ((FS_u16)(ltime->tm_year - 80) << 9);
    234          #else
    235              FS_u16      fdate;
    236          
    237          
    238              fdate  = 1;
    239              fdate += ((FS_u16) 1 << 5);
    240              fdate += ((FS_u16) 0 << 9);
    241          #endif
    242              return (fdate);
   \   0000000E   0x6902             LDR      R2,[R0, #+16]
   \   00000010   0x68C1             LDR      R1,[R0, #+12]
   \   00000012   0x6940             LDR      R0,[R0, #+20]
   \   00000014   0x1C52             ADDS     R2,R2,#+1
   \   00000016   0xEB01 0x1142      ADD      R1,R1,R2, LSL #+5
   \   0000001A   0x3850             SUBS     R0,R0,#+80
   \   0000001C   0xB289             UXTH     R1,R1
   \   0000001E   0xB280             UXTH     R0,R0
   \   00000020   0xEB01 0x2040      ADD      R0,R1,R0, LSL #+9
   \   00000024   0xB280             UXTH     R0,R0
   \   00000026   0xBD02             POP      {R1,PC}          ;; return
    243          }
    244          
    245          /*
    246          *********************************************************************************************************
    247          *                                              Get Time
    248          *********************************************************************************************************
    249          */
    250          

   \                                 In section .text, align 2, keep-with-next
    251          FS_u16  FS_X_OS_GetTime (void) 
    252          {
   \                     FS_X_OS_GetTime: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    253          #if FS_OS_TIME_SUPPORT == 1
    254              FS_u16      ftime;
    255              time_t      t;
    256              struct tm  *ltime;
    257          
    258          
    259              time(&t);
   \   00000002   0x4668             MOV      R0,SP
   \   00000004   0x.... 0x....      BL       __time32
    260              ltime  = localtime(&t);
   \   00000008   0x4668             MOV      R0,SP
   \   0000000A   0x.... 0x....      BL       __localtime32
    261              ftime  = ltime->tm_sec / 2;
    262              ftime += ((FS_u16) ltime->tm_min  <<  5);
    263              ftime += ((FS_u16) ltime->tm_hour << 11);
    264          #else
    265              FS_u16 ftime;
    266          
    267          
    268              ftime  = 0;
    269          #endif
    270              return (ftime);
   \   0000000E   0x6801             LDR      R1,[R0, #+0]
   \   00000010   0x6842             LDR      R2,[R0, #+4]
   \   00000012   0xEB01 0x71D1      ADD      R1,R1,R1, LSR #+31
   \   00000016   0x0152             LSLS     R2,R2,#+5
   \   00000018   0xEB02 0x0161      ADD      R1,R2,R1, ASR #+1
   \   0000001C   0x6880             LDR      R0,[R0, #+8]
   \   0000001E   0xB289             UXTH     R1,R1
   \   00000020   0xEB01 0x20C0      ADD      R0,R1,R0, LSL #+11
   \   00000024   0xB280             UXTH     R0,R0
   \   00000026   0xBD02             POP      {R1,PC}          ;; return
    271          }
    272          
    273          /*$PAGE*/
    274          /*
    275          *********************************************************************************************************
    276          *                                         Initialize OS Resources
    277          *********************************************************************************************************
    278          */
    279          

   \                                 In section .text, align 2, keep-with-next
    280          int  FS_X_OS_Init (void) 
    281          {
   \                     FS_X_OS_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    282              FS_SemFileHandle = OSSemCreate(1);
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x....             LDR.N    R4,??DataTable12
   \   00000006   0x.... 0x....      BL       OSSemCreate
   \   0000000A   0x6020             STR      R0,[R4, #+0]
    283              FS_SemFileOps    = OSSemCreate(1);
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0x.... 0x....      BL       OSSemCreate
   \   00000012   0x6060             STR      R0,[R4, #+4]
    284              FS_SemMemManager = OSSemCreate(1);
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x.... 0x....      BL       OSSemCreate
   \   0000001A   0x60A0             STR      R0,[R4, #+8]
    285              FS_SemDeviceOps  = OSSemCreate(1);
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0x.... 0x....      BL       OSSemCreate
   \   00000022   0x60E0             STR      R0,[R4, #+12]
    286          #if FS_POSIX_DIR_SUPPORT    
    287              FS_SemDirHandle  = OSSemCreate(1);
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0x.... 0x....      BL       OSSemCreate
   \   0000002A   0x6120             STR      R0,[R4, #+16]
    288              FS_SemDirOps     = OSSemCreate(1);
   \   0000002C   0x2001             MOVS     R0,#+1
   \   0000002E   0x.... 0x....      BL       OSSemCreate
   \   00000032   0x6160             STR      R0,[R4, #+20]
    289          #endif  /* FS_POSIX_DIR_SUPPORT */    
    290              return (0);
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0xBD10             POP      {R4,PC}          ;; return
    291          }
    292          
    293          /*
    294          *********************************************************************************************************
    295          *                                         Reclaim OS Resources
    296          *********************************************************************************************************
    297          */
    298          

   \                                 In section .text, align 2, keep-with-next
    299          int  FS_X_OS_Exit (void) 
    300          {
   \                     FS_X_OS_Exit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    301              INT8U  err;
    302          
    303          
    304              OSSemDel(FS_SemFileHandle, OS_DEL_ALWAYS, &err);
   \   00000002   0x....             LDR.N    R4,??DataTable12
   \   00000004   0xB082             SUB      SP,SP,#+8
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x466A             MOV      R2,SP
   \   0000000A   0x2101             MOVS     R1,#+1
   \   0000000C   0x.... 0x....      BL       OSSemDel
    305              OSSemDel(FS_SemFileOps   , OS_DEL_ALWAYS, &err);
   \   00000010   0x6860             LDR      R0,[R4, #+4]
   \   00000012   0x466A             MOV      R2,SP
   \   00000014   0x2101             MOVS     R1,#+1
   \   00000016   0x.... 0x....      BL       OSSemDel
    306              OSSemDel(FS_SemMemManager, OS_DEL_ALWAYS, &err);
   \   0000001A   0x68A0             LDR      R0,[R4, #+8]
   \   0000001C   0x466A             MOV      R2,SP
   \   0000001E   0x2101             MOVS     R1,#+1
   \   00000020   0x.... 0x....      BL       OSSemDel
    307              OSSemDel(FS_SemDeviceOps , OS_DEL_ALWAYS, &err);
   \   00000024   0x68E0             LDR      R0,[R4, #+12]
   \   00000026   0x466A             MOV      R2,SP
   \   00000028   0x2101             MOVS     R1,#+1
   \   0000002A   0x.... 0x....      BL       OSSemDel
    308          #if FS_POSIX_DIR_SUPPORT    
    309              OSSemDel(FS_SemDirHandle , OS_DEL_ALWAYS, &err);
   \   0000002E   0x6920             LDR      R0,[R4, #+16]
   \   00000030   0x466A             MOV      R2,SP
   \   00000032   0x2101             MOVS     R1,#+1
   \   00000034   0x.... 0x....      BL       OSSemDel
    310              OSSemDel(FS_SemDirOps    , OS_DEL_ALWAYS, &err);
   \   00000038   0x6960             LDR      R0,[R4, #+20]
   \   0000003A   0x466A             MOV      R2,SP
   \   0000003C   0x2101             MOVS     R1,#+1
   \   0000003E   0x.... 0x....      BL       OSSemDel
    311          #endif  /* FS_POSIX_DIR_SUPPORT */
    312              return (0);
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    313          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0x........         DC32     FS_SemFileHandle
    314          
    315          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   FS_X_OS_Exit
        16   -> OSSemDel
       8   FS_X_OS_GetDate
         8   -> __localtime32
         8   -> __time32
       8   FS_X_OS_GetTime
         8   -> __localtime32
         8   -> __time32
       8   FS_X_OS_Init
         8   -> OSSemCreate
       8   FS_X_OS_LockDeviceOp
         8   -> OSSemPend
       8   FS_X_OS_LockDirHandle
         8   -> OSSemPend
       8   FS_X_OS_LockDirOp
         8   -> OSSemPend
       8   FS_X_OS_LockFileHandle
         8   -> OSSemPend
       8   FS_X_OS_LockFileOp
         8   -> OSSemPend
       8   FS_X_OS_LockMem
         8   -> OSSemPend
       0   FS_X_OS_UnlockDeviceOp
         0   -> OSSemPost
       0   FS_X_OS_UnlockDirHandle
         0   -> OSSemPost
       0   FS_X_OS_UnlockDirOp
         0   -> OSSemPost
       0   FS_X_OS_UnlockFileHandle
         0   -> OSSemPost
       0   FS_X_OS_UnlockFileOp
         0   -> OSSemPost
       0   FS_X_OS_UnlockMem
         0   -> OSSemPost


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable12
      10  ?Subroutine0
      24  FS_SemFileHandle
          FS_SemFileOps
          FS_SemMemManager
          FS_SemDeviceOps
          FS_SemDirHandle
          FS_SemDirOps
      70  FS_X_OS_Exit
      40  FS_X_OS_GetDate
      40  FS_X_OS_GetTime
      56  FS_X_OS_Init
       8  FS_X_OS_LockDeviceOp
       8  FS_X_OS_LockDirHandle
       8  FS_X_OS_LockDirOp
       8  FS_X_OS_LockFileHandle
       6  FS_X_OS_LockFileOp
       8  FS_X_OS_LockMem
       8  FS_X_OS_UnlockDeviceOp
       8  FS_X_OS_UnlockDirHandle
       8  FS_X_OS_UnlockDirOp
       8  FS_X_OS_UnlockFileHandle
       8  FS_X_OS_UnlockFileOp
       8  FS_X_OS_UnlockMem

 
  24 bytes in section .bss
 314 bytes in section .text
 
 314 bytes of CODE memory
  24 bytes of DATA memory

Errors: none
Warnings: none
