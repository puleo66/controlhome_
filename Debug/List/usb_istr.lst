###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       09/Feb/2018  16:15:15
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\HW Projects\ControlHome\CntrHome - RF69w\uc-terminal\src\usb_istr.c
#    Command line =  
#        "E:\HW Projects\ControlHome\CntrHome -
#        RF69w\uc-terminal\src\usb_istr.c" -lCN "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\Debug\List" -o "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\Debug\Obj" --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\APP\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\BSP\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\CPU\inc\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-CPU\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-RTC\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-LIB\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uCOS-II\Ports\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uCOS-II\Source\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\I2C-Out\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\Direct_Sw\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\Wdt_led\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-LCD\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-RF\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\api\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\config\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\os\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\fsl\fat\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\clib\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\lbl\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\device\mmc\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\file\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-Terminal\src\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-Terminal\inc\" -Oh
#    List file    =  
#        E:\HW Projects\ControlHome\CntrHome - RF69w\Debug\List\usb_istr.lst
#    Object file  =  
#        E:\HW Projects\ControlHome\CntrHome - RF69w\Debug\Obj\usb_istr.o
#
###############################################################################

E:\HW Projects\ControlHome\CntrHome - RF69w\uc-terminal\src\usb_istr.c
      1          /*
      2          *********************************************************************************************************
      3          *	                                  
      4          *	模块名称 : USB中断服务程序模块    
      5          *	文件名称 : usb_istr.c
      6          *	版    本 : V2.0
      7          *	USB固件库驱动 : V3.3.0
      8          *	说    明 : USB中断服务程序
      9          *	修改记录 :
     10          *		版本号  日期       作者    说明
     11          *		v0.1    2009-12-27 armfly  创建该文件，ST固件库版本为V3.1.2
     12          *		v1.0    2011-01-11 armfly  ST固件库升级到V3.4.0版本。
     13          *		v2.0    2011-10-16 armfly  ST固件库升级到V3.5.0版本。优化工程结构。
     14          *
     15          *	Copyright (C), 2010-2011, 安富莱电子 www.armfly.com
     16          *
     17          *********************************************************************************************************
     18          */
     19          
     20          #include "includes.h"
     21          #if USBD_MODULE == DEF_ENABLED
     22          

   \                                 In section .bss, align 2
     23           INT16U wIstr;  /* ISTR register last read value */
     24           INT8U bIntPackSOF = 0;  /* SOFs received between 2 consecutive packets */
   \                     bIntPackSOF:
   \   00000000                      DS8 1
   \   00000001                      DS8 1
   \                     wIstr:
   \   00000002                      DS8 2
     25          
     26          /* 函数指针数组，每个端点服务的执行函数列表 */

   \                                 In section .data, align 4
     27          void (*pEpInt_IN[7])(void) =
   \                     pEpInt_IN:
   \   00000000   0x........         DC32 EP1_IN_Callback, NOP_Process, NOP_Process, NOP_Process
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000010   0x........         DC32 NOP_Process, NOP_Process, NOP_Process
   \              0x........   
   \              0x........   
     28          {
     29          	EP1_IN_Callback,
     30          	EP2_IN_Callback,
     31          	EP3_IN_Callback,
     32          	EP4_IN_Callback,
     33          	EP5_IN_Callback,
     34          	EP6_IN_Callback,
     35          	EP7_IN_Callback,
     36          };
     37          

   \                                 In section .data, align 4
     38          void (*pEpInt_OUT[7])(void) =
   \                     pEpInt_OUT:
   \   00000000   0x........         DC32 NOP_Process, NOP_Process, EP3_OUT_Callback, NOP_Process
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000010   0x........         DC32 NOP_Process, NOP_Process, NOP_Process
   \              0x........   
   \              0x........   
     39          {
     40          	EP1_OUT_Callback,
     41          	EP2_OUT_Callback,
     42          	EP3_OUT_Callback,
     43          	EP4_OUT_Callback,
     44          	EP5_OUT_Callback,
     45          	EP6_OUT_Callback,
     46          	EP7_OUT_Callback,
     47          };
     48          
     49          /*
     50          *********************************************************************************************************
     51          *	函 数 名: usb_Istr
     52          *	功能说明: USB ISTR 中断服务程序
     53          *	形    参: 无
     54          *	返 回 值: 无
     55          *********************************************************************************************************
     56          */

   \                                 In section .text, align 4, keep-with-next
     57          void usb_Istr(void)
     58          {
   \                     usb_Istr: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
     59          	wIstr = _GetISTR();
   \   00000002   0x4D13             LDR.N    R5,??usb_Istr_0  ;; 0x40005c44
   \   00000004   0x4C13             LDR.N    R4,??usb_Istr_0+0x4
   \   00000006   0x6828             LDR      R0,[R5, #+0]
     60          
     61          #if (IMR_MSK & ISTR_CTR)
     62          	if (wIstr & ISTR_CTR & wInterrupt_Mask)
   \   00000008   0x4E13             LDR.N    R6,??usb_Istr_0+0x8
   \   0000000A   0x8060             STRH     R0,[R4, #+2]
   \   0000000C   0x8831             LDRH     R1,[R6, #+0]
   \   0000000E   0x8860             LDRH     R0,[R4, #+2]
   \   00000010   0x4008             ANDS     R0,R1,R0
   \   00000012   0x0400             LSLS     R0,R0,#+16
   \   00000014   0xBF48             IT       MI 
     63          	{
     64          		/* servicing of the endpoint correct transfer interrupt */
     65          		/* clear of the CTR flag into the sub */
     66          		CTR_LP();
   \   00000016   0x.... 0x....      BLMI     CTR_LP
     67          	#ifdef CTR_CALLBACK
     68          	    CTR_Callback();
     69          	#endif
     70            	}
     71          #endif  
     72          
     73          	/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
     74          #if (IMR_MSK & ISTR_RESET)
     75          	if (wIstr & ISTR_RESET & wInterrupt_Mask)
   \   0000001A   0x8860             LDRH     R0,[R4, #+2]
   \   0000001C   0x8831             LDRH     R1,[R6, #+0]
   \   0000001E   0x4008             ANDS     R0,R1,R0
   \   00000020   0x0540             LSLS     R0,R0,#+21
   \   00000022   0xD505             BPL.N    ??usb_Istr_1
     76          	{
     77          		_SetISTR((INT16U)CLR_RESET);
   \   00000024   0xF64F 0x30FF      MOVW     R0,#+64511
   \   00000028   0x6028             STR      R0,[R5, #+0]
     78          		Device_Property.Reset();
   \   0000002A   0x480C             LDR.N    R0,??usb_Istr_0+0xC
   \   0000002C   0x6840             LDR      R0,[R0, #+4]
   \   0000002E   0x4780             BLX      R0
     79          	#ifdef RESET_CALLBACK
     80          		RESET_Callback();
     81          	#endif
     82          	}
     83          #endif
     84          
     85          	/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
     86          #if (IMR_MSK & ISTR_DOVR)
     87          	if (wIstr & ISTR_DOVR & wInterrupt_Mask)
     88          	{
     89          		_SetISTR((INT16U)CLR_DOVR);
     90          	#ifdef DOVR_CALLBACK
     91          		DOVR_Callback();
     92          	#endif
     93          	}
     94          #endif
     95          
     96          	/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
     97          #if (IMR_MSK & ISTR_ERR)
     98          	if (wIstr & ISTR_ERR & wInterrupt_Mask)
     99          	{
    100          		_SetISTR((INT16U)CLR_ERR);
    101          	#ifdef ERR_CALLBACK
    102          		ERR_Callback();
    103          	#endif
    104          	}
    105          #endif
    106          
    107          	/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
    108          #if (IMR_MSK & ISTR_WKUP)
    109          	if (wIstr & ISTR_WKUP & wInterrupt_Mask)
    110          	{
    111          		_SetISTR((INT16U)CLR_WKUP);
    112          		Resume(RESUME_EXTERNAL);
    113          	#ifdef WKUP_CALLBACK
    114          		WKUP_Callback();
    115          	#endif
    116          	}
    117          #endif
    118            
    119          	/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
    120          #if (IMR_MSK & ISTR_SUSP)
    121          	if (wIstr & ISTR_SUSP & wInterrupt_Mask)
    122          	{
    123          		/* check if SUSPEND is possible */
    124          		if (fSuspendEnabled)
    125          		{
    126          			Suspend();
    127          		}
    128          		else
    129          		{
    130          			/* if not possible then resume after xx ms */
    131          			Resume(RESUME_LATER);
    132          		}
    133          		
    134          		/* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    135          		_SetISTR((INT16U)CLR_SUSP);
    136          	#ifdef SUSP_CALLBACK
    137          		SUSP_Callback();
    138          	#endif
    139          	}
    140          #endif
    141          
    142          	/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
    143          #if (IMR_MSK & ISTR_SOF)
    144          	if (wIstr & ISTR_SOF & wInterrupt_Mask)
   \                     ??usb_Istr_1: (+1)
   \   00000030   0x8860             LDRH     R0,[R4, #+2]
   \   00000032   0x8831             LDRH     R1,[R6, #+0]
   \   00000034   0x4008             ANDS     R0,R1,R0
   \   00000036   0x0580             LSLS     R0,R0,#+22
   \   00000038   0xD509             BPL.N    ??usb_Istr_2
    145          	{
    146          		_SetISTR((INT16U)CLR_SOF);
   \   0000003A   0xF64F 0x50FF      MOVW     R0,#+65023
   \   0000003E   0x6028             STR      R0,[R5, #+0]
    147          		bIntPackSOF++;
   \   00000040   0x7820             LDRB     R0,[R4, #+0]
   \   00000042   0x1C40             ADDS     R0,R0,#+1
   \   00000044   0x7020             STRB     R0,[R4, #+0]
    148          		
    149          	#ifdef SOF_CALLBACK
    150          		SOF_Callback();
   \   00000046   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   0000004A   0x.... 0x....      B.W      SOF_Callback
    151          	#endif
    152          	}
    153          #endif
    154          
    155          	/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
    156          #if (IMR_MSK & ISTR_ESOF)
    157          	if (wIstr & ISTR_ESOF & wInterrupt_Mask)
    158          	{
    159          		_SetISTR((INT16U)CLR_ESOF);
    160          		/* resume handling timing is made with ESOFs */
    161          		Resume(RESUME_ESOF); /* request without change of the machine state */
    162          	
    163          	#ifdef ESOF_CALLBACK
    164          		ESOF_Callback();
    165          	#endif
    166          	}
    167          #endif
    168          }
   \                     ??usb_Istr_2: (+1)
   \   0000004E   0xBD70             POP      {R4-R6,PC}       ;; return
   \                     ??usb_Istr_0:
   \   00000050   0x40005C44         DC32     0x40005c44
   \   00000054   0x........         DC32     bIntPackSOF
   \   00000058   0x........         DC32     wInterrupt_Mask
   \   0000005C   0x........         DC32     Device_Property
    169          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   usb_Istr
        16   -- Indirect call
        16   -> CTR_LP
         0   -> SOF_Callback


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  bIntPackSOF
          wIstr
      28  pEpInt_IN
      28  pEpInt_OUT
      96  usb_Istr

 
  4 bytes in section .bss
 56 bytes in section .data
 96 bytes in section .text
 
 96 bytes of CODE memory
 60 bytes of DATA memory

Errors: none
Warnings: none
