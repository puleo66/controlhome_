###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       09/Feb/2018  16:14:56
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\HW Projects\ControlHome\CntrHome - RF69w\I2C-Out\i2cout.c
#    Command line =  
#        "E:\HW Projects\ControlHome\CntrHome - RF69w\I2C-Out\i2cout.c" -lCN
#        "E:\HW Projects\ControlHome\CntrHome - RF69w\Debug\List" -o "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\Debug\Obj" --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\APP\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\BSP\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\CPU\inc\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-CPU\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-RTC\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-LIB\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uCOS-II\Ports\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uCOS-II\Source\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\I2C-Out\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\Direct_Sw\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\Wdt_led\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-LCD\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-RF\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\api\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\config\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\os\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\fsl\fat\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\clib\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\lbl\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\device\mmc\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\file\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-Terminal\src\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-Terminal\inc\" -Oh
#    List file    =  
#        E:\HW Projects\ControlHome\CntrHome - RF69w\Debug\List\i2cout.lst
#    Object file  =  
#        E:\HW Projects\ControlHome\CntrHome - RF69w\Debug\Obj\i2cout.o
#
###############################################################################

E:\HW Projects\ControlHome\CntrHome - RF69w\I2C-Out\i2cout.c
      1          /*
      2          *********************************************************************************************************
      3          *                                           I2COUT Interface
      4          *
      5          *
      6          *
      7          * Filename   : i2cout.c
      8          * Version    : V1.00
      9          * Programmer : Puleo
     10          *********************************************************************************************************
     11          */
     12          
     13          #define  I2COUT_GLOBALS
     14          #include <includes.h>
     15          
     16          #if I2COUT_MODULE == DEF_ENABLED
     17          
     18          /*
     19          *********************************************************************************************************
     20          *                                               CONSTANTS
     21          *********************************************************************************************************
     22          */
     23          #define ADDR_PCF8574  ((CPU_INT08U)0x40)
     24          
     25          /*
     26          *********************************************************************************************************
     27          *                                           LOCAL VARIABLES
     28          *********************************************************************************************************
     29          */
     30          
     31          #if I2C_PARSE_TASK > 0

   \                                 In section .bss, align 4
     32          static  OS_STK     I2cout_TaskStk[I2C_TASK_STK_SIZE];
   \                     I2cout_TaskStk:
   \   00000000                      DS8 256
     33          

   \                                 In section .data, align 4
     34          INT8U      LedGreen[4] = { 3, 2, 0, 1 };
   \                     LedGreen:
   \   00000000   0x03 0x02          DC8 3, 2, 0, 1
   \              0x00 0x01    
     35          INT8U      LedRed[3] = { 6, 5, 4 };
     36          
     37          
     38          INT8U      prevLedShow, nextLedShow;
   \                     prevLedShow:
   \   00000004   0x00               DC8 0
   \                     nextLedShow:
   \   00000005   0x00               DC8 0
     39          INT8U      *msg;
     40          INT8U      err;
   \                     err:
   \   00000006   0x00               DC8 0
   \   00000007   0x00               DC8 0
   \                     LedRed:
   \   00000008   0x06 0x05          DC8 6, 5, 4, 0
   \              0x04 0x00    
   \                     msg:
   \   0000000C   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
     41          #endif
     42          
     43          
     44          /*
     45          *********************************************************************************************************
     46          *                                      LOCAL FUNCTION PROTOTYPES
     47          *********************************************************************************************************
     48          */
     49          
     50          #if I2C_PARSE_TASK > 0
     51          static  void    I2cout_InitOS(void);
     52          static  void    I2cout_Task(void *p_arg);
     53          #endif
     54          
     55          /*
     56          *********************************************************************************************************
     57          */
     58          static void I2cout_LedReset(void)
     59          {
     60              write_pcf8574(ADDR_PCF8574, 0x00);
     61              
     62              write_pcf8574(ADDR_PCF8574, 0x0F);
     63              OSTimeDlyHMSM(0, 0, 20, 0);
     64              
     65              write_pcf8574(ADDR_PCF8574, 0x70);
     66              OSTimeDlyHMSM(0, 0, 20, 0);
     67              
     68              write_pcf8574(ADDR_PCF8574, 0x00);
     69          
     70          }
     71          
     72          /*
     73          *********************************************************************************************************
     74          */

   \                                 In section .text, align 2, keep-with-next
     75          static void LedShow(void)
     76          {
   \                     LedShow: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
     77            INT8U value, i;
     78            
     79            msg = (CPU_INT08U *)(OSMboxPend(RF868_Mbox, OS_TICKS_PER_SEC / 10, &err));
   \   00000002   0x....             LDR.N    R0,??DataTable3
   \   00000004   0x....             LDR.N    R4,??DataTable3_1
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x1DA2             ADDS     R2,R4,#+6
   \   0000000A   0x2164             MOVS     R1,#+100
   \   0000000C   0x.... 0x....      BL       OSMboxPend
     80            
     81            if (err == OS_NO_ERR) {
   \   00000010   0x79A1             LDRB     R1,[R4, #+6]
   \   00000012   0x60E0             STR      R0,[R4, #+12]
   \   00000014   0xB901             CBNZ.N   R1,??LedShow_0
     82                nextLedShow = (CPU_INT32U)msg;
   \   00000016   0x7160             STRB     R0,[R4, #+5]
     83            }
     84            
     85            if ( nextLedShow != prevLedShow)
   \                     ??LedShow_0: (+1)
   \   00000018   0x7960             LDRB     R0,[R4, #+5]
   \   0000001A   0x7921             LDRB     R1,[R4, #+4]
   \   0000001C   0x4288             CMP      R0,R1
   \   0000001E   0xD043             BEQ.N    ??LedShow_1
     86            {
     87              prevLedShow = nextLedShow;
     88              value = 0;
   \   00000020   0x2200             MOVS     R2,#+0
     89              
     90              for( i=0; i<4; i++ ){
   \   00000022   0x2101             MOVS     R1,#+1
     91                if( (nextLedShow >> i) & 1)
   \   00000024   0x07C3             LSLS     R3,R0,#+31
   \   00000026   0x7120             STRB     R0,[R4, #+4]
   \   00000028   0xD503             BPL.N    ??LedShow_2
     92                {
     93                  value |= (0x01<<LedGreen[i]);                    // Setting a green bit
   \   0000002A   0x56A2             LDRSB    R2,[R4, R2]
   \   0000002C   0xFA01 0xF202      LSL      R2,R1,R2
   \   00000030   0xB2D2             UXTB     R2,R2
   \                     ??LedShow_2: (+1)
   \   00000032   0xF3C0 0x0340      UBFX     R3,R0,#+1,#+1
   \   00000036   0xB123             CBZ.N    R3,??LedShow_3
   \   00000038   0x5663             LDRSB    R3,[R4, R1]
   \   0000003A   0xFA01 0xF303      LSL      R3,R1,R3
   \   0000003E   0x431A             ORRS     R2,R3,R2
   \   00000040   0xB2D2             UXTB     R2,R2
   \                     ??LedShow_3: (+1)
   \   00000042   0xF3C0 0x0380      UBFX     R3,R0,#+2,#+1
   \   00000046   0xB12B             CBZ.N    R3,??LedShow_4
   \   00000048   0xF994 0x3002      LDRSB    R3,[R4, #+2]
   \   0000004C   0xFA01 0xF303      LSL      R3,R1,R3
   \   00000050   0x431A             ORRS     R2,R3,R2
   \   00000052   0xB2D2             UXTB     R2,R2
   \                     ??LedShow_4: (+1)
   \   00000054   0xF3C0 0x03C0      UBFX     R3,R0,#+3,#+1
   \   00000058   0xB12B             CBZ.N    R3,??LedShow_5
   \   0000005A   0xF994 0x3003      LDRSB    R3,[R4, #+3]
   \   0000005E   0xFA01 0xF303      LSL      R3,R1,R3
   \   00000062   0x431A             ORRS     R2,R3,R2
   \   00000064   0xB2D2             UXTB     R2,R2
     94                }
     95              }  
     96              
     97              if( (nextLedShow & 0xF0) != 0){
   \                     ??LedShow_5: (+1)
   \   00000066   0x23F0             MOVS     R3,#+240
   \   00000068   0x4218             TST      R0,R3
   \   0000006A   0xD010             BEQ.N    ??LedShow_6
     98                for( i=0; i<3; i++ )
   \   0000006C   0x2300             MOVS     R3,#+0
   \   0000006E   0x3408             ADDS     R4,R4,#+8
     99                {
    100                  if( (nextLedShow >> (i+4)) & 1)
   \                     ??LedShow_7: (+1)
   \   00000070   0x1D1D             ADDS     R5,R3,#+4
   \   00000072   0xFA20 0xF605      LSR      R6,R0,R5
   \   00000076   0x07F5             LSLS     R5,R6,#+31
   \   00000078   0xD505             BPL.N    ??LedShow_8
    101                  {
    102                    value |= (0x01<<LedRed[i]);                      // Setting a red bit
   \   0000007A   0xF994 0x5000      LDRSB    R5,[R4, #+0]
   \   0000007E   0xFA01 0xF505      LSL      R5,R1,R5
   \   00000082   0x432A             ORRS     R2,R5,R2
   \   00000084   0xB2D2             UXTB     R2,R2
    103                  }
    104                }  
   \                     ??LedShow_8: (+1)
   \   00000086   0x1C5B             ADDS     R3,R3,#+1
   \   00000088   0x1C64             ADDS     R4,R4,#+1
   \   0000008A   0x2B03             CMP      R3,#+3
   \   0000008C   0xDBF0             BLT.N    ??LedShow_7
    105              }
    106              
    107              if (( value & 0x0F) > 0){
   \                     ??LedShow_6: (+1)
   \   0000008E   0xF002 0x000F      AND      R0,R2,#0xF
   \   00000092   0x2801             CMP      R0,#+1
   \   00000094   0xBFAC             ITE      GE 
   \   00000096   0xF042 0x0180      ORRGE    R1,R2,#0x80
   \   0000009A   0xF002 0x017F      ANDLT    R1,R2,#0x7F
    108                value |= (0x01<<7);
    109              }else{
    110                value &= ~(0x01<<7);
    111              }
    112              
    113              write_pcf8574(ADDR_PCF8574, value);
   \   0000009E   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   000000A2   0x2040             MOVS     R0,#+64
   \   000000A4   0x.... 0x....      B.W      write_pcf8574
    114            }
    115          }
   \                     ??LedShow_1: (+1)
   \   000000A8   0xBD70             POP      {R4-R6,PC}       ;; return
    116          /*
    117          *********************************************************************************************************
    118          *                                       INITIALIZE I2COUT
    119          *********************************************************************************************************
    120          */
    121          

   \                                 In section .text, align 2, keep-with-next
    122          void   I2cout_Init (void)
    123          {
   \                     I2cout_Init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
    124          
    125          #if I2C_PARSE_TASK > 0
    126              I2cout_InitOS();
   \   00000004   0x2103             MOVS     R1,#+3
   \   00000006   0x9104             STR      R1,[SP, #+16]
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x9103             STR      R1,[SP, #+12]
   \   0000000C   0x2140             MOVS     R1,#+64
   \   0000000E   0x9102             STR      R1,[SP, #+8]
   \   00000010   0x210A             MOVS     R1,#+10
   \   00000012   0x....             LDR.N    R0,??DataTable3_2
   \   00000014   0x9001             STR      R0,[SP, #+4]
   \   00000016   0x9100             STR      R1,[SP, #+0]
   \   00000018   0xF100 0x02FC      ADD      R2,R0,#+252
   \   0000001C   0x2304             MOVS     R3,#+4
   \   0000001E   0x2100             MOVS     R1,#+0
   \   00000020   0x.... 0x....      ADR.W    R0,I2cout_Task
   \   00000024   0x.... 0x....      BL       OSTaskCreateExt
   \   00000028   0xAA05             ADD      R2,SP,#+20
   \   0000002A   0x.... 0x....      ADR.W    R1,?_0
   \   0000002E   0x2004             MOVS     R0,#+4
   \   00000030   0x.... 0x....      BL       OSTaskNameSet
    127          #endif
    128          
    129             
    130          }
   \   00000034   0xB007             ADD      SP,SP,#+28
   \   00000036   0xBD00             POP      {PC}             ;; return
    131          
    132          /*
    133          *********************************************************************************************************
    134          *                             INITIALIZE THE I2COUT TASK AND OS OBJECTS
    135          *********************************************************************************************************
    136          */
    137          
    138          #if I2C_PARSE_TASK > 0
    139          static  void  I2cout_InitOS (void)
    140          {
    141          #if OS_TASK_NAME_SIZE > 0 || OS_EVENT_NAME_SIZE > 7
    142              INT8U  err;
    143          #endif
    144          
    145              (void)OSTaskCreateExt(I2cout_Task,
    146                                    (void *)0,                                  /* No arguments passed to Wifly_Task() */
    147                                    &I2cout_TaskStk[I2C_TASK_STK_SIZE - 1],    /* Set Top-Of-Stack                     */
    148                                    I2C_TASK_PRIO,                            /* Lowest priority level                */
    149                                    I2C_TASK_ID,
    150                                    &I2cout_TaskStk[0],                           /* Set Bottom-Of-Stack                  */
    151                                    I2C_TASK_STK_SIZE,
    152                                    (void *)0,                                   /* No TCB extension                     */
    153                                    OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);  /* Enable stack checking + clear stack  */
    154          
    155          #if OS_TASK_NAME_SIZE > 11
    156              OSTaskNameSet(I2C_TASK_PRIO, (INT8U *)"I2C Task", &err);
    157          #endif
    158          }
    159          #endif
    160          
    161          /*
    162          *********************************************************************************************************
    163          *                                           I2COUT TASK
    164          *********************************************************************************************************
    165          */
    166          
    167          #if I2C_PARSE_TASK > 0

   \                                 In section .text, align 4, keep-with-next
    168          static  void  I2cout_Task (void *p_arg)
    169          {
   \                     I2cout_Task: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
    170          
    171            CPU_INT08U  *msg;
    172            CPU_INT08U   err;
    173            CPU_INT32U   nstate;
    174            CPU_INT32U   pstate;
    175            CPU_INT08U   value;
    176          
    177            (void)p_arg;
    178              
    179              prevLedShow = 0;
   \   00000002   0x....             LDR.N    R0,??DataTable3_1
    180              nextLedShow = 0;
    181              
    182              nstate = 0;
    183              pstate = 0;
    184              value = 0;
    185                
    186              I2cout_LedReset();
   \   00000004   0x....             LDR.N    R7,??DataTable3_3
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x8081             STRH     R1,[R0, #+4]
   \   0000000A   0x2040             MOVS     R0,#+64
   \   0000000C   0x.... 0x....      BL       write_pcf8574
   \   00000010   0x210F             MOVS     R1,#+15
   \   00000012   0x2040             MOVS     R0,#+64
   \   00000014   0x.... 0x....      BL       write_pcf8574
   \   00000018   0x2300             MOVS     R3,#+0
   \   0000001A   0x2214             MOVS     R2,#+20
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x.... 0x....      BL       OSTimeDlyHMSM
   \   00000024   0x2170             MOVS     R1,#+112
   \   00000026   0x2040             MOVS     R0,#+64
   \   00000028   0x.... 0x....      BL       write_pcf8574
   \   0000002C   0x2300             MOVS     R3,#+0
   \   0000002E   0x2214             MOVS     R2,#+20
   \   00000030   0x2100             MOVS     R1,#+0
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x.... 0x....      BL       OSTimeDlyHMSM
   \   00000038   0x2100             MOVS     R1,#+0
   \   0000003A   0x2040             MOVS     R0,#+64
   \   0000003C   0x.... 0x....      BL       write_pcf8574
   \   00000040   0x2400             MOVS     R4,#+0
   \   00000042   0x2500             MOVS     R5,#+0
   \   00000044   0x2600             MOVS     R6,#+0
    187              
    188              while (1) {
    189                
    190                msg = (CPU_INT08U *)(OSMboxPend(Direct_Sw_Mbox, OS_TICKS_PER_SEC / 10, &err));
   \                     ??I2cout_Task_0: (+1)
   \   00000046   0x6838             LDR      R0,[R7, #+0]
   \   00000048   0x466A             MOV      R2,SP
   \   0000004A   0x2164             MOVS     R1,#+100
   \   0000004C   0x.... 0x....      BL       OSMboxPend
    191                if (err == OS_NO_ERR) {
   \   00000050   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000054   0xB901             CBNZ.N   R1,??I2cout_Task_1
    192                    nstate = (CPU_INT32U)msg;
   \   00000056   0x4604             MOV      R4,R0
    193                }
    194          
    195                if (nstate != pstate) {
   \                     ??I2cout_Task_1: (+1)
   \   00000058   0x42AC             CMP      R4,R5
   \   0000005A   0xD005             BEQ.N    ??I2cout_Task_2
    196                    pstate  = nstate;
    197                    
    198                    if (nstate == 1) {
    199                      value += 0x80;
    200                      write_pcf8574(ADDR_PCF8574, value);
    201                    } else {
    202                      value -= 0x80;
   \   0000005C   0x3E80             SUBS     R6,R6,#+128
    203                      write_pcf8574(ADDR_PCF8574, value);
   \   0000005E   0xB2F1             UXTB     R1,R6
   \   00000060   0x2040             MOVS     R0,#+64
   \   00000062   0x.... 0x....      BL       write_pcf8574
   \   00000066   0x4625             MOV      R5,R4
    204                    }  
    205                }
    206                
    207                LedShow();
   \                     ??I2cout_Task_2: (+1)
   \   00000068   0x.... 0x....      BL       LedShow
   \   0000006C   0xE7EB             B.N      ??I2cout_Task_0
    208          /*      
    209                msg = (CPU_INT08U *)(OSMboxPend(RF868_Mbox, OS_TICKS_PER_SEC / 10, &err));
    210                if (err == OS_NO_ERR) {
    211                    nstate0 = (CPU_INT32U)msg;
    212                }
    213                
    214                if ( nstate0 != pstate0)
    215                {
    216                  pstate0 = nstate0;
    217                  
    218                  for( i=0; i<4; i++ )
    219                  {
    220                    if( (nstate0 >> i) & 1)
    221                    {
    222                      value |= (0x01<<LedOn[i]);                    // Setting a bit
    223                    }
    224                  }  
    225                  
    226                  if (( value & 0x0F) > 0)
    227                  {
    228                    value |= (0x01<<7);
    229                  }
    230                
    231                  write_pcf8574(ADDR_PCF8574, value);
    232                  
    233                  value = 0;
    234          
    235                }
    236          */
    237              }      
    238          }    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     RF868_Mbox

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     LedGreen

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     I2cout_TaskStk

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     Direct_Sw_Mbox

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x49 0x32          DC8 "I2C Task"
   \              0x43 0x20    
   \              0x54 0x61    
   \              0x73 0x6B    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    239          
    240          #endif
    241          
    242          
    243          
    244          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   I2cout_Init
        32   -> OSTaskCreateExt
        32   -> OSTaskNameSet
      24   I2cout_Task
        24   -> LedShow
        24   -> OSMboxPend
        24   -> OSTimeDlyHMSM
        24   -> write_pcf8574
      16   LedShow
        16   -> OSMboxPend
         0   -> write_pcf8574


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
      12  ?_0
      56  I2cout_Init
     110  I2cout_Task
     256  I2cout_TaskStk
      16  LedGreen
          prevLedShow
          nextLedShow
          err
          LedRed
          msg
     170  LedShow

 
 256 bytes in section .bss
  16 bytes in section .data
 364 bytes in section .text
 
 364 bytes of CODE memory
 272 bytes of DATA memory

Errors: none
Warnings: none
