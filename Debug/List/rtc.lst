###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       09/Feb/2018  16:15:05
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  E:\HW Projects\ControlHome\CntrHome - RF69w\uC-RTC\rtc.c
#    Command line =  
#        "E:\HW Projects\ControlHome\CntrHome - RF69w\uC-RTC\rtc.c" -lCN "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\Debug\List" -o "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\Debug\Obj" --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\APP\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\BSP\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\CPU\inc\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-CPU\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-RTC\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-LIB\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uCOS-II\Ports\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uCOS-II\Source\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\I2C-Out\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\Direct_Sw\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\Wdt_led\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-LCD\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-RF\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\api\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\config\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\os\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\fsl\fat\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\clib\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\lbl\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\device\mmc\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\file\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-Terminal\src\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-Terminal\inc\" -Oh
#    List file    =  
#        E:\HW Projects\ControlHome\CntrHome - RF69w\Debug\List\rtc.lst
#    Object file  =  
#        E:\HW Projects\ControlHome\CntrHome - RF69w\Debug\Obj\rtc.o
#
###############################################################################

E:\HW Projects\ControlHome\CntrHome - RF69w\uC-RTC\rtc.c
      1          /*
      2          *********************************************************************************************************
      3          *                                        RTC MODULE SOURCE FILE
      4          *
      5          * Filename      : rtc.c
      6          * Version       : V0.1
      7          * Programmer(s) : Puleo
      8          *********************************************************************************************************
      9          */
     10          
     11          /*
     12          *********************************************************************************************************
     13          *                                              INCLUDE FILES
     14          *********************************************************************************************************
     15          */
     16          #define  RTC_GLOBALS
     17          #include "includes.h"

   \                                 In section .bss, align 4
   \   __absolute struct tm time_now
   \                     time_now:
   \   00000000                      DS8 44
     18          
     19          #if RTC_MODULE == DEF_ENABLED
     20          /*
     21          *********************************************************************************************************
     22          *                                            LOCAL CONSTANTS
     23          *********************************************************************************************************
     24          */
     25          

   \                                 In section .text, align 4, keep-with-next
     26          const INT8U Days_Table[12]={31,28,31,30,31,30,31,31,30,31,30,31};
   \                     Days_Table:
   \   00000000   0x1F 0x1C          DC8 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
   \              0x1F 0x1E    
   \              0x1F 0x1E    
   \              0x1F 0x1F    
   \              0x1E 0x1F    
   \              0x1E 0x1F    
     27          
     28          /*
     29          *********************************************************************************************************
     30          *                                            LOCAL VARIABLES
     31          *********************************************************************************************************
     32          */
     33          //struct tm time_now;

   \                                 In section .data, align 4
     34          CPU_INT08U time_buffer[20]="0000-00-00 00:00:00";
   \                     time_buffer:
   \   00000000   0x30 0x30          DC8 "0000-00-00 00:00:00"
   \              0x30 0x30    
   \              0x2D 0x30    
   \              0x30 0x2D    
   \              0x30 0x30    
   \              0x20 0x30    
   \              0x30 0x3A    
   \              0x30 0x30    
   \              0x3A 0x30    
   \              0x30 0x00    
     35          /*
     36          *********************************************************************************************************
     37          *                                        LOCAL FUNCTION PROTOTYPES
     38          *********************************************************************************************************
     39          */
     40          
     41          // Convert binary coded decimal to normal decimal numbers

   \                                 In section .text, align 2, keep-with-next
     42          INT8U bcdToDec(INT8U val)
     43          {
     44            return ( (val/16*10) + (val%16) );
   \                     bcdToDec: (+1)
   \   00000000   0x0901             LSRS     R1,R0,#+4
   \   00000002   0xEB01 0x0281      ADD      R2,R1,R1, LSL #+2
   \   00000006   0xF000 0x000F      AND      R0,R0,#0xF
   \   0000000A   0xEB00 0x0042      ADD      R0,R0,R2, LSL #+1
   \   0000000E   0xB2C0             UXTB     R0,R0
   \   00000010   0x4770             BX       LR               ;; return
     45          }
     46          
     47          /*******************************************************************************
     48          * Function Name : isDST
     49          * Description : checks if given time is in Daylight Saving time-span.
     50          * Input : time-struct, must be fully populated including weekday
     51          * Output : none
     52          * Return : false: no DST ("winter"), true: in DST ("summer")
     53          * DST according to German standard
     54          * Based on code from Peter Dannegger found in the microcontroller.net forum.
     55          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     56          static BOOLEAN isDST( struct tm t )
     57          {
   \                     isDST: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
     58            INT8U wday, month;	// locals for faster access
     59            
     60            
     61            month = t.tm_mon;
   \   00000002   0xA804             ADD      R0,SP,#+16
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
     62          
     63            if( month < 3 || month > 10 ) {	// month 1, 2, 11, 12
   \   00000006   0x1EC1             SUBS     R1,R0,#+3
   \   00000008   0x2908             CMP      R1,#+8
   \   0000000A   0xD20F             BCS.N    ??isDST_0
     64              return false;	// -> Winter
     65            }
     66          
     67            wday = t.tm_wday;
   \   0000000C   0xA906             ADD      R1,SP,#+24
   \   0000000E   0x7809             LDRB     R1,[R1, #+0]
     68          
     69            if( t.tm_mday - wday >= 25 && (wday || t.tm_hour >= 2) ) { // after last Sunday 2:00
   \   00000010   0x1A5A             SUBS     R2,R3,R1
   \   00000012   0x2A19             CMP      R2,#+25
   \   00000014   0xDB08             BLT.N    ??isDST_1
   \   00000016   0xB911             CBNZ.N   R1,??isDST_2
   \   00000018   0x9902             LDR      R1,[SP, #+8]
   \   0000001A   0x2902             CMP      R1,#+2
   \   0000001C   0xDB04             BLT.N    ??isDST_1
     70              if( month == 10 ) {	// October -> Winter
   \                     ??isDST_2: (+1)
   \   0000001E   0x280A             CMP      R0,#+10
   \   00000020   0xD004             BEQ.N    ??isDST_0
     71                return false;
     72              }
     73            } else {	// before last Sunday 2:00
     74              if( month == 3 ) {	// March -> Winter
     75                return false;
     76              }
     77            }
     78            
     79            return true;
   \                     ??isDST_3: (+1)
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0xB004             ADD      SP,SP,#+16
   \   00000026   0x4770             BX       LR               ;; return
   \                     ??isDST_1: (+1)
   \   00000028   0x2803             CMP      R0,#+3
   \   0000002A   0xD1FA             BNE.N    ??isDST_3
   \                     ??isDST_0: (+1)
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0xB004             ADD      SP,SP,#+16
   \   00000030   0x4770             BX       LR
     80          }
     81          
     82          /*******************************************************************************
     83          * Function Name : adjustDST
     84          * Description : adjusts time to DST if needed
     85          * Input : non DST time-struct, must be fully populated including weekday
     86          * Output : time-stuct gets modified
     87          * Return : false: no DST ("winter"), true: in DST ("summer")
     88          * DST according to German standard
     89          * Based on code from Peter Dannegger found in the mikrocontroller.net forum.
     90          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     91          BOOLEAN adjustDST( struct tm t )
     92          {
   \                     adjustDST: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB500             PUSH     {LR}
   \   00000004   0xB087             SUB      SP,SP,#+28
     93            INT8U hour, day, wday, month;	// locals for faster access
     94          
     95            hour = t.tm_hour;
     96            day = t.tm_mday;
     97            wday = t.tm_wday;
     98            month = t.tm_mon;
     99          
    100            if ( isDST(t) ) {
   \   00000006   0xA908             ADD      R1,SP,#+32
   \   00000008   0xB084             SUB      SP,SP,#+16
   \   0000000A   0x4668             MOV      R0,SP
   \   0000000C   0x222C             MOVS     R2,#+44
   \   0000000E   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000012   0xBC0F             POP      {R0-R3}
   \   00000014   0x.... 0x....      BL       isDST
   \   00000018   0x1E40             SUBS     R0,R0,#+1
   \   0000001A   0x4180             SBCS     R0,R0,R0
   \   0000001C   0x43C0             MVNS     R0,R0
    101              t.tm_isdst = 1;
    102              hour++;	// add one hour
    103              if( hour == 24 ){	// next day
    104                hour = 0;
    105                wday++;	// next weekday
    106                if( wday == 7 ) {
    107                  wday = 0;
    108                }
    109                if( day == Days_Table[month-1] ) {	// next month
    110                  day = 0;
    111                  month++;
    112                }
    113                day++;
    114              }
    115              t.tm_mon = month;
    116              t.tm_hour = hour;
    117              t.tm_mday = day;
    118              t.tm_wday = wday;
    119              return true;
    120            } else {
    121              t.tm_isdst = 0;
    122              return false;
   \   0000001E   0xB007             ADD      SP,SP,#+28
   \   00000020   0x0FC0             LSRS     R0,R0,#+31
   \   00000022   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    123            }
    124          }
    125          
    126          /*
    127          *********************************************************************************************************
    128          */

   \                                 In section .text, align 2, keep-with-next
    129          INT8U* getDate(void)
    130          {
   \                     getDate: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    131            time_now = Time_GetCalendarTime();
   \   00000004   0x.... 0x....      BL       RTC_GetCounter
   \   00000008   0x9000             STR      R0,[SP, #+0]
   \   0000000A   0x4668             MOV      R0,SP
   \   0000000C   0x.... 0x....      BL       __localtime32
   \   00000010   0x4601             MOV      R1,R0
   \   00000012   0x.... 0x....      LDR.W    R4,??DataTable4
   \   00000016   0x6948             LDR      R0,[R1, #+20]
   \   00000018   0xF200 0x706C      ADDW     R0,R0,#+1900
   \   0000001C   0x6148             STR      R0,[R1, #+20]
   \   0000001E   0x222C             MOVS     R2,#+44
   \   00000020   0x4620             MOV      R0,R4
   \   00000022   0x.... 0x....      BL       __aeabi_memcpy4
    132            
    133            time_buffer[0] = bcdToDec(time_now.tm_sec);  // second
   \   00000026   0x6822             LDR      R2,[R4, #+0]
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable4_1
   \   0000002C   0x0611             LSLS     R1,R2,#+24
   \   0000002E   0x0F09             LSRS     R1,R1,#+28
   \   00000030   0xEB01 0x0381      ADD      R3,R1,R1, LSL #+2
   \   00000034   0xF002 0x010F      AND      R1,R2,#0xF
   \   00000038   0xEB01 0x0143      ADD      R1,R1,R3, LSL #+1
   \   0000003C   0x7001             STRB     R1,[R0, #+0]
    134            time_buffer[1] = bcdToDec(time_now.tm_min);  // minute
   \   0000003E   0x6862             LDR      R2,[R4, #+4]
   \   00000040   0x0611             LSLS     R1,R2,#+24
   \   00000042   0x0F09             LSRS     R1,R1,#+28
   \   00000044   0xEB01 0x0381      ADD      R3,R1,R1, LSL #+2
   \   00000048   0xF002 0x010F      AND      R1,R2,#0xF
   \   0000004C   0xEB01 0x0143      ADD      R1,R1,R3, LSL #+1
   \   00000050   0x7041             STRB     R1,[R0, #+1]
    135            time_buffer[2] = bcdToDec(time_now.tm_hour); // hour
   \   00000052   0x68A2             LDR      R2,[R4, #+8]
   \   00000054   0x0611             LSLS     R1,R2,#+24
   \   00000056   0x0F09             LSRS     R1,R1,#+28
   \   00000058   0xEB01 0x0381      ADD      R3,R1,R1, LSL #+2
   \   0000005C   0xF002 0x010F      AND      R1,R2,#0xF
   \   00000060   0xEB01 0x0143      ADD      R1,R1,R3, LSL #+1
   \   00000064   0x7081             STRB     R1,[R0, #+2]
    136            time_buffer[3] = bcdToDec(time_now.tm_wday); // dayOfWeek
   \   00000066   0x69A2             LDR      R2,[R4, #+24]
   \   00000068   0x0611             LSLS     R1,R2,#+24
   \   0000006A   0x0F09             LSRS     R1,R1,#+28
   \   0000006C   0xEB01 0x0381      ADD      R3,R1,R1, LSL #+2
   \   00000070   0xF002 0x010F      AND      R1,R2,#0xF
   \   00000074   0xEB01 0x0143      ADD      R1,R1,R3, LSL #+1
   \   00000078   0x70C1             STRB     R1,[R0, #+3]
    137            time_buffer[4] = bcdToDec(time_now.tm_mday); // dayOfMonth
   \   0000007A   0x68E2             LDR      R2,[R4, #+12]
   \   0000007C   0x0611             LSLS     R1,R2,#+24
   \   0000007E   0x0F09             LSRS     R1,R1,#+28
   \   00000080   0xEB01 0x0381      ADD      R3,R1,R1, LSL #+2
   \   00000084   0xF002 0x010F      AND      R1,R2,#0xF
   \   00000088   0xEB01 0x0143      ADD      R1,R1,R3, LSL #+1
   \   0000008C   0x7101             STRB     R1,[R0, #+4]
    138            time_buffer[5] = bcdToDec(time_now.tm_mon);  // month
   \   0000008E   0x6922             LDR      R2,[R4, #+16]
   \   00000090   0x0611             LSLS     R1,R2,#+24
   \   00000092   0x0F09             LSRS     R1,R1,#+28
   \   00000094   0xEB01 0x0381      ADD      R3,R1,R1, LSL #+2
   \   00000098   0xF002 0x010F      AND      R1,R2,#0xF
   \   0000009C   0xEB01 0x0143      ADD      R1,R1,R3, LSL #+1
   \   000000A0   0x7141             STRB     R1,[R0, #+5]
    139            time_buffer[6] = bcdToDec(time_now.tm_year); // year
   \   000000A2   0x6962             LDR      R2,[R4, #+20]
   \   000000A4   0x0611             LSLS     R1,R2,#+24
   \   000000A6   0x0F09             LSRS     R1,R1,#+28
   \   000000A8   0xEB01 0x0381      ADD      R3,R1,R1, LSL #+2
   \   000000AC   0xF002 0x010F      AND      R1,R2,#0xF
   \   000000B0   0xEB01 0x0143      ADD      R1,R1,R3, LSL #+1
   \   000000B4   0x7181             STRB     R1,[R0, #+6]
    140            
    141            return time_buffer;
   \   000000B6   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    142          }
    143          
    144          /*******************************************************************************
    145          * Function Name  : INT8U Is_LeapYear(INT16U year)
    146          * Description    : Get Leap Year
    147          * Input          : Year
    148          * Return         : Yes, or False
    149          *******************************************************************************/
    150          
    151          static INT8U Is_LeapYear(INT16U year)
    152          {         
    153            
    154             if(year%4==0)               //????4??
    155             {
    156               if(year%100==0)
    157               {
    158                 if(year%400==0){
    159                  return 1;      
    160                 } else{
    161                   return 0;
    162                 }
    163               }else{
    164                return 1;  
    165               }
    166             }else{
    167               return 0; 
    168             }
    169          }
    170          
    171          /*******************************************************************************
    172          * Function Name  : Time_ConvWiflyRTC(INT8U *s, INT8U p)
    173          * Description    : NTP time Convert to LocalTime
    174          * Input          : RTC Time of NTP, Time zone
    175          * Output         : None
    176          * Return         : struct tm
    177          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    178          void Time_ConvUSBRTC(INT32U s)
    179          {
   \                     Time_ConvUSBRTC: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
    180             INT32U secs,days,temp,years = 1970,months = 0;    
    181          	
    182             secs = s;
    183          	 
    184              days = secs/86400;
   \   00000002   0x....             LDR.N    R1,??DataTable4_2  ;; 0x15180
   \   00000004   0x2400             MOVS     R4,#+0
   \   00000006   0xFBB0 0xF5F1      UDIV     R5,R0,R1
   \   0000000A   0x002A             MOVS     R2,R5
   \   0000000C   0xB087             SUB      SP,SP,#+28
   \   0000000E   0xF240 0x73B2      MOVW     R3,#+1970
    185              if(days > 0)    
   \   00000012   0xD052             BEQ.N    ??Time_ConvUSBRTC_0
    186              {
    187                  temp = days;
   \   00000014   0x462E             MOV      R6,R5
   \   00000016   0xF240 0x126D      MOVW     R2,#+365
   \   0000001A   0xE017             B.N      ??Time_ConvUSBRTC_1
    188                  while(temp >= 365)  
    189                  {
    190                      if(Is_LeapYear(years))
   \                     ??Time_ConvUSBRTC_2: (+1)
   \   0000001C   0xB29F             UXTH     R7,R3
   \   0000001E   0x2164             MOVS     R1,#+100
   \   00000020   0xFB97 0xF1F1      SDIV     R1,R7,R1
   \   00000024   0xF04F 0x0E64      MOV      LR,#+100
   \   00000028   0xFB0E 0x7111      MLS      R1,LR,R1,R7
   \   0000002C   0xB941             CBNZ.N   R1,??Time_ConvUSBRTC_3
   \   0000002E   0xF44F 0x71C8      MOV      R1,#+400
   \   00000032   0xFB97 0xF1F1      SDIV     R1,R7,R1
   \   00000036   0xF44F 0x7EC8      MOV      LR,#+400
   \   0000003A   0xFB0E 0x7111      MLS      R1,LR,R1,R7
   \   0000003E   0xB951             CBNZ.N   R1,??Time_ConvUSBRTC_4
    191                      {
    192                          if(temp >= 366)
   \                     ??Time_ConvUSBRTC_3: (+1)
   \   00000040   0xF5B6 0x7FB7      CMP      R6,#+366
   \   00000044   0xD30A             BCC.N    ??Time_ConvUSBRTC_5
    193                              temp -= 366;  
   \   00000046   0xF5A6 0x76B7      SUB      R6,R6,#+366
    194                          else
    195                              break;
    196                      }else{
    197                          temp -= 365;
    198                      }          
    199                      years++;
   \                     ??Time_ConvUSBRTC_6: (+1)
   \   0000004A   0x1C5B             ADDS     R3,R3,#+1
   \                     ??Time_ConvUSBRTC_1: (+1)
   \   0000004C   0x4296             CMP      R6,R2
   \   0000004E   0xD305             BCC.N    ??Time_ConvUSBRTC_5
   \   00000050   0x2103             MOVS     R1,#+3
   \   00000052   0x420B             TST      R3,R1
   \   00000054   0xD0E2             BEQ.N    ??Time_ConvUSBRTC_2
   \                     ??Time_ConvUSBRTC_4: (+1)
   \   00000056   0xF2A6 0x166D      SUBW     R6,R6,#+365
   \   0000005A   0xE7F6             B.N      ??Time_ConvUSBRTC_6
    200                  }
    201          	         
    202                  time_now.tm_year = years; 
   \                     ??Time_ConvUSBRTC_5: (+1)
   \   0000005C   0x....             LDR.N    R1,??DataTable4
   \   0000005E   0x.... 0x....      ADR.W    R12,Days_Table
   \   00000062   0x614B             STR      R3,[R1, #+20]
    203           
    204                  while(days >= 28)
   \   00000064   0x2D1C             CMP      R5,#+28
   \   00000066   0xD324             BCC.N    ??Time_ConvUSBRTC_7
   \   00000068   0xE003             B.N      ??Time_ConvUSBRTC_8
    205                  {
    206                      if(Is_LeapYear(years) && months ==1)
    207                      {
    208                          if(temp >= 29)
    209                              temp -= 29;
    210                          else
    211                              break;
    212                      }else{
    213                          if(temp >= Days_Table[months])      
    214                              temp -= Days_Table[months];
   \                     ??Time_ConvUSBRTC_9: (+1)
   \   0000006A   0x1AB6             SUBS     R6,R6,R2
    215                          else
    216                              break;
    217                      }
    218          	 
    219                      months++;  
   \                     ??Time_ConvUSBRTC_10: (+1)
   \   0000006C   0x1C64             ADDS     R4,R4,#+1
   \   0000006E   0xF10C 0x0C01      ADD      R12,R12,#+1
   \                     ??Time_ConvUSBRTC_8: (+1)
   \   00000072   0x2203             MOVS     R2,#+3
   \   00000074   0x4213             TST      R3,R2
   \   00000076   0xD118             BNE.N    ??Time_ConvUSBRTC_11
   \   00000078   0xB29F             UXTH     R7,R3
   \   0000007A   0x2264             MOVS     R2,#+100
   \   0000007C   0xFB97 0xF2F2      SDIV     R2,R7,R2
   \   00000080   0xF04F 0x0E64      MOV      LR,#+100
   \   00000084   0xFB0E 0x7212      MLS      R2,LR,R2,R7
   \   00000088   0xB942             CBNZ.N   R2,??Time_ConvUSBRTC_12
   \   0000008A   0xF44F 0x72C8      MOV      R2,#+400
   \   0000008E   0xFB97 0xF2F2      SDIV     R2,R7,R2
   \   00000092   0xF44F 0x7EC8      MOV      LR,#+400
   \   00000096   0xFB0E 0x7212      MLS      R2,LR,R2,R7
   \   0000009A   0xB932             CBNZ.N   R2,??Time_ConvUSBRTC_11
   \                     ??Time_ConvUSBRTC_12: (+1)
   \   0000009C   0x2C01             CMP      R4,#+1
   \   0000009E   0xD104             BNE.N    ??Time_ConvUSBRTC_11
   \   000000A0   0x2E1D             CMP      R6,#+29
   \   000000A2   0xBF28             IT       CS 
   \   000000A4   0x3E1D             SUBCS    R6,R6,#+29
   \   000000A6   0xD2E1             BCS.N    ??Time_ConvUSBRTC_10
   \   000000A8   0xE003             B.N      ??Time_ConvUSBRTC_7
   \                     ??Time_ConvUSBRTC_11: (+1)
   \   000000AA   0xF89C 0x2000      LDRB     R2,[R12, #+0]
   \   000000AE   0x4296             CMP      R6,R2
   \   000000B0   0xD2DB             BCS.N    ??Time_ConvUSBRTC_9
    220                  }
    221          	 
    222                  time_now.tm_mon = months+1; 
   \                     ??Time_ConvUSBRTC_7: (+1)
   \   000000B2   0x1C62             ADDS     R2,R4,#+1
   \   000000B4   0x610A             STR      R2,[R1, #+16]
    223                  time_now.tm_mday  = temp+1; 
   \   000000B6   0x1C72             ADDS     R2,R6,#+1
   \   000000B8   0x60CA             STR      R2,[R1, #+12]
    224              }
    225          	 
    226              temp = secs % 86400;            
   \                     ??Time_ConvUSBRTC_0: (+1)
   \   000000BA   0x....             LDR.N    R1,??DataTable4_2  ;; 0x15180
   \   000000BC   0xFB01 0x0015      MLS      R0,R1,R5,R0
    227              time_now.tm_hour = temp/3600 + 2;    //UTC +1
   \   000000C0   0xF44F 0x6161      MOV      R1,#+3600
   \   000000C4   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   000000C8   0x....             LDR.N    R1,??DataTable4
   \   000000CA   0x1C93             ADDS     R3,R2,#+2
   \   000000CC   0x608B             STR      R3,[R1, #+8]
    228              time_now.tm_min = (temp%3600)/60;         
   \   000000CE   0xF44F 0x6361      MOV      R3,#+3600
   \   000000D2   0xFB03 0x0012      MLS      R0,R3,R2,R0
   \   000000D6   0x223C             MOVS     R2,#+60
   \   000000D8   0xFBB0 0xF2F2      UDIV     R2,R0,R2
    229              time_now.tm_sec = (temp%3600)%60;
   \   000000DC   0xEBC2 0x1302      RSB      R3,R2,R2, LSL #+4
   \   000000E0   0xEBA0 0x0083      SUB      R0,R0,R3, LSL #+2
   \   000000E4   0x604A             STR      R2,[R1, #+4]
   \   000000E6   0x6008             STR      R0,[R1, #+0]
    230          //    adjustDST(time_now);
    231              Time_SetCalendarTime(time_now);
   \   000000E8   0xB084             SUB      SP,SP,#+16
   \   000000EA   0x4668             MOV      R0,SP
   \   000000EC   0x222C             MOVS     R2,#+44
   \   000000EE   0x.... 0x....      BL       __aeabi_memcpy4
   \   000000F2   0xBC0F             POP      {R0-R3}
   \   000000F4   0x.... 0x....      BL       Time_SetCalendarTime
    232          }
   \   000000F8   0xB007             ADD      SP,SP,#+28
   \   000000FA   0xBDF0             POP      {R4-R7,PC}       ;; return
    233          /*******************************************************************************
    234          * Function Name  : Time_ConvUnixToCalendar(time_t t)
    235          * Description    : UnixTime Convert to LocalTime
    236          * Input          : 
    237          * Output         : None
    238          * Return         : struct tm
    239          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    240          struct tm Time_ConvUnixToCalendar(time_t t)
    241          {
   \                     Time_ConvUnixToCalendar: (+1)
   \   00000000   0xB513             PUSH     {R0,R1,R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    242                  struct tm *t_tm;
    243                  
    244                  t_tm = localtime(&t);
   \   00000004   0xA801             ADD      R0,SP,#+4
   \   00000006   0x....             B.N      ?Subroutine0
    245                  t_tm->tm_year += 1900;  // We want years since 1900... 
    246                  return *t_tm;
    247          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x.... 0x....      BL       __localtime32
   \   00000004   0x4601             MOV      R1,R0
   \   00000006   0x222C             MOVS     R2,#+44
   \   00000008   0x6948             LDR      R0,[R1, #+20]
   \   0000000A   0xF200 0x706C      ADDW     R0,R0,#+1900
   \   0000000E   0x6148             STR      R0,[R1, #+20]
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000016   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    248          
    249          /*******************************************************************************
    250          * Function Name  : Time_ConvCalendarToUnix(struct tm t)
    251          * Description    : 
    252          * Input          : struct tm t
    253          * Output         : None
    254          * Return         : time_t
    255          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    256          time_t Time_ConvCalendarToUnix(struct tm t)
    257          {
   \                     Time_ConvCalendarToUnix: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB580             PUSH     {R7,LR}
    258                  t.tm_year -= 1900;  
   \   00000004   0x9807             LDR      R0,[SP, #+28]
   \   00000006   0xF2A0 0x706C      SUBW     R0,R0,#+1900
   \   0000000A   0x9007             STR      R0,[SP, #+28]
    259                  return mktime(&t);
   \   0000000C   0xA802             ADD      R0,SP,#+8
   \   0000000E   0x.... 0x....      BL       __mktime32
   \   00000012   0xBC02             POP      {R1}
   \   00000014   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    260          }
    261          
    262          /*******************************************************************************
    263          * Function Name  : Time_GetUnixTime()
    264          * Description    :
    265          * Input          : None
    266          * Output         : None
    267          * Return         : time_t t
    268          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    269          time_t Time_GetUnixTime(void)
    270          {
    271                  return (time_t)RTC_GetCounter();
   \                     Time_GetUnixTime: (+1)
   \   00000000   0x.... 0x....      B.W      RTC_GetCounter
    272          }
    273          
    274          /*******************************************************************************
    275          * Function Name  : Time_GetCalendarTime()
    276          * Description    :
    277          * Input          : None
    278          * Output         : None
    279          * Return         : time_t t
    280          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    281          struct tm Time_GetCalendarTime(void)
    282          {
   \                     Time_GetCalendarTime: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x4604             MOV      R4,R0
    283                  time_t t_t;
    284                  struct tm t_tm;
    285          
    286                  t_t = (time_t)RTC_GetCounter();
    287                  t_tm = Time_ConvUnixToCalendar(t_t);
   \   00000006   0x.... 0x....      BL       RTC_GetCounter
   \   0000000A   0x9000             STR      R0,[SP, #+0]
   \   0000000C   0x4668             MOV      R0,SP
   \   0000000E                      REQUIRE ?Subroutine0
   \   0000000E                      ;; // Fall through to label ?Subroutine0
    288                  return t_tm;
    289          }
    290          
    291          /*******************************************************************************
    292          * Function Name  : Time_SetUnixTime()
    293          * Description    :
    294          * Input          : time_t t
    295          * Output         : None
    296          * Return         : None
    297          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    298          void Time_SetUnixTime(time_t t)
    299          {
   \                     Time_SetUnixTime: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    300                  RTC_WaitForLastTask();
   \   00000004   0x.... 0x....      BL       RTC_WaitForLastTask
    301                  RTC_SetCounter((u32)t);
   \   00000008   0x4620             MOV      R0,R4
   \   0000000A   0x.... 0x....      BL       RTC_SetCounter
    302                  RTC_WaitForLastTask();
   \   0000000E   0xE8BD 0x4010      POP      {R4,LR}
   \   00000012   0x.... 0x....      B.W      RTC_WaitForLastTask
    303                  return;
    304          }
    305          
    306          /*******************************************************************************
    307          * Function Name  : Time_SetCalendarTime()
    308          * Description    :
    309          * Input          : struct tm t
    310          * Output         : None
    311          * Return         : None
    312          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    313          void Time_SetCalendarTime(struct tm t)
    314          {
   \                     Time_SetCalendarTime: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB510             PUSH     {R4,LR}
   \   00000004   0xB088             SUB      SP,SP,#+32
    315                  Time_SetUnixTime(Time_ConvCalendarToUnix(t));
   \   00000006   0xA90A             ADD      R1,SP,#+40
   \   00000008   0xB084             SUB      SP,SP,#+16
   \   0000000A   0x4668             MOV      R0,SP
   \   0000000C   0x222C             MOVS     R2,#+44
   \   0000000E   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000012   0xBC0F             POP      {R0-R3}
   \   00000014   0x.... 0x....      BL       Time_ConvCalendarToUnix
   \   00000018   0x4604             MOV      R4,R0
   \   0000001A   0x.... 0x....      BL       RTC_WaitForLastTask
   \   0000001E   0x4620             MOV      R0,R4
   \   00000020   0x.... 0x....      BL       RTC_SetCounter
   \   00000024   0x.... 0x....      BL       RTC_WaitForLastTask
    316                  return;
   \   00000028   0xB008             ADD      SP,SP,#+32
   \   0000002A   0xBC10             POP      {R4}
   \   0000002C   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    317          }
    318          
    319          /*******************************************************************************
    320          * Function Name  : Get_Time_Now
    321          * Description    : 
    322          * Input          : None
    323          * Output         : CPU_INT08U *set_buffer
    324          * Return         : None
    325          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    326          INT8U* Get_Time_Now()
    327          {
   \                     Get_Time_Now: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    328          
    329            time_now = Time_GetCalendarTime();
   \   00000002   0x.... 0x....      BL       RTC_GetCounter
   \   00000006   0x9000             STR      R0,[SP, #+0]
   \   00000008   0x4668             MOV      R0,SP
   \   0000000A   0x.... 0x....      BL       __localtime32
   \   0000000E   0x4601             MOV      R1,R0
   \   00000010   0x....             LDR.N    R4,??DataTable4
   \   00000012   0x6948             LDR      R0,[R1, #+20]
   \   00000014   0xF200 0x706C      ADDW     R0,R0,#+1900
   \   00000018   0x6148             STR      R0,[R1, #+20]
   \   0000001A   0x222C             MOVS     R2,#+44
   \   0000001C   0x4620             MOV      R0,R4
   \   0000001E   0x.... 0x....      BL       __aeabi_memcpy4
    330            
    331            time_buffer[0]=time_now.tm_year/1000+'0';
   \   00000022   0x6961             LDR      R1,[R4, #+20]
   \   00000024   0xF44F 0x707A      MOV      R0,#+1000
   \   00000028   0xFB91 0xF2F0      SDIV     R2,R1,R0
   \   0000002C   0x....             LDR.N    R0,??DataTable4_1
   \   0000002E   0xF102 0x0330      ADD      R3,R2,#+48
   \   00000032   0x7003             STRB     R3,[R0, #+0]
    332            time_buffer[1]=(time_now.tm_year%1000)/100+'0';
    333            time_buffer[2]=(time_now.tm_year%100)/10+'0';
   \   00000034   0x250A             MOVS     R5,#+10
   \   00000036   0xF44F 0x737A      MOV      R3,#+1000
   \   0000003A   0xFB03 0x1212      MLS      R2,R3,R2,R1
   \   0000003E   0x2364             MOVS     R3,#+100
   \   00000040   0xFB92 0xF2F3      SDIV     R2,R2,R3
   \   00000044   0x3230             ADDS     R2,R2,#+48
   \   00000046   0x7042             STRB     R2,[R0, #+1]
   \   00000048   0xFB91 0xF3F3      SDIV     R3,R1,R3
   \   0000004C   0x2264             MOVS     R2,#+100
   \   0000004E   0xFB02 0x1313      MLS      R3,R2,R3,R1
   \   00000052   0xFB93 0xF3F5      SDIV     R3,R3,R5
   \   00000056   0x3330             ADDS     R3,R3,#+48
   \   00000058   0x7083             STRB     R3,[R0, #+2]
    334            time_buffer[3]=time_now.tm_year%10+'0';
   \   0000005A   0x230A             MOVS     R3,#+10
   \   0000005C   0xFB91 0xF3F3      SDIV     R3,R1,R3
   \   00000060   0xEB03 0x0583      ADD      R5,R3,R3, LSL #+2
   \   00000064   0xEBA1 0x0145      SUB      R1,R1,R5, LSL #+1
   \   00000068   0x3130             ADDS     R1,R1,#+48
   \   0000006A   0x70C1             STRB     R1,[R0, #+3]
    335            
    336            time_buffer[5]=((time_now.tm_mon)%100)/10+'0';
   \   0000006C   0x2364             MOVS     R3,#+100
   \   0000006E   0x6921             LDR      R1,[R4, #+16]
   \   00000070   0xFB91 0xF3F3      SDIV     R3,R1,R3
   \   00000074   0xFB02 0x1313      MLS      R3,R2,R3,R1
   \   00000078   0x250A             MOVS     R5,#+10
   \   0000007A   0xFB93 0xF3F5      SDIV     R3,R3,R5
   \   0000007E   0x3330             ADDS     R3,R3,#+48
   \   00000080   0x7143             STRB     R3,[R0, #+5]
    337            time_buffer[6]=(time_now.tm_mon)%10+'0';
   \   00000082   0x230A             MOVS     R3,#+10
   \   00000084   0xFB91 0xF3F3      SDIV     R3,R1,R3
   \   00000088   0xEB03 0x0583      ADD      R5,R3,R3, LSL #+2
   \   0000008C   0xEBA1 0x0145      SUB      R1,R1,R5, LSL #+1
   \   00000090   0x3130             ADDS     R1,R1,#+48
   \   00000092   0x7181             STRB     R1,[R0, #+6]
    338            
    339            time_buffer[8]=(time_now.tm_mday%100)/10+'0';
   \   00000094   0x2364             MOVS     R3,#+100
   \   00000096   0x68E1             LDR      R1,[R4, #+12]
   \   00000098   0xFB91 0xF3F3      SDIV     R3,R1,R3
   \   0000009C   0xFB02 0x1313      MLS      R3,R2,R3,R1
   \   000000A0   0x250A             MOVS     R5,#+10
   \   000000A2   0xFB93 0xF3F5      SDIV     R3,R3,R5
   \   000000A6   0x3330             ADDS     R3,R3,#+48
   \   000000A8   0x7203             STRB     R3,[R0, #+8]
    340            time_buffer[9]=time_now.tm_mday%10+'0';
   \   000000AA   0x230A             MOVS     R3,#+10
   \   000000AC   0xFB91 0xF3F3      SDIV     R3,R1,R3
   \   000000B0   0xEB03 0x0583      ADD      R5,R3,R3, LSL #+2
   \   000000B4   0xEBA1 0x0145      SUB      R1,R1,R5, LSL #+1
   \   000000B8   0x3130             ADDS     R1,R1,#+48
   \   000000BA   0x7241             STRB     R1,[R0, #+9]
    341          
    342            time_buffer[11]=(time_now.tm_hour%100)/10+'0';
   \   000000BC   0x2364             MOVS     R3,#+100
   \   000000BE   0x68A1             LDR      R1,[R4, #+8]
   \   000000C0   0xFB91 0xF3F3      SDIV     R3,R1,R3
   \   000000C4   0xFB02 0x1313      MLS      R3,R2,R3,R1
   \   000000C8   0x250A             MOVS     R5,#+10
   \   000000CA   0xFB93 0xF3F5      SDIV     R3,R3,R5
   \   000000CE   0x3330             ADDS     R3,R3,#+48
   \   000000D0   0x72C3             STRB     R3,[R0, #+11]
    343            time_buffer[12]=time_now.tm_hour%10+'0';
   \   000000D2   0x230A             MOVS     R3,#+10
   \   000000D4   0xFB91 0xF3F3      SDIV     R3,R1,R3
   \   000000D8   0xEB03 0x0583      ADD      R5,R3,R3, LSL #+2
   \   000000DC   0xEBA1 0x0145      SUB      R1,R1,R5, LSL #+1
   \   000000E0   0x3130             ADDS     R1,R1,#+48
   \   000000E2   0x7301             STRB     R1,[R0, #+12]
    344          
    345            time_buffer[14]=(time_now.tm_min%100)/10+'0';
   \   000000E4   0x2364             MOVS     R3,#+100
   \   000000E6   0x6861             LDR      R1,[R4, #+4]
   \   000000E8   0xFB91 0xF3F3      SDIV     R3,R1,R3
   \   000000EC   0xFB02 0x1313      MLS      R3,R2,R3,R1
   \   000000F0   0x250A             MOVS     R5,#+10
   \   000000F2   0xFB93 0xF3F5      SDIV     R3,R3,R5
   \   000000F6   0x3330             ADDS     R3,R3,#+48
   \   000000F8   0x7383             STRB     R3,[R0, #+14]
    346            time_buffer[15]=time_now.tm_min%10+'0';
   \   000000FA   0x230A             MOVS     R3,#+10
   \   000000FC   0xFB91 0xF3F3      SDIV     R3,R1,R3
   \   00000100   0xEB03 0x0583      ADD      R5,R3,R3, LSL #+2
   \   00000104   0xEBA1 0x0145      SUB      R1,R1,R5, LSL #+1
   \   00000108   0x3130             ADDS     R1,R1,#+48
   \   0000010A   0x73C1             STRB     R1,[R0, #+15]
    347          
    348            time_buffer[17]=(time_now.tm_sec%100)/10+'0';
   \   0000010C   0x2364             MOVS     R3,#+100
   \   0000010E   0x6821             LDR      R1,[R4, #+0]
   \   00000110   0xFB91 0xF3F3      SDIV     R3,R1,R3
   \   00000114   0xFB02 0x1213      MLS      R2,R2,R3,R1
   \   00000118   0x230A             MOVS     R3,#+10
   \   0000011A   0xFB92 0xF2F3      SDIV     R2,R2,R3
   \   0000011E   0x3230             ADDS     R2,R2,#+48
   \   00000120   0x7442             STRB     R2,[R0, #+17]
    349            time_buffer[18]=time_now.tm_sec%10+'0';
   \   00000122   0x220A             MOVS     R2,#+10
   \   00000124   0xFB91 0xF2F2      SDIV     R2,R1,R2
   \   00000128   0xEB02 0x0382      ADD      R3,R2,R2, LSL #+2
   \   0000012C   0xEBA1 0x0143      SUB      R1,R1,R3, LSL #+1
   \   00000130   0x3130             ADDS     R1,R1,#+48
   \   00000132   0x7481             STRB     R1,[R0, #+18]
    350          
    351          
    352            return time_buffer;
   \   00000134   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    353          }
    354          
    355          /*******************************************************************************
    356          * Function Name  : Set_DateTime
    357          * Description    : 
    358          * Input          : CPU_INT08U *set_buffer
    359          * Output         : time_now
    360          * Return         : None
    361          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    362          void Set_DateTime(CPU_INT08U *set_buffer)
    363          {
   \                     Set_DateTime: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
    364            time_now.tm_year = (*set_buffer-'0')*1000+(*(set_buffer+1)-'0')*100+(*(set_buffer+2)-'0')*10+(*(set_buffer+3)-'0');
   \   00000004   0x7844             LDRB     R4,[R0, #+1]
   \   00000006   0x7802             LDRB     R2,[R0, #+0]
   \   00000008   0x....             LDR.N    R1,??DataTable4
   \   0000000A   0x2564             MOVS     R5,#+100
   \   0000000C   0xF44F 0x737A      MOV      R3,#+1000
   \   00000010   0x436C             MULS     R4,R5,R4
   \   00000012   0xFB03 0x4202      MLA      R2,R3,R2,R4
   \   00000016   0x7883             LDRB     R3,[R0, #+2]
   \   00000018   0xEB03 0x0483      ADD      R4,R3,R3, LSL #+2
   \   0000001C   0x78C3             LDRB     R3,[R0, #+3]
   \   0000001E   0xEB02 0x0244      ADD      R2,R2,R4, LSL #+1
   \   00000022   0x189A             ADDS     R2,R3,R2
   \   00000024   0x....             LDR.N    R3,??DataTable4_3  ;; 0xffff2fb0
   \   00000026   0x189A             ADDS     R2,R3,R2
   \   00000028   0x614A             STR      R2,[R1, #+20]
    365            time_now.tm_mon =  (*(set_buffer+5)-'0')*10+(*(set_buffer+6)-'0'-1);
   \   0000002A   0x7942             LDRB     R2,[R0, #+5]
   \   0000002C   0xEB02 0x0382      ADD      R3,R2,R2, LSL #+2
   \   00000030   0x7982             LDRB     R2,[R0, #+6]
   \   00000032   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   00000036   0xF2A2 0x2211      SUBW     R2,R2,#+529
   \   0000003A   0x610A             STR      R2,[R1, #+16]
    366            time_now.tm_mday = (*(set_buffer+8)-'0')*10+(*(set_buffer+9)-'0');
   \   0000003C   0x7A02             LDRB     R2,[R0, #+8]
   \   0000003E   0xEB02 0x0382      ADD      R3,R2,R2, LSL #+2
   \   00000042   0x7A42             LDRB     R2,[R0, #+9]
   \   00000044   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   00000048   0xF5A2 0x7204      SUB      R2,R2,#+528
   \   0000004C   0x60CA             STR      R2,[R1, #+12]
    367            time_now.tm_hour = (*(set_buffer+11)-'0')*10+(*(set_buffer+12)-'0');
   \   0000004E   0x7AC2             LDRB     R2,[R0, #+11]
   \   00000050   0xEB02 0x0382      ADD      R3,R2,R2, LSL #+2
   \   00000054   0x7B02             LDRB     R2,[R0, #+12]
   \   00000056   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   0000005A   0xF5A2 0x7204      SUB      R2,R2,#+528
   \   0000005E   0x608A             STR      R2,[R1, #+8]
    368            time_now.tm_min =  (*(set_buffer+14)-'0')*10+(*(set_buffer+15)-'0');
   \   00000060   0x7B82             LDRB     R2,[R0, #+14]
   \   00000062   0xEB02 0x0382      ADD      R3,R2,R2, LSL #+2
   \   00000066   0x7BC2             LDRB     R2,[R0, #+15]
   \   00000068   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   0000006C   0xF5A2 0x7204      SUB      R2,R2,#+528
   \   00000070   0x604A             STR      R2,[R1, #+4]
    369            time_now.tm_sec =  (*(set_buffer+17)-'0')*10+(*(set_buffer+18)-'0');
   \   00000072   0x7C42             LDRB     R2,[R0, #+17]
   \   00000074   0x7C80             LDRB     R0,[R0, #+18]
   \   00000076   0xEB02 0x0382      ADD      R3,R2,R2, LSL #+2
   \   0000007A   0xEB00 0x0043      ADD      R0,R0,R3, LSL #+1
   \   0000007E   0xF5A0 0x7004      SUB      R0,R0,#+528
   \   00000082   0x6008             STR      R0,[R1, #+0]
    370            Time_SetCalendarTime(time_now);
   \   00000084   0xB084             SUB      SP,SP,#+16
   \   00000086   0x4668             MOV      R0,SP
   \   00000088   0x222C             MOVS     R2,#+44
   \   0000008A   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000008E   0xBC0F             POP      {R0-R3}
   \   00000090   0x.... 0x....      BL       Time_SetCalendarTime
    371          }
   \   00000094   0xB007             ADD      SP,SP,#+28
   \   00000096   0xBD30             POP      {R4,R5,PC}       ;; return
    372          
    373          /*******************************************************************************
    374          * Function Name  : RTC_Configuration
    375          * Description    : 
    376          * Input          : None
    377          * Output         : None
    378          * Return         : None
    379          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    380          void RTC_Configuration(void)
    381          {
   \                     RTC_Configuration: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    382                  RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR | RCC_APB1Periph_BKP, ENABLE);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0xF04F 0x50C0      MOV      R0,#+402653184
   \   00000008   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
    383          
    384                  PWR_BackupAccessCmd(ENABLE);
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0x.... 0x....      BL       PWR_BackupAccessCmd
    385          
    386                  BKP_DeInit();
   \   00000012   0x.... 0x....      BL       BKP_DeInit
    387          
    388                  RCC_LSEConfig(RCC_LSE_ON);
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x.... 0x....      BL       RCC_LSEConfig
    389                  
    390                  while (RCC_GetFlagStatus(RCC_FLAG_LSERDY) == RESET);
   \                     ??RTC_Configuration_0: (+1)
   \   0000001C   0x2041             MOVS     R0,#+65
   \   0000001E   0x.... 0x....      BL       RCC_GetFlagStatus
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD0FA             BEQ.N    ??RTC_Configuration_0
    391          
    392                  RCC_RTCCLKConfig(RCC_RTCCLKSource_LSE);
   \   00000026   0xF44F 0x7080      MOV      R0,#+256
   \   0000002A   0x.... 0x....      BL       RCC_RTCCLKConfig
    393          
    394                  RCC_RTCCLKCmd(ENABLE);
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0x.... 0x....      BL       RCC_RTCCLKCmd
    395          
    396                  RTC_WaitForSynchro();
   \   00000034   0x.... 0x....      BL       RTC_WaitForSynchro
    397          
    398                  RTC_WaitForLastTask();
   \   00000038   0x.... 0x....      BL       RTC_WaitForLastTask
    399          
    400                  RTC_SetPrescaler(32767);
   \   0000003C   0xF647 0x70FF      MOVW     R0,#+32767
   \   00000040   0x.... 0x....      BL       RTC_SetPrescaler
    401          
    402                  RTC_WaitForLastTask();
   \   00000044   0x.... 0x....      BL       RTC_WaitForLastTask
    403          
    404                  RTC_ITConfig(RTC_IT_SEC, ENABLE);
   \   00000048   0x2101             MOVS     R1,#+1
   \   0000004A   0x2001             MOVS     R0,#+1
   \   0000004C   0x.... 0x....      BL       RTC_ITConfig
    405          
    406                  RTC_WaitForLastTask();
   \   00000050   0xE8BD 0x4001      POP      {R0,LR}
   \   00000054   0x.... 0x....      B.W      RTC_WaitForLastTask
    407          
    408                  return;
    409          }
    410          
    411          /*******************************************************************************
    412          * Function Name  : RTC_Config
    413          * Description    : 
    414          * Input          : None
    415          * Output         : None
    416          * Return         : None
    417          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    418          void RTC_Config(void)
    419          {
   \                     RTC_Config: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    420                  if (BKP_ReadBackupRegister(BKP_DR1) != 0xA5A5)
   \   00000002   0x2004             MOVS     R0,#+4
   \   00000004   0x.... 0x....      BL       BKP_ReadBackupRegister
   \   00000008   0xF24A 0x54A5      MOVW     R4,#+42405
   \   0000000C   0x42A0             CMP      R0,R4
   \   0000000E   0xD006             BEQ.N    ??RTC_Config_0
    421                  {
    422                          RTC_Configuration();
   \   00000010   0x.... 0x....      BL       RTC_Configuration
    423                          BKP_WriteBackupRegister(BKP_DR1, 0xA5A5);
   \   00000014   0x4621             MOV      R1,R4
   \   00000016   0x2004             MOVS     R0,#+4
   \   00000018   0x.... 0x....      BL       BKP_WriteBackupRegister
   \   0000001C   0xE013             B.N      ??RTC_Config_1
    424                  }
    425                  else
    426                  {
    427                          if (RCC_GetFlagStatus(RCC_FLAG_PORRST) != RESET)
   \                     ??RTC_Config_0: (+1)
   \   0000001E   0x207B             MOVS     R0,#+123
   \   00000020   0x.... 0x....      BL       RCC_GetFlagStatus
   \   00000024   0xB910             CBNZ.N   R0,??RTC_Config_2
    428                          {
    429                                  ;
    430                          }
    431                          else if (RCC_GetFlagStatus(RCC_FLAG_PINRST) != RESET)
   \   00000026   0x207A             MOVS     R0,#+122
   \   00000028   0x.... 0x....      BL       RCC_GetFlagStatus
    432                          {
    433                                  ;
    434                          }
    435                          RCC_ClearFlag();
   \                     ??RTC_Config_2: (+1)
   \   0000002C   0x.... 0x....      BL       RCC_ClearFlag
    436          
    437                          RCC_RTCCLKCmd(ENABLE);
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0x.... 0x....      BL       RCC_RTCCLKCmd
    438          
    439                          RTC_WaitForSynchro();
   \   00000036   0x.... 0x....      BL       RTC_WaitForSynchro
    440          
    441                          RTC_ITConfig(RTC_IT_SEC, ENABLE);
   \   0000003A   0x2101             MOVS     R1,#+1
   \   0000003C   0x2001             MOVS     R0,#+1
   \   0000003E   0x.... 0x....      BL       RTC_ITConfig
    442          
    443                          RTC_WaitForLastTask();
   \   00000042   0x.... 0x....      BL       RTC_WaitForLastTask
    444                  }
    445                  RCC_ClearFlag();
   \                     ??RTC_Config_1: (+1)
   \   00000046   0x.... 0x....      BL       RCC_ClearFlag
    446          
    447                  /* Enable PWR and BKP clocks */
    448                  RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR | RCC_APB1Periph_BKP, ENABLE);
   \   0000004A   0x2101             MOVS     R1,#+1
   \   0000004C   0xF04F 0x50C0      MOV      R0,#+402653184
   \   00000050   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
    449          
    450                  /* Allow access to BKP Domain */
    451                  PWR_BackupAccessCmd(ENABLE);
   \   00000054   0xE8BD 0x4010      POP      {R4,LR}
   \   00000058   0x2001             MOVS     R0,#+1
   \   0000005A   0x.... 0x....      B.W      PWR_BackupAccessCmd
    452          
    453                  return;
    454          }
    455          
    456          /*
    457          *********************************************************************************************************
    458          *                                       Disable RTC Interrupts
    459          *********************************************************************************************************
    460          */
    461          

   \                                 In section .text, align 2, keep-with-next
    462          void  RTC_IntDis (void)
    463          {
    464              RTC_ITConfig(RTC_IT_SEC, DISABLE);
   \                     RTC_IntDis: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x....             B.N      ?Subroutine1
    465          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x.... 0x....      B.W      RTC_ITConfig
    466          
    467          /*
    468          *********************************************************************************************************
    469          *                                       Enable RTC Interrupts
    470          *********************************************************************************************************
    471          */
    472          

   \                                 In section .text, align 2, keep-with-next
    473          void  RTC_IntEn (void)
    474          {
    475              RTC_ITConfig(RTC_IT_SEC, ENABLE);
   \                     RTC_IntEn: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002                      REQUIRE ?Subroutine1
   \   00000002                      ;; // Fall through to label ?Subroutine1
    476          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     time_now

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     time_buffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x00015180         DC32     0x15180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0xFFFF2FB0         DC32     0xffff2fb0
    477          
    478          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   Get_Time_Now
        16   -> RTC_GetCounter
        16   -> __aeabi_memcpy4
        16   -> __localtime32
       8   RTC_Config
         8   -> BKP_ReadBackupRegister
         8   -> BKP_WriteBackupRegister
         0   -> PWR_BackupAccessCmd
         8   -> RCC_APB1PeriphClockCmd
         8   -> RCC_ClearFlag
         8   -> RCC_GetFlagStatus
         8   -> RCC_RTCCLKCmd
         8   -> RTC_Configuration
         8   -> RTC_ITConfig
         8   -> RTC_WaitForLastTask
         8   -> RTC_WaitForSynchro
       8   RTC_Configuration
         8   -> BKP_DeInit
         8   -> PWR_BackupAccessCmd
         8   -> RCC_APB1PeriphClockCmd
         8   -> RCC_GetFlagStatus
         8   -> RCC_LSEConfig
         8   -> RCC_RTCCLKCmd
         8   -> RCC_RTCCLKConfig
         8   -> RTC_ITConfig
         8   -> RTC_SetPrescaler
         0   -> RTC_WaitForLastTask
         8   -> RTC_WaitForLastTask
         8   -> RTC_WaitForSynchro
       0   RTC_IntDis
         0   -> RTC_ITConfig
       0   RTC_IntEn
         0   -> RTC_ITConfig
      56   Set_DateTime
        40   -> Time_SetCalendarTime
        56   -> __aeabi_memcpy4
      24   Time_ConvCalendarToUnix
        24   -> __mktime32
      64   Time_ConvUSBRTC
        48   -> Time_SetCalendarTime
        64   -> __aeabi_memcpy4
      16   Time_ConvUnixToCalendar
        16   -> __aeabi_memcpy4
        16   -> __localtime32
      16   Time_GetCalendarTime
        16   -> RTC_GetCounter
        16   -> __aeabi_memcpy4
        16   -> __localtime32
       0   Time_GetUnixTime
         0   -> RTC_GetCounter
      72   Time_SetCalendarTime
        56   -> RTC_SetCounter
        56   -> RTC_WaitForLastTask
        56   -> Time_ConvCalendarToUnix
        72   -> __aeabi_memcpy4
       8   Time_SetUnixTime
         8   -> RTC_SetCounter
         0   -> RTC_WaitForLastTask
         8   -> RTC_WaitForLastTask
      64   adjustDST
        64   -> __aeabi_memcpy4
        48   -> isDST
       0   bcdToDec
      16   getDate
        16   -> RTC_GetCounter
        16   -> __aeabi_memcpy4
        16   -> __localtime32
      16   isDST


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
      24  ?Subroutine0
       6  ?Subroutine1
      12  Days_Table
     310  Get_Time_Now
      94  RTC_Config
      88  RTC_Configuration
       4  RTC_IntDis
       2  RTC_IntEn
     152  Set_DateTime
      24  Time_ConvCalendarToUnix
     252  Time_ConvUSBRTC
       8  Time_ConvUnixToCalendar
      14  Time_GetCalendarTime
       4  Time_GetUnixTime
      48  Time_SetCalendarTime
      22  Time_SetUnixTime
      38  adjustDST
      18  bcdToDec
     184  getDate
      50  isDST
      20  time_buffer
      44  time_now

 
    44 bytes in section .bss
    20 bytes in section .data
 1 370 bytes in section .text
 
 1 370 bytes of CODE memory
    64 bytes of DATA memory

Errors: none
Warnings: none
