###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       09/Feb/2018  16:14:55
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  E:\HW Projects\ControlHome\CntrHome - RF69w\uC-RF\fs20.c
#    Command line =  
#        "E:\HW Projects\ControlHome\CntrHome - RF69w\uC-RF\fs20.c" -lCN "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\Debug\List" -o "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\Debug\Obj" --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\APP\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\BSP\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\CPU\inc\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-CPU\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-RTC\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-LIB\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uCOS-II\Ports\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uCOS-II\Source\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\I2C-Out\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\Direct_Sw\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\Wdt_led\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-LCD\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-RF\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\api\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\config\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\os\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\fsl\fat\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\clib\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\lbl\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\device\mmc\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\file\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-Terminal\src\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-Terminal\inc\" -Oh
#    List file    =  
#        E:\HW Projects\ControlHome\CntrHome - RF69w\Debug\List\fs20.lst
#    Object file  =  
#        E:\HW Projects\ControlHome\CntrHome - RF69w\Debug\Obj\fs20.o
#
###############################################################################

E:\HW Projects\ControlHome\CntrHome - RF69w\uC-RF\fs20.c
      1          /*
      2          *********************************************************************************************************
      3          *                                           FS20 Interface
      4          *
      5          *
      6          *
      7          * Filename   : fs20.c
      8          * Version    : V1.00
      9          * Programmer : Puleo
     10          *********************************************************************************************************
     11          */
     12          
     13          #define  FS20_GLOBALS
     14          #include <includes.h>

   \                                 In section .bss, align 8
     15          
     16          #if RFM69CW_MODULE == DEF_ENABLED
     17          
     18          /*
     19          *********************************************************************************************************
     20          *                                               CONSTANTS
     21          *********************************************************************************************************
     22          */
     23          #define  FS20_UNKNOWN  0
     24          #define  FS20_T0       1
     25          #define  FS20_T1       2
     26          #define  FS20_OK       3
     27          #define  FS20_DONE     4
     28          
     29          #define  _BV(bit) (1 << (bit)) 
     30          #define  magic_byte    12
     31          
     32          /*
     33          *********************************************************************************************************
     34          *                                           LOCAL VARIABLES
     35          *********************************************************************************************************
     36          */
     37          
     38          INT8U  buf[10];                  // stored FS20 data ook868 poll(buf)
     39          INT16S width;
     40          INT8U  res1;
     41          INT16U res2 = 0;
     42          INT32S count;
     43          INT8U  sum;
     44          INT16U mask;
     45          
     46          INT8S  FHTNr;
     47          INT8S  TFNr;
     48          
     49          INT8U  FTHLcdStr[20];
     50          INT8U  TempBuf[10];
   \                     TempBuf:
   \   00000000                      DS8 12
   \   0000000C                      DS8 4
   \   __absolute struct <unnamed> FS20
   \                     FS20:
   \   00000010                      DS8 16
     51          INT8U  n;
   \                     n:
   \   00000020                      DS8 1
   \   00000021                      DS8 3
   \                     count:
   \   00000024                      DS8 4

   \                                 In section .bss, align 4
   \   __absolute struct <unnamed> FHTDev[7]
   \                     FHTDev:
   \   00000000                      DS8 36

   \                                 In section .bss, align 4
   \   __absolute struct <unnamed> TFDev[3]
   \                     TFDev:
   \   00000000                      DS8 16
   \   __absolute struct <unnamed> FHTTFPaar[3]
   \                     FHTTFPaar:
   \   00000010                      DS8 8
   \   __absolute INT8U FHTDevAct
   \                     FHTDevAct:
   \   00000018                      DS8 1
   \   __absolute INT8U TFDevAct
   \                     TFDevAct:
   \   00000019                      DS8 1
   \   __absolute INT8U FHTTFPaarAct
   \                     FHTTFPaarAct:
   \   0000001A                      DS8 1
   \   __absolute INT8U FHTLedVal
   \                     FHTLedVal:
   \   0000001B                      DS8 1
   \                     FHTNr:
   \   0000001C                      DS8 1
   \                     TFNr:
   \   0000001D                      DS8 1
   \   0000001E                      DS8 2
   \   __absolute INT8U logMsgTF[15]
   \                     logMsgTF:
   \   00000020                      DS8 16

   \                                 In section .bss, align 4
   \   __absolute struct <unnamed> FloorNum[4]
   \                     FloorNum:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
   \   __absolute struct <unnamed> FHTDevAccess[7]
   \                     FHTDevAccess:
   \   00000000                      DS8 16
   \   __absolute INT8U FHTLoadAct
   \                     FHTLoadAct:
   \   00000010                      DS8 1

   \                                 In section .bss, align 4
   \   __absolute struct <unnamed> TFDevAccess[3]
   \                     TFDevAccess:
   \   00000000                      DS8 12
   \   __absolute INT8U TFLoadAct
   \                     TFLoadAct:
   \   0000000C                      DS8 1

   \                                 In section .bss, align 4
   \   __absolute INT8U logMsg[15]
   \                     logMsg:
   \   00000000                      DS8 16

   \                                 In section .bss, align 4
   \                     sum:
   \   00000000                      DS8 1
   \   00000001                      DS8 3
   \                     buf:
   \   00000004                      DS8 12

   \                                 In section .bss, align 2
   \                     width:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
   \                     res1:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
   \                     res2:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     mask:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
   \                     FTHLcdStr:
   \   00000000                      DS8 20
     52          

   \                                 In section .bss, align 1
     53          INT8U tmp, tmp1;
   \                     tmp:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     tmp1:
   \   00000000                      DS8 1
     54          
     55          /*
     56          *********************************************************************************************************
     57          *                                      LOCAL FUNCTION PROTOTYPES
     58          *********************************************************************************************************
     59          */
     60          
     61          
     62          /*
     63          *********************************************************************************************************
     64          *                                              FS20_TimeISRHandler
     65          *
     66          * Description: This routine is called from the Rx interrupt service handler.
     67          *********************************************************************************************************
     68          */
     69          

   \                                 In section .text, align 2, keep-with-next
     70          void reset_FS20 (void) 
     71          {
     72            FS20.bits = -1;
     73            FS20.data = 0xFF;
   \                     reset_FS20: (+1)
   \   00000000   0x22FF             MOVS     R2,#+255
   \   00000002   0x2300             MOVS     R3,#+0
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable21
   \   00000008   0xF04F 0x31FF      MOV      R1,#-1
   \   0000000C   0xE9C0 0x2306      STRD     R2,R3,[R0, #+24]
   \   00000010   0x7401             STRB     R1,[R0, #+16]
     74            FS20.state = FS20_UNKNOWN;
   \   00000012   0x7443             STRB     R3,[R0, #+17]
     75          }
   \   00000014   0x4770             BX       LR               ;; return
     76          /*
     77          *********************************************************************************************************
     78          */

   \                                 In section .text, align 2, keep-with-next
     79          INT8U FS20_Setbit(INT8U bit)
     80          {
   \                     FS20_Setbit: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
     81            FS20.data = (FS20.data << 1) | bit;
   \   00000002   0x.... 0x....      LDR.W    R2,??DataTable21
     82            if (FS20.bits < 0 && (INT8U) FS20.data != 0x01)
   \   00000006   0xF992 0x3010      LDRSB    R3,[R2, #+16]
   \   0000000A   0xE9D2 0x4506      LDRD     R4,R5,[R2, #+24]
   \   0000000E   0x006D             LSLS     R5,R5,#+1
   \   00000010   0xEA45 0x75D4      ORR      R5,R5,R4, LSR #+31
   \   00000014   0xEA40 0x0044      ORR      R0,R0,R4, LSL #+1
   \   00000018   0xE9C2 0x0506      STRD     R0,R5,[R2, #+24]
   \   0000001C   0x2B00             CMP      R3,#+0
   \   0000001E   0xD502             BPL.N    ??FS20_Setbit_0
   \   00000020   0xB2C4             UXTB     R4,R0
   \   00000022   0x2C01             CMP      R4,#+1
   \   00000024   0xD106             BNE.N    ??FS20_Setbit_1
     83              return FS20_OK;
     84            if (++FS20.bits == 45 && ((FS20.data >> 15) & 1) == 0 || FS20.bits == 54 && ((FS20.data >> 24) & 1)){
   \                     ??FS20_Setbit_0: (+1)
   \   00000026   0x1C5B             ADDS     R3,R3,#+1
   \   00000028   0x7413             STRB     R3,[R2, #+16]
   \   0000002A   0xB25B             SXTB     R3,R3
   \   0000002C   0x2B2D             CMP      R3,#+45
   \   0000002E   0xD104             BNE.N    ??FS20_Setbit_2
   \   00000030   0x0400             LSLS     R0,R0,#+16
   \   00000032   0xD506             BPL.N    ??FS20_Setbit_3
     85              return FS20_DONE;
     86            }
     87            return FS20_OK;
   \                     ??FS20_Setbit_1: (+1)
   \   00000034   0xBC30             POP      {R4,R5}
   \   00000036   0x2003             MOVS     R0,#+3
   \   00000038   0x4770             BX       LR               ;; return
   \                     ??FS20_Setbit_2: (+1)
   \   0000003A   0x2B36             CMP      R3,#+54
   \   0000003C   0xD1FA             BNE.N    ??FS20_Setbit_1
   \   0000003E   0x01C0             LSLS     R0,R0,#+7
   \   00000040   0xD5F8             BPL.N    ??FS20_Setbit_1
   \                     ??FS20_Setbit_3: (+1)
   \   00000042   0xBC30             POP      {R4,R5}
   \   00000044   0x2004             MOVS     R0,#+4
   \   00000046   0x4770             BX       LR
     88          }
     89          /*
     90          *********************************************************************************************************
     91          *                                       INT8U ook868poll (void)
     92          *
     93          *    Poll and return a count > 0 when a valid packet has been received:
     94          *    5 = FS20 6 = FS20/FHT 
     95          *********************************************************************************************************
     96          */

   \                                 In section .text, align 2, keep-with-next
     97          INT8U ook868poll (void) 
     98          {
   \                     ook868poll: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
     99            INT8U len, i, b;
    100            
    101            if (FS20.state == FS20_DONE) {
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable21
   \   00000008   0x7C60             LDRB     R0,[R4, #+17]
   \   0000000A   0x2804             CMP      R0,#+4
   \   0000000C   0xD142             BNE.N    ??ook868poll_0
    102                len = FS20.bits / 9;
   \   0000000E   0xF994 0x0010      LDRSB    R0,[R4, #+16]
    103                sum = magic_byte;
    104                for (i = 0; i < len; i++) {
   \   00000012   0x.... 0x....      LDR.W    R5,??DataTable21_1
   \   00000016   0x2109             MOVS     R1,#+9
   \   00000018   0xFB90 0xF8F1      SDIV     R8,R0,R1
   \   0000001C   0x260C             MOVS     R6,#+12
   \   0000001E   0x2700             MOVS     R7,#+0
   \   00000020   0xFA5F 0xF888      UXTB     R8,R8
   \   00000024   0xF1B8 0x0F01      CMP      R8,#+1
   \   00000028   0xEB08 0x0905      ADD      R9,R8,R5
   \   0000002C   0xDB13             BLT.N    ??ook868poll_1
   \   0000002E   0xF109 0x0A03      ADD      R10,R9,#+3
   \   00000032   0xF04F 0x0B01      MOV      R11,#+1
    105                  b = FS20.data >> (1 + 9 * i);
   \                     ??ook868poll_2: (+1)
   \   00000036   0xE9D4 0x0106      LDRD     R0,R1,[R4, #+24]
   \   0000003A   0x465A             MOV      R2,R11
   \   0000003C   0x.... 0x....      BL       __aeabi_llsr
    106                  buf[len-i-1] = b;
   \   00000040   0xF88A 0x0000      STRB     R0,[R10, #+0]
    107                  if (i > 0)
   \   00000044   0xB107             CBZ.N    R7,??ook868poll_3
    108                    sum += b;
   \   00000046   0x1986             ADDS     R6,R0,R6
    109                }
   \                     ??ook868poll_3: (+1)
   \   00000048   0x1C7F             ADDS     R7,R7,#+1
   \   0000004A   0x4547             CMP      R7,R8
   \   0000004C   0xF10B 0x0B09      ADD      R11,R11,#+9
   \   00000050   0xF1AA 0x0A01      SUB      R10,R10,#+1
   \   00000054   0xDBEF             BLT.N    ??ook868poll_2
   \                     ??ook868poll_1: (+1)
   \   00000056   0x702E             STRB     R6,[R5, #+0]
    110                
    111                if (sum == buf[len-1]) {
   \   00000058   0x20FF             MOVS     R0,#+255
   \   0000005A   0xF899 0x2003      LDRB     R2,[R9, #+3]
   \   0000005E   0x782E             LDRB     R6,[R5, #+0]
   \   00000060   0x2100             MOVS     R1,#+0
   \   00000062   0x4296             CMP      R6,R2
   \   00000064   0xF04F 0x33FF      MOV      R3,#-1
   \   00000068   0xD10F             BNE.N    ??ook868poll_4
    112                   reset_FS20();
    113                  if(FS20.prev != buf[len-1]){
   \   0000006A   0x7CA6             LDRB     R6,[R4, #+18]
   \   0000006C   0x7423             STRB     R3,[R4, #+16]
   \   0000006E   0xE9C4 0x0106      STRD     R0,R1,[R4, #+24]
   \   00000072   0x4296             CMP      R6,R2
   \   00000074   0x7461             STRB     R1,[R4, #+17]
   \   00000076   0xD008             BEQ.N    ??ook868poll_4
    114                    FS20.prev = buf[len-1];
   \   00000078   0x74A2             STRB     R2,[R4, #+18]
    115                    memcpy(TempBuf,buf,10);
   \   0000007A   0x1D29             ADDS     R1,R5,#+4
   \   0000007C   0x220A             MOVS     R2,#+10
   \   0000007E   0x4620             MOV      R0,R4
   \   00000080   0x.... 0x....      BL       __aeabi_memcpy4
    116                    return len;
   \   00000084   0x4640             MOV      R0,R8
   \   00000086   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}
    117                  }
    118                }
    119                     
    120                FS20.prev = 0;
    121                reset_FS20();
   \                     ??ook868poll_4: (+1)
   \   0000008A   0xE9C4 0x0106      STRD     R0,R1,[R4, #+24]
   \   0000008E   0x74A1             STRB     R1,[R4, #+18]
   \   00000090   0x7423             STRB     R3,[R4, #+16]
   \   00000092   0x7461             STRB     R1,[R4, #+17]
    122            }
    123            return 0;
   \                     ??ook868poll_0: (+1)
   \   00000094   0x2000             MOVS     R0,#+0
   \   00000096   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}   ;; return
    124          }
    125          /*
    126          *********************************************************************************************************
    127          */

   \                                 In section .text, align 2, keep-with-next
    128          void  FS20_TimeISRHandler (void)
    129          {
    130            if (FS20.state != FS20_DONE)
   \                     FS20_TimeISRHandler: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable21
   \   00000004   0x7C41             LDRB     R1,[R0, #+17]
   \   00000006   0x2904             CMP      R1,#+4
   \   00000008   0xD007             BEQ.N    ??FS20_TimeISRHandler_0
    131              reset_FS20();
   \   0000000A   0x22FF             MOVS     R2,#+255
   \   0000000C   0x2300             MOVS     R3,#+0
   \   0000000E   0xE9C0 0x2306      STRD     R2,R3,[R0, #+24]
   \   00000012   0xF04F 0x31FF      MOV      R1,#-1
   \   00000016   0x7401             STRB     R1,[R0, #+16]
   \   00000018   0x7443             STRB     R3,[R0, #+17]
    132          }
   \                     ??FS20_TimeISRHandler_0: (+1)
   \   0000001A   0x4770             BX       LR               ;; return
    133          
    134          /*
    135          *********************************************************************************************************
    136          *                                              FS20_ISRHandler
    137          *
    138          * Description: This routine is called from the Rx interrupt service handler.
    139          *********************************************************************************************************
    140          */
    141          

   \                                 In section .text, align 2, keep-with-next
    142          void  FS20_ISRHandler (void)
    143          {
   \                     FS20_ISRHandler: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    144              
    145              // see http://fhz4linux.info/tiki-index.php?page=FS20%20Protocol
    146              count = Free_TmrRd ();
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable21
   \   00000006   0x.... 0x....      BL       Free_TmrRd
   \   0000000A   0x6260             STR      R0,[R4, #+36]
    147              TIM_SetCounter(TIM1, 0);
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable21_2  ;; 0x40012c00
   \   00000012   0x.... 0x....      BL       TIM_SetCounter
   \   00000016   0x7C60             LDRB     R0,[R4, #+17]
   \   00000018   0x2804             CMP      R0,#+4
   \   0000001A   0xD050             BEQ.N    ??FS20_ISRHandler_0
    148              
    149              if (FS20.state != FS20_DONE)    
    150              {
    151                //  1uS  puls length 300 - 500  gemiddelde pulselengte is 400uS volgens specs FS
    152                if (count > 300  && count < 500 )
   \   0000001C   0x6A62             LDR      R2,[R4, #+36]
   \   0000001E   0xF2A2 0x112D      SUBW     R1,R2,#+301
   \   00000022   0x29C7             CMP      R1,#+199
   \   00000024   0xD221             BCS.N    ??FS20_ISRHandler_1
    153                {
    154                  if (FS20.state == FS20_T0)
   \   00000026   0x2801             CMP      R0,#+1
   \   00000028   0xD11D             BNE.N    ??FS20_ISRHandler_2
    155                    FS20.state=FS20_Setbit(0x00);                      //ready or done
   \   0000002A   0xE9D4 0x0106      LDRD     R0,R1,[R4, #+24]
   \   0000002E   0x0049             LSLS     R1,R1,#+1
   \   00000030   0xEA41 0x71D0      ORR      R1,R1,R0, LSR #+31
   \   00000034   0x0040             LSLS     R0,R0,#+1
   \   00000036   0xF994 0x3010      LDRSB    R3,[R4, #+16]
   \   0000003A   0xE9C4 0x0106      STRD     R0,R1,[R4, #+24]
   \   0000003E   0x2B00             CMP      R3,#+0
   \   00000040   0xD502             BPL.N    ??FS20_ISRHandler_3
   \   00000042   0xB2C5             UXTB     R5,R0
   \   00000044   0x2D01             CMP      R5,#+1
   \   00000046   0xD106             BNE.N    ??FS20_ISRHandler_4
   \                     ??FS20_ISRHandler_3: (+1)
   \   00000048   0x1C5B             ADDS     R3,R3,#+1
   \   0000004A   0x7423             STRB     R3,[R4, #+16]
   \   0000004C   0xB25B             SXTB     R3,R3
   \   0000004E   0x2B2D             CMP      R3,#+45
   \   00000050   0xD103             BNE.N    ??FS20_ISRHandler_5
   \   00000052   0x0400             LSLS     R0,R0,#+16
   \   00000054   0xD505             BPL.N    ??FS20_ISRHandler_6
   \                     ??FS20_ISRHandler_4: (+1)
   \   00000056   0x2003             MOVS     R0,#+3
   \   00000058   0xE006             B.N      ??FS20_ISRHandler_7
   \                     ??FS20_ISRHandler_5: (+1)
   \   0000005A   0x2B36             CMP      R3,#+54
   \   0000005C   0xD1FB             BNE.N    ??FS20_ISRHandler_4
   \   0000005E   0x01C0             LSLS     R0,R0,#+7
   \   00000060   0xD5F9             BPL.N    ??FS20_ISRHandler_4
   \                     ??FS20_ISRHandler_6: (+1)
   \   00000062   0x2004             MOVS     R0,#+4
   \   00000064   0xE000             B.N      ??FS20_ISRHandler_7
    156                  else
    157                    FS20.state = FS20_T0;
   \                     ??FS20_ISRHandler_2: (+1)
   \   00000066   0x2001             MOVS     R0,#+1
   \                     ??FS20_ISRHandler_7: (+1)
   \   00000068   0x7460             STRB     R0,[R4, #+17]
    158                }
    159          
    160                //  1uS  pulse length 500 - 700 gemiddelde pulselengte is 600uS  volgens Specs FS
    161                if (count > 500 && count < 700 )
   \                     ??FS20_ISRHandler_1: (+1)
   \   0000006A   0xF2A2 0x10F5      SUBW     R0,R2,#+501
   \   0000006E   0x28C7             CMP      R0,#+199
   \   00000070   0xD229             BCS.N    ??FS20_ISRHandler_8
    162                {
    163                   if (FS20.state == FS20_T1)
   \   00000072   0x7C60             LDRB     R0,[R4, #+17]
   \   00000074   0x2802             CMP      R0,#+2
   \   00000076   0xD11F             BNE.N    ??FS20_ISRHandler_9
    164                     FS20.state=FS20_Setbit(0x01);
   \   00000078   0xE9D4 0x0106      LDRD     R0,R1,[R4, #+24]
   \   0000007C   0x0049             LSLS     R1,R1,#+1
   \   0000007E   0xEA41 0x71D0      ORR      R1,R1,R0, LSR #+31
   \   00000082   0x0040             LSLS     R0,R0,#+1
   \   00000084   0xF040 0x0001      ORR      R0,R0,#0x1
   \   00000088   0xF994 0x2010      LDRSB    R2,[R4, #+16]
   \   0000008C   0xE9C4 0x0106      STRD     R0,R1,[R4, #+24]
   \   00000090   0x2A00             CMP      R2,#+0
   \   00000092   0xD502             BPL.N    ??FS20_ISRHandler_10
   \   00000094   0xB2C3             UXTB     R3,R0
   \   00000096   0x2B01             CMP      R3,#+1
   \   00000098   0xD106             BNE.N    ??FS20_ISRHandler_11
   \                     ??FS20_ISRHandler_10: (+1)
   \   0000009A   0x1C52             ADDS     R2,R2,#+1
   \   0000009C   0x7422             STRB     R2,[R4, #+16]
   \   0000009E   0xB252             SXTB     R2,R2
   \   000000A0   0x2A2D             CMP      R2,#+45
   \   000000A2   0xD103             BNE.N    ??FS20_ISRHandler_12
   \   000000A4   0x0400             LSLS     R0,R0,#+16
   \   000000A6   0xD505             BPL.N    ??FS20_ISRHandler_13
   \                     ??FS20_ISRHandler_11: (+1)
   \   000000A8   0x2003             MOVS     R0,#+3
   \   000000AA   0xE006             B.N      ??FS20_ISRHandler_14
   \                     ??FS20_ISRHandler_12: (+1)
   \   000000AC   0x2A36             CMP      R2,#+54
   \   000000AE   0xD1FB             BNE.N    ??FS20_ISRHandler_11
   \   000000B0   0x01C0             LSLS     R0,R0,#+7
   \   000000B2   0xD5F9             BPL.N    ??FS20_ISRHandler_11
   \                     ??FS20_ISRHandler_13: (+1)
   \   000000B4   0x2004             MOVS     R0,#+4
   \   000000B6   0xE000             B.N      ??FS20_ISRHandler_14
    165                   else
    166                      FS20.state = FS20_T1;
   \                     ??FS20_ISRHandler_9: (+1)
   \   000000B8   0x2002             MOVS     R0,#+2
   \                     ??FS20_ISRHandler_14: (+1)
   \   000000BA   0x7460             STRB     R0,[R4, #+17]
   \   000000BC   0xBD31             POP      {R0,R4,R5,PC}
    167                }
    168                
    169              }else{
    170                  n = ook868poll();
   \                     ??FS20_ISRHandler_0: (+1)
   \   000000BE   0x.... 0x....      BL       ook868poll
   \   000000C2   0xF884 0x0020      STRB     R0,[R4, #+32]
    171              }   
    172          }
   \                     ??FS20_ISRHandler_8: (+1)
   \   000000C6   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    173          
    174          /*
    175          *********************************************************************************************************
    176          */
    177          #if (FS_MODULE == DEF_ENABLED)

   \                                 In section .text, align 2, keep-with-next
    178          void PaarLoad(void)
    179          {
   \                     PaarLoad: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
    180            INT8U i;
    181          
    182            i            = 0;
   \   00000002   0x2400             MOVS     R4,#+0
    183            FHTTFPaarAct = 0;
   \   00000004   0x2500             MOVS     R5,#+0
   \   00000006   0x.... 0x....      LDR.W    R6,??DataTable21_3
   \   0000000A   0x.... 0x....      LDR.W    R7,??DataTable21_4
   \                     ??PaarLoad_0: (+1)
   \   0000000E   0x19A1             ADDS     R1,R4,R6
   \   00000010   0xB2ED             UXTB     R5,R5
   \   00000012   0x780A             LDRB     R2,[R1, #+0]
   \   00000014   0xEB02 0x0382      ADD      R3,R2,R2, LSL #+2
   \   00000018   0x784A             LDRB     R2,[R1, #+1]
   \   0000001A   0xEB07 0x0045      ADD      R0,R7,R5, LSL #+1
   \   0000001E   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   00000022   0x3A10             SUBS     R2,R2,#+16
   \   00000024   0x7402             STRB     R2,[R0, #+16]
    184            
    185            do{
    186                FHTTFPaar[FHTTFPaarAct].hc1 = (FileBuffer[i] - 0x30)*10 + (FileBuffer[i+1] - 0x30);
    187                FHTTFPaar[FHTTFPaarAct].idx = (FileBuffer[i+3] - 0x30)*10 + (FileBuffer[i+4] - 0x30);
    188                i += 6;
   \   00000026   0x1DA4             ADDS     R4,R4,#+6
   \   00000028   0x78CA             LDRB     R2,[R1, #+3]
   \   0000002A   0x7909             LDRB     R1,[R1, #+4]
   \   0000002C   0xEB02 0x0382      ADD      R3,R2,R2, LSL #+2
   \   00000030   0xEB01 0x0143      ADD      R1,R1,R3, LSL #+1
   \   00000034   0x3910             SUBS     R1,R1,#+16
   \   00000036   0x7441             STRB     R1,[R0, #+17]
    189                FHTTFPaarAct += 1;
    190            }while(i < strlen((char*)FileBuffer)-3);
   \   00000038   0x4630             MOV      R0,R6
   \   0000003A   0x.... 0x....      BL       strlen
   \   0000003E   0xB2E4             UXTB     R4,R4
   \   00000040   0x1C6D             ADDS     R5,R5,#+1
   \   00000042   0x1EC0             SUBS     R0,R0,#+3
   \   00000044   0x4284             CMP      R4,R0
   \   00000046   0xD3E2             BCC.N    ??PaarLoad_0
   \   00000048   0x76BD             STRB     R5,[R7, #+26]
    191          }
   \   0000004A   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    192          #endif
    193          /*
    194          *********************************************************************************************************
    195          */
    196          #if (FS_MODULE == DEF_ENABLED)

   \                                 In section .text, align 2, keep-with-next
    197          void TFDevLoad(void)
    198          {
   \                     TFDevLoad: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
    199            INT8U i;
    200          
    201            i             = 0;
   \   00000004   0x2400             MOVS     R4,#+0
    202            TFLoadAct     = 0;
   \   00000006   0x2500             MOVS     R5,#+0
   \   00000008   0x2664             MOVS     R6,#+100
   \   0000000A   0x.... 0x....      LDR.W    R7,??DataTable21_5
   \   0000000E   0x.... 0x....      LDR.W    R8,??DataTable21_3
    203            do{
    204                TFDevAccess[TFLoadAct].hc1 = (FileBuffer[i] - 0x30)*10 + (FileBuffer[i+1] - 0x30);
   \                     ??TFDevLoad_0: (+1)
   \   00000012   0xEB04 0x0108      ADD      R1,R4,R8
   \   00000016   0xB2ED             UXTB     R5,R5
   \   00000018   0x780A             LDRB     R2,[R1, #+0]
   \   0000001A   0xEB02 0x0382      ADD      R3,R2,R2, LSL #+2
   \   0000001E   0x784A             LDRB     R2,[R1, #+1]
   \   00000020   0xEB05 0x0045      ADD      R0,R5,R5, LSL #+1
   \   00000024   0x19C0             ADDS     R0,R0,R7
   \   00000026   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   0000002A   0x3A10             SUBS     R2,R2,#+16
   \   0000002C   0x7002             STRB     R2,[R0, #+0]
    205                TFDevAccess[TFLoadAct].hc2 = ((FileBuffer[i+3] - 0x30)*100) + ((FileBuffer[i+4] - 0x30)*10) + (FileBuffer[i+5] - 0x30);
    206                TFDevAccess[TFLoadAct].hc3 = (FileBuffer[i+7] - 0x30)*10 + (FileBuffer[i+8] - 0x30);
    207              
    208                i += 10;
   \   0000002E   0x340A             ADDS     R4,R4,#+10
   \   00000030   0x790B             LDRB     R3,[R1, #+4]
   \   00000032   0x78CA             LDRB     R2,[R1, #+3]
   \   00000034   0xEB03 0x0C83      ADD      R12,R3,R3, LSL #+2
   \   00000038   0xEA4F 0x034C      LSL      R3,R12,#+1
   \   0000003C   0xFB06 0x3202      MLA      R2,R6,R2,R3
   \   00000040   0x794B             LDRB     R3,[R1, #+5]
   \   00000042   0x189A             ADDS     R2,R3,R2
   \   00000044   0x3230             ADDS     R2,R2,#+48
   \   00000046   0x7042             STRB     R2,[R0, #+1]
   \   00000048   0xB2E4             UXTB     R4,R4
   \   0000004A   0x79CA             LDRB     R2,[R1, #+7]
   \   0000004C   0x7A09             LDRB     R1,[R1, #+8]
   \   0000004E   0xEB02 0x0382      ADD      R3,R2,R2, LSL #+2
   \   00000052   0xEB01 0x0143      ADD      R1,R1,R3, LSL #+1
   \   00000056   0x3910             SUBS     R1,R1,#+16
   \   00000058   0x7081             STRB     R1,[R0, #+2]
    209                TFLoadAct += 1;
    210            }while(i < strlen((char*)FileBuffer)-3);
   \   0000005A   0x4640             MOV      R0,R8
   \   0000005C   0x.... 0x....      BL       strlen
   \   00000060   0x1C6D             ADDS     R5,R5,#+1
   \   00000062   0x1EC0             SUBS     R0,R0,#+3
   \   00000064   0x4284             CMP      R4,R0
   \   00000066   0xD3D4             BCC.N    ??TFDevLoad_0
   \   00000068   0x733D             STRB     R5,[R7, #+12]
    211          }
   \   0000006A   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    212          #endif
    213          /*
    214          *********************************************************************************************************
    215          */
    216          #if (FS_MODULE == DEF_ENABLED)

   \                                 In section .text, align 2, keep-with-next
    217          void FHTDevLoad(void)
    218          {
   \                     FHTDevLoad: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
    219            INT8U i;
    220          
    221            i          = 0;
   \   00000002   0x2400             MOVS     R4,#+0
    222            FHTLoadAct = 0;
   \   00000004   0x2500             MOVS     R5,#+0
   \   00000006   0x.... 0x....      LDR.W    R6,??DataTable21_6
   \   0000000A   0x.... 0x....      LDR.W    R7,??DataTable21_3
    223            
    224            do{
    225                FHTDevAccess[FHTLoadAct].hc1 = (FileBuffer[i] - 0x30)*10 + (FileBuffer[i+1] - 0x30);
   \                     ??FHTDevLoad_0: (+1)
   \   0000000E   0x19E0             ADDS     R0,R4,R7
   \   00000010   0xB2ED             UXTB     R5,R5
   \   00000012   0x7801             LDRB     R1,[R0, #+0]
   \   00000014   0xEB01 0x0281      ADD      R2,R1,R1, LSL #+2
   \   00000018   0x7841             LDRB     R1,[R0, #+1]
   \   0000001A   0xEB01 0x0142      ADD      R1,R1,R2, LSL #+1
   \   0000001E   0x3910             SUBS     R1,R1,#+16
   \   00000020   0xF806 0x1015      STRB     R1,[R6, R5, LSL #+1]
    226                FHTDevAccess[FHTLoadAct].hc2 = (FileBuffer[i+3] - 0x30)*10 + (FileBuffer[i+4] - 0x30);;
    227              
    228                i += 7;
   \   00000024   0x1DE4             ADDS     R4,R4,#+7
   \   00000026   0x78C1             LDRB     R1,[R0, #+3]
   \   00000028   0x7900             LDRB     R0,[R0, #+4]
   \   0000002A   0xEB01 0x0281      ADD      R2,R1,R1, LSL #+2
   \   0000002E   0xEB00 0x0042      ADD      R0,R0,R2, LSL #+1
   \   00000032   0xEB06 0x0145      ADD      R1,R6,R5, LSL #+1
   \   00000036   0x3810             SUBS     R0,R0,#+16
   \   00000038   0x7048             STRB     R0,[R1, #+1]
   \   0000003A   0xB2E4             UXTB     R4,R4
    229                FHTLoadAct += 1;
    230            }while(i < strlen((char*)FileBuffer)-3);
   \   0000003C   0x4638             MOV      R0,R7
   \   0000003E   0x.... 0x....      BL       strlen
   \   00000042   0x1C6D             ADDS     R5,R5,#+1
   \   00000044   0x1EC0             SUBS     R0,R0,#+3
   \   00000046   0x4284             CMP      R4,R0
   \   00000048   0xD3E1             BCC.N    ??FHTDevLoad_0
   \   0000004A   0x7435             STRB     R5,[R6, #+16]
    231          }
   \   0000004C   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    232          #endif
    233          /*
    234          *********************************************************************************************************
    235          */
    236          static void TFDevClear(void)
    237          {
    238            INT8U i;
    239            
    240            for (i=0; i < TFmaxDev; i++)
    241              {
    242                TFDev[i].hc1 = 0x00;
    243                TFDev[i].hc2 = 0x00;
    244                TFDev[i].hc3 = 0x00;
    245                TFDev[i].command = 0x00;
    246                TFDev[i].lastVal = 0x00;
    247              }
    248              
    249            TFDevAct = 0x00;
    250          }
    251          
    252          /*
    253          *********************************************************************************************************
    254          */
    255          
    256          static void FHTDevClear(void)
    257          {
    258            INT8U i;
    259            
    260            for (i=0; i < maxDevices; i++)
    261              {
    262                FHTDev[i].hc1 = 0x00;
    263                FHTDev[i].hc2 = 0x00;
    264                FHTDev[i].command = 0x00;
    265                FHTDev[i].extension = 0x00;
    266                FHTDev[i].lastVal = 0x00;
    267              }
    268              
    269            FHTDevAct = 0x00;
    270          }
    271          
    272          /*
    273          *********************************************************************************************************
    274          */
    275          
    276          static void FloorClear(void)
    277          {
    278            INT8U i;
    279            
    280            for (i=0; i < maxFloor; i++)
    281              {
    282                FloorNum[i].devAct = 0x00;
    283                FloorNum[i].value = 0x00;
    284              }
    285          }
    286          
    287          
    288          /*
    289          *********************************************************************************************************
    290          */

   \                                 In section .text, align 2, keep-with-next
    291          void InitStructs(void){
    292            TFDevClear();
   \                     InitStructs: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable21_4
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x6001             STR      R1,[R0, #+0]
   \   00000008   0x6041             STR      R1,[R0, #+4]
   \   0000000A   0x6081             STR      R1,[R0, #+8]
   \   0000000C   0x8181             STRH     R1,[R0, #+12]
   \   0000000E   0x7381             STRB     R1,[R0, #+14]
    293            FHTDevClear();
   \   00000010   0x2200             MOVS     R2,#+0
   \   00000012   0x.... 0x....      LDR.W    R1,??DataTable21_7
   \   00000016   0x600A             STR      R2,[R1, #+0]
   \   00000018   0x604A             STR      R2,[R1, #+4]
   \   0000001A   0x608A             STR      R2,[R1, #+8]
   \   0000001C   0x60CA             STR      R2,[R1, #+12]
   \   0000001E   0x610A             STR      R2,[R1, #+16]
   \   00000020   0x614A             STR      R2,[R1, #+20]
   \   00000022   0x618A             STR      R2,[R1, #+24]
   \   00000024   0x61CA             STR      R2,[R1, #+28]
   \   00000026   0x840A             STRH     R2,[R1, #+32]
   \   00000028   0x3121             ADDS     R1,R1,#+33
   \   0000002A   0x704A             STRB     R2,[R1, #+1]
   \   0000002C   0x8302             STRH     R2,[R0, #+24]
    294            FloorClear();
   \   0000002E   0x.... 0x....      LDR.W    R1,??DataTable21_8
   \   00000032   0x70CA             STRB     R2,[R1, #+3]
   \   00000034   0x710A             STRB     R2,[R1, #+4]
   \   00000036   0x810A             STRH     R2,[R1, #+8]
   \   00000038   0x734A             STRB     R2,[R1, #+13]
   \   0000003A   0x738A             STRB     R2,[R1, #+14]
   \   0000003C   0x824A             STRH     R2,[R1, #+18]
    295            FHTLedVal = 0;
   \   0000003E   0x76C2             STRB     R2,[R0, #+27]
    296          }
   \   00000040   0x4770             BX       LR               ;; return
    297          /*
    298          *********************************************************************************************************
    299          */
    300          

   \                                 In section .text, align 2, keep-with-next
    301          INT8S TFDevEnabled(INT8U hc1, INT8U hc2, INT8U hc3)
    302          {
   \                     TFDevEnabled: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
    303            INT8U i;
    304            
    305            if ((hc1 == 0x00) && (hc2 == 0x00) && (hc3 == 0x00))
   \   00000002   0xEA41 0x0300      ORR      R3,R1,R0
   \   00000006   0x4313             ORRS     R3,R2,R3
   \   00000008   0xD01D             BEQ.N    ??TFDevEnabled_0
    306                return -1;
    307            
    308            for (i=0; i < TFmaxDev; i++)
   \   0000000A   0x.... 0x....      LDR.W    R4,??DataTable21_5
    309              if ((TFDevAccess[i].hc1 == hc1) && (TFDevAccess[i].hc2 == hc2) && (TFDevAccess[i].hc3 == hc3))
   \   0000000E   0x7825             LDRB     R5,[R4, #+0]
   \   00000010   0x2300             MOVS     R3,#+0
   \   00000012   0x4285             CMP      R5,R0
   \   00000014   0xBF01             ITTTT    EQ 
   \   00000016   0x7865             LDRBEQ   R5,[R4, #+1]
   \   00000018   0x428D             CMPEQ    R5,R1
   \   0000001A   0x78A5             LDRBEQ   R5,[R4, #+2]
   \   0000001C   0x4295             CMPEQ    R5,R2
   \   0000001E   0xD100             BNE.N    ??TFDevEnabled_1
    310                return i;
   \                     ??TFDevEnabled_2: (+1)
   \   00000020   0x....             B.N      ?Subroutine1
   \                     ??TFDevEnabled_1: (+1)
   \   00000022   0x78E5             LDRB     R5,[R4, #+3]
   \   00000024   0x2301             MOVS     R3,#+1
   \   00000026   0x4285             CMP      R5,R0
   \   00000028   0xBF01             ITTTT    EQ 
   \   0000002A   0x7925             LDRBEQ   R5,[R4, #+4]
   \   0000002C   0x428D             CMPEQ    R5,R1
   \   0000002E   0x7965             LDRBEQ   R5,[R4, #+5]
   \   00000030   0x4295             CMPEQ    R5,R2
   \   00000032   0xD0F5             BEQ.N    ??TFDevEnabled_2
   \   00000034   0x79A5             LDRB     R5,[R4, #+6]
   \   00000036   0x2302             MOVS     R3,#+2
   \   00000038   0x4285             CMP      R5,R0
   \   0000003A   0xBF01             ITTTT    EQ 
   \   0000003C   0x79E0             LDRBEQ   R0,[R4, #+7]
   \   0000003E   0x4288             CMPEQ    R0,R1
   \   00000040   0x7A20             LDRBEQ   R0,[R4, #+8]
   \   00000042   0x4290             CMPEQ    R0,R2
   \   00000044   0xD0EC             BEQ.N    ??TFDevEnabled_2
    311            return -1;
   \                     ??TFDevEnabled_0: (+1)
   \   00000046   0x....             B.N      ?Subroutine0
    312          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0xBC30             POP      {R4,R5}
   \   00000002   0x4618             MOV      R0,R3
   \   00000004   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0xBC30             POP      {R4,R5}
   \                     ??Subroutine0_0: (+1)
   \   00000002   0xF04F 0x30FF      MOV      R0,#-1
   \   00000006   0x4770             BX       LR               ;; return
    313          
    314          /*
    315          *********************************************************************************************************
    316          */
    317          

   \                                 In section .text, align 2, keep-with-next
    318          INT8S FHTDevEnabled(INT8U hc1, INT8U hc2)
    319          {
   \                     FHTDevEnabled: (+1)
   \   00000000   0xB410             PUSH     {R4}
    320            INT8U i;
    321            
    322            for (i=0; i < maxDevices; i++)
   \   00000002   0x.... 0x....      LDR.W    R3,??DataTable21_6
    323              if (FHTDevAccess[i].hc1 == hc1 && FHTDevAccess[i].hc2 == hc2)
   \   00000006   0x781C             LDRB     R4,[R3, #+0]
   \   00000008   0x2200             MOVS     R2,#+0
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xBF04             ITT      EQ 
   \   0000000E   0x785C             LDRBEQ   R4,[R3, #+1]
   \   00000010   0x428C             CMPEQ    R4,R1
   \   00000012   0xD100             BNE.N    ??FHTDevEnabled_0
    324                return i;
   \                     ??FHTDevEnabled_1: (+1)
   \   00000014   0x....             B.N      ?Subroutine2
   \                     ??FHTDevEnabled_0: (+1)
   \   00000016   0x789C             LDRB     R4,[R3, #+2]
   \   00000018   0x2201             MOVS     R2,#+1
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xBF04             ITT      EQ 
   \   0000001E   0x78DC             LDRBEQ   R4,[R3, #+3]
   \   00000020   0x428C             CMPEQ    R4,R1
   \   00000022   0xD0F7             BEQ.N    ??FHTDevEnabled_1
   \   00000024   0x791C             LDRB     R4,[R3, #+4]
   \   00000026   0x2202             MOVS     R2,#+2
   \   00000028   0x4284             CMP      R4,R0
   \   0000002A   0xBF04             ITT      EQ 
   \   0000002C   0x795C             LDRBEQ   R4,[R3, #+5]
   \   0000002E   0x428C             CMPEQ    R4,R1
   \   00000030   0xD0F0             BEQ.N    ??FHTDevEnabled_1
   \   00000032   0x799C             LDRB     R4,[R3, #+6]
   \   00000034   0x2203             MOVS     R2,#+3
   \   00000036   0x4284             CMP      R4,R0
   \   00000038   0xBF04             ITT      EQ 
   \   0000003A   0x79DC             LDRBEQ   R4,[R3, #+7]
   \   0000003C   0x428C             CMPEQ    R4,R1
   \   0000003E   0xD0E9             BEQ.N    ??FHTDevEnabled_1
   \   00000040   0x7A1C             LDRB     R4,[R3, #+8]
   \   00000042   0x2204             MOVS     R2,#+4
   \   00000044   0x4284             CMP      R4,R0
   \   00000046   0xBF04             ITT      EQ 
   \   00000048   0x7A5C             LDRBEQ   R4,[R3, #+9]
   \   0000004A   0x428C             CMPEQ    R4,R1
   \   0000004C   0xD0E2             BEQ.N    ??FHTDevEnabled_1
   \   0000004E   0x7A9C             LDRB     R4,[R3, #+10]
   \   00000050   0x2205             MOVS     R2,#+5
   \   00000052   0x4284             CMP      R4,R0
   \   00000054   0xBF04             ITT      EQ 
   \   00000056   0x7ADC             LDRBEQ   R4,[R3, #+11]
   \   00000058   0x428C             CMPEQ    R4,R1
   \   0000005A   0xD0DB             BEQ.N    ??FHTDevEnabled_1
   \   0000005C   0x7B1C             LDRB     R4,[R3, #+12]
   \   0000005E   0x2206             MOVS     R2,#+6
   \   00000060   0x4284             CMP      R4,R0
   \   00000062   0xBF04             ITT      EQ 
   \   00000064   0x7B58             LDRBEQ   R0,[R3, #+13]
   \   00000066   0x4288             CMPEQ    R0,R1
   \   00000068   0xD0D4             BEQ.N    ??FHTDevEnabled_1
    325            return -1;
   \   0000006A   0xBC10             POP      {R4}
   \   0000006C   0x....             B.N      ??Subroutine0_0
    326          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \   00000000   0xBC10             POP      {R4}
   \   00000002   0x4610             MOV      R0,R2
   \   00000004   0x4770             BX       LR
    327          
    328          /*
    329          *********************************************************************************************************
    330          */
    331          

   \                                 In section .text, align 2, keep-with-next
    332          INT8S TFDevNr(INT8U hc1, INT8U hc2, INT8U hc3)
    333          {
   \                     TFDevNr: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
    334            INT8U i;
    335            
    336            for (i=0; i < TFmaxDev; i++)
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable21_4
    337              if (TFDev[i].hc1 == hc1 && TFDev[i].hc2 == hc2 && TFDev[i].hc3 == hc3)
   \   00000006   0x7825             LDRB     R5,[R4, #+0]
   \   00000008   0x2300             MOVS     R3,#+0
   \   0000000A   0x4285             CMP      R5,R0
   \   0000000C   0xBF01             ITTTT    EQ 
   \   0000000E   0x7865             LDRBEQ   R5,[R4, #+1]
   \   00000010   0x428D             CMPEQ    R5,R1
   \   00000012   0x78A5             LDRBEQ   R5,[R4, #+2]
   \   00000014   0x4295             CMPEQ    R5,R2
   \   00000016   0xD100             BNE.N    ??TFDevNr_0
    338                return i;
   \                     ??TFDevNr_1: (+1)
   \   00000018   0x....             B.N      ?Subroutine1
   \                     ??TFDevNr_0: (+1)
   \   0000001A   0x7965             LDRB     R5,[R4, #+5]
   \   0000001C   0x2301             MOVS     R3,#+1
   \   0000001E   0x4285             CMP      R5,R0
   \   00000020   0xBF01             ITTTT    EQ 
   \   00000022   0x79A5             LDRBEQ   R5,[R4, #+6]
   \   00000024   0x428D             CMPEQ    R5,R1
   \   00000026   0x79E5             LDRBEQ   R5,[R4, #+7]
   \   00000028   0x4295             CMPEQ    R5,R2
   \   0000002A   0xD0F5             BEQ.N    ??TFDevNr_1
   \   0000002C   0x7AA5             LDRB     R5,[R4, #+10]
   \   0000002E   0x2302             MOVS     R3,#+2
   \   00000030   0x4285             CMP      R5,R0
   \   00000032   0xBF01             ITTTT    EQ 
   \   00000034   0x7AE0             LDRBEQ   R0,[R4, #+11]
   \   00000036   0x4288             CMPEQ    R0,R1
   \   00000038   0x7B20             LDRBEQ   R0,[R4, #+12]
   \   0000003A   0x4290             CMPEQ    R0,R2
   \   0000003C   0xD0EC             BEQ.N    ??TFDevNr_1
    339            return -1;
   \   0000003E   0x....             B.N      ?Subroutine0
    340          }
    341          
    342          /*
    343          *********************************************************************************************************
    344          */
    345          

   \                                 In section .text, align 2, keep-with-next
    346          INT8S FHTDevNr(INT8U hc1, INT8U hc2)
    347          {
   \                     FHTDevNr: (+1)
   \   00000000   0xB410             PUSH     {R4}
    348            INT8U i;
    349            
    350            //Speicherplatz durch hc finden
    351            for (i=0; i < maxDevices; i++)
   \   00000002   0x.... 0x....      LDR.W    R3,??DataTable21_7
    352              if (FHTDev[i].hc1 == hc1 && FHTDev[i].hc2 == hc2)
   \   00000006   0x781C             LDRB     R4,[R3, #+0]
   \   00000008   0x2200             MOVS     R2,#+0
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xBF04             ITT      EQ 
   \   0000000E   0x785C             LDRBEQ   R4,[R3, #+1]
   \   00000010   0x428C             CMPEQ    R4,R1
   \   00000012   0xD100             BNE.N    ??FHTDevNr_0
    353                return i;
   \                     ??FHTDevNr_1: (+1)
   \   00000014   0x....             B.N      ?Subroutine2
   \                     ??FHTDevNr_0: (+1)
   \   00000016   0x795C             LDRB     R4,[R3, #+5]
   \   00000018   0x2201             MOVS     R2,#+1
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xBF04             ITT      EQ 
   \   0000001E   0x799C             LDRBEQ   R4,[R3, #+6]
   \   00000020   0x428C             CMPEQ    R4,R1
   \   00000022   0xD0F7             BEQ.N    ??FHTDevNr_1
   \   00000024   0x7A9C             LDRB     R4,[R3, #+10]
   \   00000026   0x2202             MOVS     R2,#+2
   \   00000028   0x4284             CMP      R4,R0
   \   0000002A   0xBF04             ITT      EQ 
   \   0000002C   0x7ADC             LDRBEQ   R4,[R3, #+11]
   \   0000002E   0x428C             CMPEQ    R4,R1
   \   00000030   0xD0F0             BEQ.N    ??FHTDevNr_1
   \   00000032   0x7BDC             LDRB     R4,[R3, #+15]
   \   00000034   0x2203             MOVS     R2,#+3
   \   00000036   0x4284             CMP      R4,R0
   \   00000038   0xBF04             ITT      EQ 
   \   0000003A   0x7C1C             LDRBEQ   R4,[R3, #+16]
   \   0000003C   0x428C             CMPEQ    R4,R1
   \   0000003E   0xD0E9             BEQ.N    ??FHTDevNr_1
   \   00000040   0x7D1C             LDRB     R4,[R3, #+20]
   \   00000042   0x2204             MOVS     R2,#+4
   \   00000044   0x4284             CMP      R4,R0
   \   00000046   0xBF04             ITT      EQ 
   \   00000048   0x7D5C             LDRBEQ   R4,[R3, #+21]
   \   0000004A   0x428C             CMPEQ    R4,R1
   \   0000004C   0xD0E2             BEQ.N    ??FHTDevNr_1
   \   0000004E   0x7E5C             LDRB     R4,[R3, #+25]
   \   00000050   0x2205             MOVS     R2,#+5
   \   00000052   0x4284             CMP      R4,R0
   \   00000054   0xBF04             ITT      EQ 
   \   00000056   0x7E9C             LDRBEQ   R4,[R3, #+26]
   \   00000058   0x428C             CMPEQ    R4,R1
   \   0000005A   0xD0DB             BEQ.N    ??FHTDevNr_1
   \   0000005C   0x7F9C             LDRB     R4,[R3, #+30]
   \   0000005E   0x2206             MOVS     R2,#+6
   \   00000060   0x4284             CMP      R4,R0
   \   00000062   0xBF04             ITT      EQ 
   \   00000064   0x7FD8             LDRBEQ   R0,[R3, #+31]
   \   00000066   0x4288             CMPEQ    R0,R1
   \   00000068   0xD0D4             BEQ.N    ??FHTDevNr_1
    354            return -1;
   \   0000006A   0xBC10             POP      {R4}
   \   0000006C   0x....             B.N      ??Subroutine0_0
    355          }
    356          
    357          /*
    358          *********************************************************************************************************
    359          */
    360          

   \                                 In section .text, align 2, keep-with-next
    361          void TFValue(INT8U Nr)
    362          {  
    363            switch ( TFDev[Nr].command )
   \                     TFValue: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable21_4
   \   00000002   0xEB00 0x0080      ADD      R0,R0,R0, LSL #+2
   \   00000006   0x1840             ADDS     R0,R0,R1
   \   00000008   0x78C1             LDRB     R1,[R0, #+3]
   \   0000000A   0x2901             CMP      R1,#+1
   \   0000000C   0xBF16             ITET     NE 
   \   0000000E   0x2981             CMPNE    R1,#+129
   \   00000010   0x2101             MOVEQ    R1,#+1
   \   00000012   0x2100             MOVNE    R1,#+0
    364            {
    365                case 0x01:
    366                  TFDev[Nr].lastVal = 1;
    367                  break;
    368                case 0x02:
    369                  TFDev[Nr].lastVal = 0;
    370                  break;
    371                case 0x81:
    372                  TFDev[Nr].lastVal = 1;
    373                  break;
    374                case 0x82:
    375                  TFDev[Nr].lastVal = 0;
    376                  break;
    377                default:
    378                  TFDev[Nr].lastVal = 0;
   \   00000014   0x7101             STRB     R1,[R0, #+4]
    379                  break;
    380            }
    381          }
   \   00000016   0x4770             BX       LR               ;; return
    382          
    383          /*
    384          *********************************************************************************************************
    385          */
    386          

   \                                 In section .text, align 2, keep-with-next
    387          void FHTValue(INT8U Nr)
    388          {  
    389            switch ( FHTDev[Nr].command & 0x0F)
   \                     FHTValue: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable21_7
   \   00000002   0xEB00 0x0080      ADD      R0,R0,R0, LSL #+2
   \   00000006   0x1840             ADDS     R0,R0,R1
   \   00000008   0x7881             LDRB     R1,[R0, #+2]
   \   0000000A   0xF001 0x010F      AND      R1,R1,#0xF
   \   0000000E   0x2901             CMP      R1,#+1
   \   00000010   0xD00B             BEQ.N    ??FHTValue_0
   \   00000012   0x2906             CMP      R1,#+6
   \   00000014   0xD10B             BNE.N    ??FHTValue_1
    390            {
    391                case 0x01:
    392                  FHTDev[Nr].lastVal = 1;
    393                  break;
    394                case 0x02:
    395                  FHTDev[Nr].lastVal = 0;
    396                  break;
    397                case 0x06:
    398                  FHTDev[Nr].lastVal = 0;
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0x7101             STRB     R1,[R0, #+4]
    399                  if ((FHTDev[Nr].extension * 100) / 255 > 5)
   \   0000001A   0x2264             MOVS     R2,#+100
   \   0000001C   0x78C1             LDRB     R1,[R0, #+3]
   \   0000001E   0x4351             MULS     R1,R2,R1
   \   00000020   0x22FF             MOVS     R2,#+255
   \   00000022   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   00000026   0x2906             CMP      R1,#+6
   \   00000028   0xDB03             BLT.N    ??FHTValue_2
    400                    FHTDev[Nr].lastVal = 1;
   \                     ??FHTValue_0: (+1)
   \   0000002A   0x2101             MOVS     R1,#+1
   \   0000002C   0xE000             B.N      ??FHTValue_3
    401                  break;
    402                default:
    403                  FHTDev[Nr].lastVal = 0;
   \                     ??FHTValue_1: (+1)
   \   0000002E   0x2100             MOVS     R1,#+0
   \                     ??FHTValue_3: (+1)
   \   00000030   0x7101             STRB     R1,[R0, #+4]
    404                  break;
    405            }
    406          }
   \                     ??FHTValue_2: (+1)
   \   00000032   0x4770             BX       LR               ;; return
    407          
    408          /*
    409          *********************************************************************************************************
    410          */

   \                                 In section .text, align 2, keep-with-next
    411          INT8S TFFloor(INT8U FHTNr)
    412          {
   \                     TFFloor: (+1)
   \   00000000   0xB4F0             PUSH     {R4-R7}
    413            INT8U i, TFPaar, TFvalue, FHTpaar;
    414            INT8S TFdev;
    415            INT8S ret;
    416            
    417            ret = -1;
    418            
    419            if(TFDevAct != 0){
   \   00000002   0x....             LDR.N    R3,??DataTable21_4
   \   00000004   0x7E5C             LDRB     R4,[R3, #+25]
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xF04F 0x32FF      MOV      R2,#-1
   \   0000000C   0xBF1C             ITT      NE 
   \   0000000E   0x7E9C             LDRBNE   R4,[R3, #+26]
   \   00000010   0x2C00             CMPNE    R4,#+0
   \   00000012   0x4611             MOV      R1,R2
    420              for(i=0; i < FHTTFPaarAct; i++){
   \   00000014   0xD034             BEQ.N    ??TFFloor_0
    421                TFPaar = FHTTFPaar[i].idx;
   \   00000016   0x7C59             LDRB     R1,[R3, #+17]
    422                TFdev = TFDevNr(TFDevAccess[TFPaar].hc1, TFDevAccess[TFPaar].hc2, TFDevAccess[TFPaar].hc3);
   \   00000018   0x....             LDR.N    R4,??DataTable21_5
   \   0000001A   0x781F             LDRB     R7,[R3, #+0]
   \   0000001C   0xEB01 0x0141      ADD      R1,R1,R1, LSL #+1
   \   00000020   0x190D             ADDS     R5,R1,R4
   \   00000022   0x78A9             LDRB     R1,[R5, #+2]
   \   00000024   0x786C             LDRB     R4,[R5, #+1]
   \   00000026   0x782E             LDRB     R6,[R5, #+0]
   \   00000028   0x2500             MOVS     R5,#+0
   \   0000002A   0x42B7             CMP      R7,R6
   \   0000002C   0xBF01             ITTTT    EQ 
   \   0000002E   0x785F             LDRBEQ   R7,[R3, #+1]
   \   00000030   0x42A7             CMPEQ    R7,R4
   \   00000032   0x789F             LDRBEQ   R7,[R3, #+2]
   \   00000034   0x428F             CMPEQ    R7,R1
   \   00000036   0xD011             BEQ.N    ??TFFloor_1
   \   00000038   0x795F             LDRB     R7,[R3, #+5]
   \   0000003A   0x2501             MOVS     R5,#+1
   \   0000003C   0x42B7             CMP      R7,R6
   \   0000003E   0xBF01             ITTTT    EQ 
   \   00000040   0x799F             LDRBEQ   R7,[R3, #+6]
   \   00000042   0x42A7             CMPEQ    R7,R4
   \   00000044   0x79DF             LDRBEQ   R7,[R3, #+7]
   \   00000046   0x428F             CMPEQ    R7,R1
   \   00000048   0xD008             BEQ.N    ??TFFloor_1
   \   0000004A   0x7A9F             LDRB     R7,[R3, #+10]
   \   0000004C   0x2502             MOVS     R5,#+2
   \   0000004E   0x42B7             CMP      R7,R6
   \   00000050   0xBF01             ITTTT    EQ 
   \   00000052   0x7ADE             LDRBEQ   R6,[R3, #+11]
   \   00000054   0x42A6             CMPEQ    R6,R4
   \   00000056   0x7B1C             LDRBEQ   R4,[R3, #+12]
   \   00000058   0x428C             CMPEQ    R4,R1
   \   0000005A   0xD100             BNE.N    ??TFFloor_2
   \                     ??TFFloor_1: (+1)
   \   0000005C   0x462A             MOV      R2,R5
    423                if ( TFdev == -1){
   \                     ??TFFloor_2: (+1)
   \   0000005E   0xF112 0x0F01      CMN      R2,#+1
   \   00000062   0xD006             BEQ.N    ??TFFloor_3
    424                  return ret;
    425                }else{
    426                  TFvalue = TFDev[TFdev].lastVal;
    427                }
    428                
    429                FHTpaar = FHTTFPaar[i].hc1;
    430                if( FHTpaar != FHTDev[FHTNr].hc1){
   \   00000064   0x....             LDR.N    R4,??DataTable21_7
   \   00000066   0x7C19             LDRB     R1,[R3, #+16]
   \   00000068   0xEB00 0x0080      ADD      R0,R0,R0, LSL #+2
   \   0000006C   0x5D00             LDRB     R0,[R0, R4]
   \   0000006E   0x4281             CMP      R1,R0
   \   00000070   0xD001             BEQ.N    ??TFFloor_4
    431                  return ret;
   \                     ??TFFloor_3: (+1)
   \   00000072   0xBCF0             POP      {R4-R7}
   \   00000074   0x....             B.N      ??Subroutine0_0
    432                }else{
    433                  ret = TFvalue;
   \                     ??TFFloor_4: (+1)
   \   00000076   0xEB02 0x0082      ADD      R0,R2,R2, LSL #+2
   \   0000007A   0x18C0             ADDS     R0,R0,R3
   \   0000007C   0xF990 0x1004      LDRSB    R1,[R0, #+4]
    434                  break;
    435                }
    436              }
    437            }
    438            return ret;
   \                     ??TFFloor_0: (+1)
   \   00000080   0xBCF0             POP      {R4-R7}
   \   00000082   0x4608             MOV      R0,R1
   \   00000084   0x4770             BX       LR               ;; return
    439          }
    440          /*
    441          *********************************************************************************************************
    442          */

   \                                 In section .text, align 2, keep-with-next
    443          void FHTFloor(INT8U Nr)
    444          {
   \                     FHTFloor: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
    445            INT8U i, j, value, FTvalue;
    446          
    447            FHTValue(Nr);
   \   00000004   0x.... 0x....      BL       FHTValue
    448          
    449            for (i=0; i < maxFloor; i++)
   \   00000008   0x....             LDR.N    R5,??DataTable21_4
   \   0000000A   0x.... 0x....      LDR.W    R10,??DataTable21_8
   \   0000000E   0x7EEE             LDRB     R6,[R5, #+27]
   \   00000010   0x.... 0x....      LDR.W    R9,??DataTable21_7
   \   00000014   0x2400             MOVS     R4,#+0
   \   00000016   0x4657             MOV      R7,R10
   \   00000018   0xF04F 0x0801      MOV      R8,#+1
    450            {
    451              value = 0;
    452              for (j=0; j < FloorNum[i].devAct ; j++)
   \                     ??FHTFloor_0: (+1)
   \   0000001C   0x78F9             LDRB     R1,[R7, #+3]
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0xB199             CBZ.N    R1,??FHTFloor_1
   \   00000022   0xEB04 0x0284      ADD      R2,R4,R4, LSL #+2
   \   00000026   0x4452             ADD      R2,R2,R10
   \   00000028   0x4639             MOV      R1,R7
   \   0000002A   0x78D2             LDRB     R2,[R2, #+3]
    453              {
    454                value += FHTDev[ FloorNum[i].devNum[j] ].lastVal;
   \                     ??FHTFloor_2: (+1)
   \   0000002C   0xF811 0x3B01      LDRB     R3,[R1], #+1
   \   00000030   0xEB03 0x0383      ADD      R3,R3,R3, LSL #+2
   \   00000034   0x444B             ADD      R3,R3,R9
   \   00000036   0x791B             LDRB     R3,[R3, #+4]
   \   00000038   0x1818             ADDS     R0,R3,R0
    455              }
   \   0000003A   0x1E52             SUBS     R2,R2,#+1
   \   0000003C   0xB2C0             UXTB     R0,R0
   \   0000003E   0xD1F5             BNE.N    ??FHTFloor_2
    456              
    457              if ( value > 0 )
   \   00000040   0xB118             CBZ.N    R0,??FHTFloor_1
    458              {
    459                FHTLedVal |= (0x01<<i);                    // Setting a bit
   \   00000042   0xFA08 0xF004      LSL      R0,R8,R4
   \   00000046   0x4306             ORRS     R6,R0,R6
   \   00000048   0xE002             B.N      ??FHTFloor_3
    460              }else
    461              {
    462                FHTLedVal &= ~(0x01<<i);                   // Clearing a bit
   \                     ??FHTFloor_1: (+1)
   \   0000004A   0xFA08 0xF004      LSL      R0,R8,R4
   \   0000004E   0x4386             BICS     R6,R6,R0
    463              }
    464              
    465              FTvalue = TFFloor(FloorNum[i].devNum[0]);
    466              
    467              switch (FTvalue){
   \                     ??FHTFloor_3: (+1)
   \   00000050   0x7838             LDRB     R0,[R7, #+0]
   \   00000052   0x.... 0x....      BL       TFFloor
   \   00000056   0xB2C0             UXTB     R0,R0
   \   00000058   0xB110             CBZ.N    R0,??FHTFloor_4
   \   0000005A   0x2801             CMP      R0,#+1
   \   0000005C   0xD005             BEQ.N    ??FHTFloor_5
   \   0000005E   0xE00D             B.N      ??FHTFloor_6
    468              case 0:
    469                FHTLedVal &= ~(0x01<<(i+4));               // Clearing a red bit
   \                     ??FHTFloor_4: (+1)
   \   00000060   0x1D20             ADDS     R0,R4,#+4
   \   00000062   0xFA08 0xF000      LSL      R0,R8,R0
   \   00000066   0x4386             BICS     R6,R6,R0
    470                break;
   \   00000068   0xE008             B.N      ??FHTFloor_6
    471              case 1:
    472                FHTLedVal &= ~(0x01<<i);                   // Clearing a green bit
    473                FHTLedVal |= (0x01<<(i+4));                // Setting a red bit
   \                     ??FHTFloor_5: (+1)
   \   0000006A   0xFA08 0xF004      LSL      R0,R8,R4
   \   0000006E   0x1D21             ADDS     R1,R4,#+4
   \   00000070   0xEA26 0x0000      BIC      R0,R6,R0
   \   00000074   0xFA08 0xF101      LSL      R1,R8,R1
   \   00000078   0xEA41 0x0600      ORR      R6,R1,R0
    474                break;
    475              }
    476            } 
   \                     ??FHTFloor_6: (+1)
   \   0000007C   0x1C64             ADDS     R4,R4,#+1
   \   0000007E   0x1D7F             ADDS     R7,R7,#+5
   \   00000080   0x2C04             CMP      R4,#+4
   \   00000082   0xDBCB             BLT.N    ??FHTFloor_0
   \   00000084   0x76EE             STRB     R6,[R5, #+27]
    477          }
   \   00000086   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    478          /*
    479          *********************************************************************************************************
    480          */

   \                                 In section .text, align 2, keep-with-next
    481          void TFScan(INT8U hc1, INT8U hc2, INT8U hc3, INT8U hc4)
    482          {
   \                     TFScan: (+1)
   \   00000000   0xE92D 0x47FC      PUSH     {R2-R10,LR}
   \   00000004   0x4604             MOV      R4,R0
    483            logMsgTF[0] ='\0';
   \   00000006   0x....             LDR.N    R7,??DataTable21_4
    484            sprintf((char*)logMsgTF," %02d %03d %02d %02d\r\n\0", 0x63,0x63,0x63,0x63);    // 99 099 99 99
   \   00000008   0x.... 0x....      ADR.W    R8,?_0
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0xF887 0x0020      STRB     R0,[R7, #+32]
   \   00000012   0x4689             MOV      R9,R1
   \   00000014   0x2063             MOVS     R0,#+99
   \   00000016   0x9001             STR      R0,[SP, #+4]
   \   00000018   0x9000             STR      R0,[SP, #+0]
   \   0000001A   0x4616             MOV      R6,R2
   \   0000001C   0x461D             MOV      R5,R3
   \   0000001E   0x2363             MOVS     R3,#+99
   \   00000020   0x2263             MOVS     R2,#+99
   \   00000022   0x4641             MOV      R1,R8
   \   00000024   0xF107 0x0020      ADD      R0,R7,#+32
   \   00000028   0x.... 0x....      BL       sprintf
    485            
    486            TFNr = TFDevNr(hc1, hc2, hc3);
   \   0000002C   0x4632             MOV      R2,R6
   \   0000002E   0x4649             MOV      R1,R9
   \   00000030   0x4620             MOV      R0,R4
   \   00000032   0x.... 0x....      BL       TFDevNr
   \   00000036   0x4682             MOV      R10,R0
   \   00000038   0xF887 0xA01D      STRB     R10,[R7, #+29]
    487            
    488            if( TFDevEnabled( hc1, hc2, hc3) != -1)
   \   0000003C   0x4632             MOV      R2,R6
   \   0000003E   0x4649             MOV      R1,R9
   \   00000040   0x4620             MOV      R0,R4
   \   00000042   0x.... 0x....      BL       TFDevEnabled
   \   00000046   0xF110 0x0F01      CMN      R0,#+1
   \   0000004A   0xD022             BEQ.N    ??TFScan_0
    489            {
    490              if (TFNr == -1)
   \   0000004C   0xF11A 0x0F01      CMN      R10,#+1
   \   00000050   0xD10A             BNE.N    ??TFScan_1
    491              {
    492                TFDev[TFDevAct].hc1    = hc1;
   \   00000052   0x7E78             LDRB     R0,[R7, #+25]
   \   00000054   0xEB00 0x0180      ADD      R1,R0,R0, LSL #+2
   \   00000058   0x19C9             ADDS     R1,R1,R7
   \   0000005A   0x700C             STRB     R4,[R1, #+0]
    493                TFDev[TFDevAct].hc2    = hc2;
   \   0000005C   0xF881 0x9001      STRB     R9,[R1, #+1]
    494                TFDev[TFDevAct].hc3    = hc3;
   \   00000060   0x708E             STRB     R6,[R1, #+2]
    495                TFNr = TFDevAct;
   \   00000062   0x7778             STRB     R0,[R7, #+29]
    496                TFDevAct++;
   \   00000064   0x1C40             ADDS     R0,R0,#+1
   \   00000066   0x7678             STRB     R0,[R7, #+25]
    497              }  
    498                  
    499              if ( TFDev[TFNr].command != hc4 )
   \                     ??TFScan_1: (+1)
   \   00000068   0xF997 0x001D      LDRSB    R0,[R7, #+29]
   \   0000006C   0xEB00 0x0180      ADD      R1,R0,R0, LSL #+2
   \   00000070   0x19C9             ADDS     R1,R1,R7
   \   00000072   0x78CA             LDRB     R2,[R1, #+3]
   \   00000074   0x42AA             CMP      R2,R5
   \   00000076   0xD026             BEQ.N    ??TFScan_2
    500              {
    501                TFDev[TFNr].command = hc4;
   \   00000078   0x70CD             STRB     R5,[R1, #+3]
    502                TFValue(TFNr);
   \   0000007A   0xB2C0             UXTB     R0,R0
   \   0000007C   0x.... 0x....      BL       TFValue
    503                
    504                logMsg[0] ='\0';
   \   00000080   0x....             LDR.N    R0,??DataTable21_9
   \   00000082   0x2100             MOVS     R1,#+0
   \   00000084   0x7001             STRB     R1,[R0, #+0]
    505                sprintf((char*)logMsg," %02d %03d %02d %02d\r\n\0", hc1,hc2,hc3,hc4);
   \   00000086   0x9501             STR      R5,[SP, #+4]
   \   00000088   0x9600             STR      R6,[SP, #+0]
   \   0000008A   0x464B             MOV      R3,R9
   \   0000008C   0x4622             MOV      R2,R4
   \   0000008E   0x4641             MOV      R1,R8
   \   00000090   0xE017             B.N      ??TFScan_3
    506              }
    507            }else{
    508                
    509              if ((hc1 != 0x00) && (hc2 != 0x00) && (hc3 != 0x00))
   \                     ??TFScan_0: (+1)
   \   00000092   0x2C00             CMP      R4,#+0
   \   00000094   0xBF18             IT       NE 
   \   00000096   0xF1B9 0x0F00      CMPNE    R9,#+0
   \   0000009A   0xD014             BEQ.N    ??TFScan_2
   \   0000009C   0xB19E             CBZ.N    R6,??TFScan_2
    510              {
    511                if ((hc4 == 0x82) || (hc4 == 0x81) || (hc4 == 0x02) || (hc4 == 0x01))
   \   0000009E   0x2D82             CMP      R5,#+130
   \   000000A0   0xBF18             IT       NE 
   \   000000A2   0x2D81             CMPNE    R5,#+129
   \   000000A4   0xD003             BEQ.N    ??TFScan_4
   \   000000A6   0x2D02             CMP      R5,#+2
   \   000000A8   0xBF18             IT       NE 
   \   000000AA   0x2D01             CMPNE    R5,#+1
   \   000000AC   0xD10B             BNE.N    ??TFScan_2
    512                {
    513                  logMsgTF[0] ='\0';
   \                     ??TFScan_4: (+1)
   \   000000AE   0x2000             MOVS     R0,#+0
   \   000000B0   0xF887 0x0020      STRB     R0,[R7, #+32]
    514                  sprintf((char*)logMsgTF," %02d %03d %02d %02d\r\n\0", hc1,hc2,hc3,hc4);
   \   000000B4   0x9501             STR      R5,[SP, #+4]
   \   000000B6   0x9600             STR      R6,[SP, #+0]
   \   000000B8   0x464B             MOV      R3,R9
   \   000000BA   0x4622             MOV      R2,R4
   \   000000BC   0x4641             MOV      R1,R8
   \   000000BE   0xF107 0x0020      ADD      R0,R7,#+32
   \                     ??TFScan_3: (+1)
   \   000000C2   0x.... 0x....      BL       sprintf
    515                }
    516              }    
    517            }
    518          }
   \                     ??TFScan_2: (+1)
   \   000000C6   0xE8BD 0x87F3      POP      {R0,R1,R4-R10,PC}  ;; return
    519          
    520          /*
    521          *********************************************************************************************************
    522          */

   \                                 In section .text, align 2, keep-with-next
    523          void FHTScan(INT8U hc1, INT8U hc2, INT8U hc4, INT8U hc5)
    524          {
   \                     FHTScan: (+1)
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \   00000004   0xB083             SUB      SP,SP,#+12
   \   00000006   0x4604             MOV      R4,R0
   \   00000008   0x4688             MOV      R8,R1
   \   0000000A   0x4616             MOV      R6,R2
   \   0000000C   0x461F             MOV      R7,R3
    525          
    526            FHTNr = FHTDevNr(hc1, hc2);
   \   0000000E   0x.... 0x....      BL       FHTDevNr
   \   00000012   0x....             LDR.N    R5,??DataTable21_4
   \   00000014   0x4681             MOV      R9,R0
   \   00000016   0xF885 0x901C      STRB     R9,[R5, #+28]
    527            
    528            if( FHTDevEnabled(hc1, hc2) != -1 )
   \   0000001A   0x4641             MOV      R1,R8
   \   0000001C   0x4620             MOV      R0,R4
   \   0000001E   0x.... 0x....      BL       FHTDevEnabled
   \   00000022   0xF110 0x0F01      CMN      R0,#+1
   \   00000026   0xD03F             BEQ.N    ??FHTScan_0
    529            {
    530              if (FHTNr == -1)
   \   00000028   0xF119 0x0F01      CMN      R9,#+1
   \   0000002C   0xD11C             BNE.N    ??FHTScan_1
    531                {
    532                  FHTDev[FHTDevAct].hc1    = hc1;
   \   0000002E   0x7E29             LDRB     R1,[R5, #+24]
   \   00000030   0x....             LDR.N    R0,??DataTable21_7
   \   00000032   0x.... 0x....      LDR.W    R12,??DataTable21_8
   \   00000036   0x230A             MOVS     R3,#+10
   \   00000038   0xEB01 0x0281      ADD      R2,R1,R1, LSL #+2
   \   0000003C   0xFB94 0xF3F3      SDIV     R3,R4,R3
   \   00000040   0xEB03 0x0383      ADD      R3,R3,R3, LSL #+2
   \   00000044   0x5414             STRB     R4,[R2, R0]
   \   00000046   0x4463             ADD      R3,R3,R12
    533                  FloorNum[(hc1 / 10) - 1].devNum[ FloorNum[(hc1 / 10) - 1].devAct ] = FHTDevAct;      
    534                  FHTDev[FHTDevAct].hc2    = hc2;
   \   00000048   0x1810             ADDS     R0,R2,R0
   \   0000004A   0xF813 0xCC02      LDRB     R12,[R3, #-2]
   \   0000004E   0x449C             ADD      R12,R12,R3
   \   00000050   0xF80C 0x1C05      STRB     R1,[R12, #-5]
   \   00000054   0xF880 0x8001      STRB     R8,[R0, #+1]
    535                  FHTNr = FHTDevAct;
   \   00000058   0x7729             STRB     R1,[R5, #+28]
    536                  FloorNum[(hc1 / 10) - 1].devAct++;
   \   0000005A   0xF813 0x0C02      LDRB     R0,[R3, #-2]
   \   0000005E   0x1C40             ADDS     R0,R0,#+1
   \   00000060   0xF803 0x0C02      STRB     R0,[R3, #-2]
    537                  FHTDevAct++;
   \   00000064   0x1C48             ADDS     R0,R1,#+1
   \   00000066   0x7628             STRB     R0,[R5, #+24]
    538                }  
    539              
    540              
    541              if ((hc4 != 0x67) && (hc5 != 0x64)){
   \                     ??FHTScan_1: (+1)
   \   00000068   0x2E67             CMP      R6,#+103
   \   0000006A   0xBF18             IT       NE 
   \   0000006C   0x2F64             CMPNE    R7,#+100
   \   0000006E   0xD01B             BEQ.N    ??FHTScan_0
    542                
    543                if((FHTDev[FHTNr].command != hc4) || (FHTDev[FHTNr].extension != hc5))
   \   00000070   0xF995 0x101C      LDRSB    R1,[R5, #+28]
   \   00000074   0x....             LDR.N    R0,??DataTable21_7
   \   00000076   0xEB01 0x0281      ADD      R2,R1,R1, LSL #+2
   \   0000007A   0x1810             ADDS     R0,R2,R0
   \   0000007C   0x7882             LDRB     R2,[R0, #+2]
   \   0000007E   0x42B2             CMP      R2,R6
   \   00000080   0xBF04             ITT      EQ 
   \   00000082   0x78C2             LDRBEQ   R2,[R0, #+3]
   \   00000084   0x42BA             CMPEQ    R2,R7
   \   00000086   0xD00F             BEQ.N    ??FHTScan_0
    544                {
    545          
    546                   FHTDev[FHTNr].command = hc4;
   \   00000088   0x7086             STRB     R6,[R0, #+2]
    547                   FHTDev[FHTNr].extension = hc5;
   \   0000008A   0x70C7             STRB     R7,[R0, #+3]
    548                   FHTFloor(FHTNr);
   \   0000008C   0xB2C8             UXTB     R0,R1
   \   0000008E   0x.... 0x....      BL       FHTFloor
    549                   
    550                   logMsg[0] ='\0';
   \   00000092   0x....             LDR.N    R0,??DataTable21_9
    551                   sprintf((char*)logMsg," %02d%02d %02d %02d\r\n\0", hc1,hc2,hc4,hc5);
   \   00000094   0x9701             STR      R7,[SP, #+4]
   \   00000096   0x2100             MOVS     R1,#+0
   \   00000098   0x7001             STRB     R1,[R0, #+0]
   \   0000009A   0x9600             STR      R6,[SP, #+0]
   \   0000009C   0x4643             MOV      R3,R8
   \   0000009E   0x4622             MOV      R2,R4
   \   000000A0   0x.... 0x....      ADR.W    R1,?_1
   \   000000A4   0x.... 0x....      BL       sprintf
    552                }
    553              }
    554            }
    555          }
   \                     ??FHTScan_0: (+1)
   \   000000A8   0xB003             ADD      SP,SP,#+12
   \   000000AA   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
    556          
    557          /*
    558          *********************************************************************************************************
    559          */

   \                                 In section .text, align 2, keep-with-next
    560          void ReceiverScan(void)
    561          {  
   \                     ReceiverScan: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    562            
    563            if (n > 0)
   \   00000002   0x....             LDR.N    R4,??DataTable21
   \   00000004   0xF894 0x0020      LDRB     R0,[R4, #+32]
   \   00000008   0xB1A0             CBZ.N    R0,??ReceiverScan_0
    564            {
    565              if (n == 5)
   \   0000000A   0x2805             CMP      R0,#+5
   \   0000000C   0xD105             BNE.N    ??ReceiverScan_1
    566              {
    567                TFScan(TempBuf[0], TempBuf[1], TempBuf[2], TempBuf[3]);
   \   0000000E   0x78E3             LDRB     R3,[R4, #+3]
   \   00000010   0x78A2             LDRB     R2,[R4, #+2]
   \   00000012   0x7861             LDRB     R1,[R4, #+1]
   \   00000014   0x7820             LDRB     R0,[R4, #+0]
   \   00000016   0x.... 0x....      BL       TFScan
    568              }
    569              
    570              if (n == 6)
   \                     ??ReceiverScan_1: (+1)
   \   0000001A   0xF894 0x0020      LDRB     R0,[R4, #+32]
   \   0000001E   0x2806             CMP      R0,#+6
   \   00000020   0xD105             BNE.N    ??ReceiverScan_2
    571              {
    572                FHTScan(TempBuf[0], TempBuf[1], TempBuf[3],  TempBuf[4]);      
   \   00000022   0x7923             LDRB     R3,[R4, #+4]
   \   00000024   0x78E2             LDRB     R2,[R4, #+3]
   \   00000026   0x7861             LDRB     R1,[R4, #+1]
   \   00000028   0x7820             LDRB     R0,[R4, #+0]
   \   0000002A   0x.... 0x....      BL       FHTScan
    573              }
    574          
    575              n = 0;
   \                     ??ReceiverScan_2: (+1)
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0xF884 0x0020      STRB     R0,[R4, #+32]
    576            }
    577          }
   \                     ??ReceiverScan_0: (+1)
   \   00000034   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   0x........         DC32     TempBuf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_1:
   \   00000000   0x........         DC32     sum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_2:
   \   00000000   0x40012C00         DC32     0x40012c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_3:
   \   00000000   0x........         DC32     FileBuffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_4:
   \   00000000   0x........         DC32     TFDev

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_5:
   \   00000000   0x........         DC32     TFDevAccess

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_6:
   \   00000000   0x........         DC32     FHTDevAccess

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_7:
   \   00000000   0x........         DC32     FHTDev

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_8:
   \   00000000   0x........         DC32     FloorNum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_9:
   \   00000000   0x........         DC32     logMsg

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x20 0x25          DC8 20H, 25H, 30H, 32H, 64H, 20H, 25H, 30H
   \              0x30 0x32    
   \              0x64 0x20    
   \              0x25 0x30    
   \   00000008   0x33 0x64          DC8 33H, 64H, 20H, 25H, 30H, 32H, 64H, 20H
   \              0x20 0x25    
   \              0x30 0x32    
   \              0x64 0x20    
   \   00000010   0x25 0x30          DC8 25H, 30H, 32H, 64H, 0DH, 0AH, 0, 0
   \              0x32 0x64    
   \              0x0D 0x0A    
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x20 0x25          DC8 20H, 25H, 30H, 32H, 64H, 25H, 30H, 32H
   \              0x30 0x32    
   \              0x64 0x25    
   \              0x30 0x32    
   \   00000008   0x64 0x20          DC8 64H, 20H, 25H, 30H, 32H, 64H, 20H, 25H
   \              0x25 0x30    
   \              0x32 0x64    
   \              0x20 0x25    
   \   00000010   0x30 0x32          DC8 30H, 32H, 64H, 0DH, 0AH, 0, 0
   \              0x64 0x0D    
   \              0x0A 0x00    
   \              0x00         
   \   00000017   0x00               DC8 0
    578          
    579          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       4   FHTDevEnabled
      24   FHTDevLoad
        24   -> strlen
       4   FHTDevNr
      32   FHTFloor
        32   -> FHTValue
        32   -> TFFloor
      40   FHTScan
        40   -> FHTDevEnabled
        40   -> FHTDevNr
        40   -> FHTFloor
        40   -> sprintf
       0   FHTValue
      16   FS20_ISRHandler
        16   -> Free_TmrRd
        16   -> TIM_SetCounter
        16   -> ook868poll
       8   FS20_Setbit
       0   FS20_TimeISRHandler
       0   InitStructs
      24   PaarLoad
        24   -> strlen
       8   ReceiverScan
         8   -> FHTScan
         8   -> TFScan
       8   TFDevEnabled
      24   TFDevLoad
        24   -> strlen
       8   TFDevNr
      16   TFFloor
      40   TFScan
        40   -> TFDevEnabled
        40   -> TFDevNr
        40   -> TFValue
        40   -> sprintf
       0   TFValue
      40   ook868poll
        40   -> __aeabi_memcpy4
        40 __aeabi_llsr
       0   reset_FS20


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable21
       4  ??DataTable21_1
       4  ??DataTable21_2
       4  ??DataTable21_3
       4  ??DataTable21_4
       4  ??DataTable21_5
       4  ??DataTable21_6
       4  ??DataTable21_7
       4  ??DataTable21_8
       4  ??DataTable21_9
       8  ?Subroutine0
       6  ?Subroutine1
       6  ?Subroutine2
      24  ?_0
      24  ?_1
      36  FHTDev
      17  FHTDevAccess
          FHTLoadAct
     110  FHTDevEnabled
      78  FHTDevLoad
     110  FHTDevNr
     138  FHTFloor
     174  FHTScan
      52  FHTValue
     200  FS20_ISRHandler
      72  FS20_Setbit
      28  FS20_TimeISRHandler
      20  FTHLcdStr
      20  FloorNum
      66  InitStructs
      76  PaarLoad
      54  ReceiverScan
      48  TFDev
          FHTTFPaar
          FHTDevAct
          TFDevAct
          FHTTFPaarAct
          FHTLedVal
          FHTNr
          TFNr
          logMsgTF
      13  TFDevAccess
          TFLoadAct
      72  TFDevEnabled
     110  TFDevLoad
      64  TFDevNr
     134  TFFloor
     202  TFScan
      24  TFValue
      40  TempBuf
          FS20
          n
          count
      16  logMsg
       2  mask
     154  ook868poll
       1  res1
       2  res2
      22  reset_FS20
      16  sum
          buf
       1  tmp
       1  tmp1
       2  width

 
   235 bytes in section .bss
 2 048 bytes in section .text
 
 2 048 bytes of CODE memory
   235 bytes of DATA memory

Errors: none
Warnings: none
