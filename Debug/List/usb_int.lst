###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       09/Feb/2018  16:15:14
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\HW Projects\ControlHome\CntrHome - RF69w\uc-terminal\src\usb_int.c
#    Command line =  
#        "E:\HW Projects\ControlHome\CntrHome -
#        RF69w\uc-terminal\src\usb_int.c" -lCN "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\Debug\List" -o "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\Debug\Obj" --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\APP\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\BSP\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\CPU\inc\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-CPU\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-RTC\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-LIB\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uCOS-II\Ports\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uCOS-II\Source\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\I2C-Out\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\Direct_Sw\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\Wdt_led\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-LCD\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-RF\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\api\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\config\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\os\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\fsl\fat\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\clib\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\lbl\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\device\mmc\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\file\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-Terminal\src\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-Terminal\inc\" -Oh
#    List file    =  
#        E:\HW Projects\ControlHome\CntrHome - RF69w\Debug\List\usb_int.lst
#    Object file  =  
#        E:\HW Projects\ControlHome\CntrHome - RF69w\Debug\Obj\usb_int.o
#
###############################################################################

E:\HW Projects\ControlHome\CntrHome - RF69w\uc-terminal\src\usb_int.c
      1          /******************** (C) COPYRIGHT 2011 STMicroelectronics ********************
      2          * File Name          : usb_int.c
      3          * Author             : MCD Application Team
      4          * Version            : V3.3.0
      5          * Date               : 21-March-2011
      6          * Description        : Endpoint CTR (Low and High) interrupt's service routines
      7          ********************************************************************************
      8          * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
      9          * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
     10          * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
     11          * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
     12          * CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
     13          * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     14          *******************************************************************************/
     15          #ifndef STM32F10X_CL
     16          
     17          /* Includes ------------------------------------------------------------------*/
     18          #include "includes.h"
     19          
     20          #if USBD_MODULE == DEF_ENABLED
     21          
     22          /* Private typedef -----------------------------------------------------------*/
     23          /* Private define ------------------------------------------------------------*/
     24          /* Private macro -------------------------------------------------------------*/
     25          /* Private variables ---------------------------------------------------------*/

   \                                 In section .bss, align 2
     26           INT16U SaveRState;
   \                     SaveRState:
   \   00000000                      DS8 2
     27           INT16U SaveTState;
   \                     SaveTState:
   \   00000002                      DS8 2
     28          
     29          /* Extern variables ----------------------------------------------------------*/
     30          extern void (*pEpInt_IN[7])(void);    /*  Handles IN  interrupts   */
     31          extern void (*pEpInt_OUT[7])(void);   /*  Handles OUT interrupts   */
     32          
     33          /* Private function prototypes -----------------------------------------------*/
     34          /* Private functions ---------------------------------------------------------*/
     35          
     36          /*******************************************************************************
     37          * Function Name  : CTR_LP.
     38          * Description    : Low priority Endpoint Correct Transfer interrupt's service
     39          *                  routine.
     40          * Input          : None.
     41          * Output         : None.
     42          * Return         : None.
     43          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     44          void CTR_LP(void)
     45          {
   \                     CTR_LP: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
     46             INT16U wEPVal = 0;
   \   00000004   0xF248 0x0480      MOVW     R4,#+32896
   \   00000008   0x....             LDR.N    R5,??DataTable1
   \   0000000A   0x....             LDR.N    R7,??DataTable1_1  ;; 0x40005c00
   \   0000000C   0x.... 0x....      LDR.W    R8,??DataTable1_2
   \   00000010   0x.... 0x....      LDR.W    R9,??DataTable1_3
   \   00000014   0xF640 0x7B8F      MOVW     R11,#+3983
   \   00000018   0xF64B 0x7ABF      MOVW     R10,#+49087
   \   0000001C   0xE021             B.N      ??CTR_LP_0
     47            /* stay in loop while pending interrupts */
     48            while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
     49            {
     50              /* extract highest priority endpoint number */
     51              EPindex = (INT8U)(wIstr & ISTR_EP_ID);
     52              if (EPindex == 0)
     53              {
     54                /* Decode and service control endpoint interrupt */
     55                /* calling related service routine */
     56                /* (Setup0_Process, In0_Process, Out0_Process) */
     57          
     58                /* save RX & TX status */
     59                /* and set both to NAK */
     60          
     61          
     62          	    SaveRState = _GetENDPOINT(ENDP0);
     63          	    SaveTState = SaveRState & EPTX_STAT;
     64          	    SaveRState &=  EPRX_STAT;	
     65          
     66          	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
     67          
     68                /* DIR bit = origin of the interrupt */
     69          
     70                if ((wIstr & ISTR_DIR) == 0)
     71                {
     72                  /* DIR = 0 */
     73          
     74                  /* DIR = 0      => IN  int */
     75                  /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
     76          
     77          
     78                  _ClearEP_CTR_TX(ENDP0);
     79                  In0_Process();
     80          
     81                     /* before terminate set Tx & Rx status */
     82          
     83                      _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
     84          		  return;
     85                }
     86                else
     87                {
     88                  /* DIR = 1 */
     89          
     90                  /* DIR = 1 & CTR_RX       => SETUP or OUT int */
     91                  /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
     92          
     93                  wEPVal = _GetENDPOINT(ENDP0);
     94                  
     95                  if ((wEPVal &EP_SETUP) != 0)
     96                  {
     97                    _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
     98                    Setup0_Process();
     99                    /* before terminate set Tx & Rx status */
    100          
    101          		      _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
    102                    return;
    103                  }
    104          
    105                  else if ((wEPVal & EP_CTR_RX) != 0)
    106                  {
    107                    _ClearEP_CTR_RX(ENDP0);
    108                    Out0_Process();
    109                    /* before terminate set Tx & Rx status */
    110               
    111          		     _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
    112                    return;
    113                  }
    114                }
    115              }/* if(EPindex == 0) */
    116              else
    117              {
    118                /* Decode and service non control endpoints interrupt  */
    119          
    120                /* process related endpoint register */
    121                wEPVal = _GetENDPOINT(EPindex);
   \                     ??CTR_LP_1: (+1)
   \   0000001E   0xF857 0x6021      LDR      R6,[R7, R1, LSL #+2]
   \   00000022   0xB2B6             UXTH     R6,R6
    122                if ((wEPVal & EP_CTR_RX) != 0)
   \   00000024   0x0430             LSLS     R0,R6,#+16
   \   00000026   0xD50B             BPL.N    ??CTR_LP_2
    123                {
    124                  /* clear int flag */
    125                  _ClearEP_CTR_RX(EPindex);
   \   00000028   0xF857 0x0021      LDR      R0,[R7, R1, LSL #+2]
   \   0000002C   0xEA0B 0x0000      AND      R0,R11,R0
   \   00000030   0xF847 0x0021      STR      R0,[R7, R1, LSL #+2]
    126          
    127                  /* call OUT service function */
    128                  (*pEpInt_OUT[EPindex-1])();
   \   00000034   0x....             LDR.N    R0,??DataTable1_4
   \   00000036   0xEB00 0x0081      ADD      R0,R0,R1, LSL #+2
   \   0000003A   0xF850 0x0C04      LDR      R0,[R0, #-4]
   \   0000003E   0x4780             BLX      R0
    129          
    130                } /* if((wEPVal & EP_CTR_RX) */
    131          
    132                if ((wEPVal & EP_CTR_TX) != 0)
   \                     ??CTR_LP_2: (+1)
   \   00000040   0x0630             LSLS     R0,R6,#+24
   \   00000042   0xD50E             BPL.N    ??CTR_LP_0
   \   00000044   0xF898 0x0000      LDRB     R0,[R8, #+0]
   \   00000048   0xF857 0x1020      LDR      R1,[R7, R0, LSL #+2]
   \   0000004C   0xF648 0x720F      MOVW     R2,#+36623
   \   00000050   0x4011             ANDS     R1,R2,R1
   \   00000052   0xF847 0x1020      STR      R1,[R7, R0, LSL #+2]
    133                {
    134                  /* clear int flag */
    135                  _ClearEP_CTR_TX(EPindex);
    136          
    137                  /* call IN service function */
    138                  (*pEpInt_IN[EPindex-1])();
   \   00000056   0x....             LDR.N    R1,??DataTable1_5
   \   00000058   0xEB01 0x0080      ADD      R0,R1,R0, LSL #+2
   \   0000005C   0xF850 0x0C04      LDR      R0,[R0, #-4]
   \   00000060   0x4780             BLX      R0
    139                } /* if((wEPVal & EP_CTR_TX) != 0) */
    140          
    141              }/* if(EPindex == 0) else */
   \                     ??CTR_LP_0: (+1)
   \   00000062   0x6C78             LDR      R0,[R7, #+68]
   \   00000064   0xF8A9 0x0000      STRH     R0,[R9, #+0]
   \   00000068   0xF8B9 0x0000      LDRH     R0,[R9, #+0]
   \   0000006C   0x0401             LSLS     R1,R0,#+16
   \   0000006E   0xD54A             BPL.N    ??CTR_LP_3
   \   00000070   0xF010 0x010F      ANDS     R1,R0,#0xF
   \   00000074   0xF888 0x1000      STRB     R1,[R8, #+0]
   \   00000078   0xD1D1             BNE.N    ??CTR_LP_1
   \   0000007A   0x6839             LDR      R1,[R7, #+0]
   \   0000007C   0x8029             STRH     R1,[R5, #+0]
   \   0000007E   0x8829             LDRH     R1,[R5, #+0]
   \   00000080   0xF001 0x0230      AND      R2,R1,#0x30
   \   00000084   0xF401 0x5140      AND      R1,R1,#0x3000
   \   00000088   0x8029             STRH     R1,[R5, #+0]
   \   0000008A   0x806A             STRH     R2,[R5, #+2]
   \   0000008C   0x6839             LDR      R1,[R7, #+0]
   \   0000008E   0xEA0A 0x0101      AND      R1,R10,R1
   \   00000092   0xF481 0x5100      EOR      R1,R1,#0x2000
   \   00000096   0xF081 0x0120      EOR      R1,R1,#0x20
   \   0000009A   0x4321             ORRS     R1,R4,R1
   \   0000009C   0x06C0             LSLS     R0,R0,#+27
   \   0000009E   0x6039             STR      R1,[R7, #+0]
   \   000000A0   0xD407             BMI.N    ??CTR_LP_4
   \   000000A2   0x6838             LDR      R0,[R7, #+0]
   \   000000A4   0xF648 0x710F      MOVW     R1,#+36623
   \   000000A8   0x4008             ANDS     R0,R1,R0
   \   000000AA   0x6038             STR      R0,[R7, #+0]
   \   000000AC   0x.... 0x....      BL       In0_Process
   \   000000B0   0xE012             B.N      ??CTR_LP_5
   \                     ??CTR_LP_4: (+1)
   \   000000B2   0x683E             LDR      R6,[R7, #+0]
   \   000000B4   0xB2B6             UXTH     R6,R6
   \   000000B6   0x0530             LSLS     R0,R6,#+20
   \   000000B8   0xD506             BPL.N    ??CTR_LP_6
   \   000000BA   0x6838             LDR      R0,[R7, #+0]
   \   000000BC   0xEA0B 0x0000      AND      R0,R11,R0
   \   000000C0   0x6038             STR      R0,[R7, #+0]
   \   000000C2   0x.... 0x....      BL       Setup0_Process
   \   000000C6   0xE007             B.N      ??CTR_LP_5
   \                     ??CTR_LP_6: (+1)
   \   000000C8   0x0430             LSLS     R0,R6,#+16
   \   000000CA   0xD5CA             BPL.N    ??CTR_LP_0
   \   000000CC   0x6838             LDR      R0,[R7, #+0]
   \   000000CE   0xEA0B 0x0000      AND      R0,R11,R0
   \   000000D2   0x6038             STR      R0,[R7, #+0]
   \   000000D4   0x.... 0x....      BL       Out0_Process
   \                     ??CTR_LP_5: (+1)
   \   000000D8   0x6838             LDR      R0,[R7, #+0]
   \   000000DA   0x8829             LDRH     R1,[R5, #+0]
   \   000000DC   0xEA0A 0x0000      AND      R0,R10,R0
   \   000000E0   0x04CA             LSLS     R2,R1,#+19
   \   000000E2   0xBF48             IT       MI 
   \   000000E4   0xF480 0x5080      EORMI    R0,R0,#0x1000
   \   000000E8   0x0489             LSLS     R1,R1,#+18
   \   000000EA   0xBF48             IT       MI 
   \   000000EC   0xF480 0x5000      EORMI    R0,R0,#0x2000
   \   000000F0   0x8869             LDRH     R1,[R5, #+2]
   \   000000F2   0x06CA             LSLS     R2,R1,#+27
   \   000000F4   0xBF48             IT       MI 
   \   000000F6   0xF080 0x0010      EORMI    R0,R0,#0x10
   \   000000FA   0x0689             LSLS     R1,R1,#+26
   \   000000FC   0xBF48             IT       MI 
   \   000000FE   0xF080 0x0020      EORMI    R0,R0,#0x20
   \   00000102   0x4320             ORRS     R0,R4,R0
   \   00000104   0x6038             STR      R0,[R7, #+0]
    142          
    143            }/* while(...) */
    144          }
   \                     ??CTR_LP_3: (+1)
   \   00000106   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
    145          
    146          /*******************************************************************************
    147          * Function Name  : CTR_HP.
    148          * Description    : High Priority Endpoint Correct Transfer interrupt's service 
    149          *                  routine.
    150          * Input          : None.
    151          * Output         : None.
    152          * Return         : None.
    153          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    154          void CTR_HP(void)
    155          {
   \                     CTR_HP: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0xF648 0x740F      MOVW     R4,#+36623
   \   00000008   0x.... 0x....      LDR.W    R8,??DataTable1_4
   \   0000000C   0x.... 0x....      LDR.W    R10,??DataTable1_1  ;; 0x40005c00
   \   00000010   0x....             LDR.N    R5,??DataTable1_2
   \   00000012   0x....             LDR.N    R7,??DataTable1_3
   \   00000014   0x.... 0x....      LDR.W    R11,??DataTable1_6  ;; 0x40005c44
   \   00000018   0xF640 0x768F      MOVW     R6,#+3983
   \   0000001C   0xF647 0x79FF      MOVW     R9,#+32767
   \   00000020   0xE009             B.N      ??CTR_HP_0
    156            INT32U wEPVal = 0;
    157          
    158            while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
    159            {
    160              _SetISTR((INT16U)CLR_CTR); /* clear CTR flag */
    161              /* extract highest priority endpoint number */
    162              EPindex = (INT8U)(wIstr & ISTR_EP_ID);
    163              /* process related endpoint register */
    164              wEPVal = _GetENDPOINT(EPindex);
    165              if ((wEPVal & EP_CTR_RX) != 0)
    166              {
    167                /* clear int flag */
    168                _ClearEP_CTR_RX(EPindex);
   \                     ??CTR_HP_1: (+1)
   \   00000022   0xF85A 0x1020      LDR      R1,[R10, R0, LSL #+2]
   \   00000026   0x4031             ANDS     R1,R6,R1
   \   00000028   0xF84A 0x1020      STR      R1,[R10, R0, LSL #+2]
    169          
    170                /* call OUT service function */
    171                (*pEpInt_OUT[EPindex-1])();
   \   0000002C   0xEB08 0x0080      ADD      R0,R8,R0, LSL #+2
   \   00000030   0xF850 0x0C04      LDR      R0,[R0, #-4]
   \   00000034   0x4780             BLX      R0
    172          
    173              } /* if((wEPVal & EP_CTR_RX) */
   \                     ??CTR_HP_0: (+1)
   \   00000036   0xF8DB 0x0000      LDR      R0,[R11, #+0]
   \   0000003A   0x8038             STRH     R0,[R7, #+0]
   \   0000003C   0x8838             LDRH     R0,[R7, #+0]
   \   0000003E   0x0401             LSLS     R1,R0,#+16
   \   00000040   0xD517             BPL.N    ??CTR_HP_2
   \   00000042   0xF8CB 0x9000      STR      R9,[R11, #+0]
   \   00000046   0xF000 0x000F      AND      R0,R0,#0xF
   \   0000004A   0x7028             STRB     R0,[R5, #+0]
   \   0000004C   0xF85A 0x1020      LDR      R1,[R10, R0, LSL #+2]
   \   00000050   0xB289             UXTH     R1,R1
   \   00000052   0x040A             LSLS     R2,R1,#+16
   \   00000054   0xD4E5             BMI.N    ??CTR_HP_1
    174              else if ((wEPVal & EP_CTR_TX) != 0)
   \   00000056   0x0609             LSLS     R1,R1,#+24
   \   00000058   0xD5ED             BPL.N    ??CTR_HP_0
    175              {
    176                /* clear int flag */
    177                _ClearEP_CTR_TX(EPindex);
   \   0000005A   0xF85A 0x1020      LDR      R1,[R10, R0, LSL #+2]
   \   0000005E   0x4021             ANDS     R1,R4,R1
   \   00000060   0xF84A 0x1020      STR      R1,[R10, R0, LSL #+2]
    178          
    179                /* call IN service function */
    180                (*pEpInt_IN[EPindex-1])();
   \   00000064   0x....             LDR.N    R1,??DataTable1_5
   \   00000066   0xEB01 0x0080      ADD      R0,R1,R0, LSL #+2
   \   0000006A   0xF850 0x0C04      LDR      R0,[R0, #-4]
   \   0000006E   0x4780             BLX      R0
   \   00000070   0xE7E1             B.N      ??CTR_HP_0
    181          
    182          
    183              } /* if((wEPVal & EP_CTR_TX) != 0) */
    184          
    185            }/* while(...) */
    186          }
   \                     ??CTR_HP_2: (+1)
   \   00000072   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     SaveRState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x40005C00         DC32     0x40005c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x........         DC32     EPindex

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x........         DC32     wIstr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x........         DC32     pEpInt_OUT

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x........         DC32     pEpInt_IN

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   0x40005C44         DC32     0x40005c44
    187          
    188          #endif  /* STM32F10X_CL */
    189          
    190          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/
    191          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      40   CTR_HP
        40   -- Indirect call
      40   CTR_LP
        40   -- Indirect call
        40   -> In0_Process
        40   -> Out0_Process
        40   -> Setup0_Process


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
     118  CTR_HP
     266  CTR_LP
       4  SaveRState
          SaveTState

 
   4 bytes in section .bss
 412 bytes in section .text
 
 412 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none
