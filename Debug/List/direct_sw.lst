###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       09/Feb/2018  16:14:49
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\HW Projects\ControlHome\CntrHome - RF69w\Direct_Sw\direct_sw.c
#    Command line =  
#        "E:\HW Projects\ControlHome\CntrHome - RF69w\Direct_Sw\direct_sw.c"
#        -lCN "E:\HW Projects\ControlHome\CntrHome - RF69w\Debug\List" -o
#        "E:\HW Projects\ControlHome\CntrHome - RF69w\Debug\Obj" --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\APP\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\BSP\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\CPU\inc\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-CPU\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-RTC\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-LIB\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uCOS-II\Ports\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uCOS-II\Source\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\I2C-Out\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\Direct_Sw\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\Wdt_led\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-LCD\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-RF\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\api\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\config\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\os\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\fsl\fat\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\clib\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\lbl\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\device\mmc\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\file\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-Terminal\src\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-Terminal\inc\" -Oh
#    List file    =  
#        E:\HW Projects\ControlHome\CntrHome - RF69w\Debug\List\direct_sw.lst
#    Object file  =  
#        E:\HW Projects\ControlHome\CntrHome - RF69w\Debug\Obj\direct_sw.o
#
###############################################################################

E:\HW Projects\ControlHome\CntrHome - RF69w\Direct_Sw\direct_sw.c
      1          /*
      2          *********************************************************************************************************
      3          *                                           Direct Sw Interface
      4          *
      5          *
      6          *
      7          * Filename   : direct_sw.c
      8          * Version    : V1.00
      9          * Programmer : Puleo
     10          *********************************************************************************************************
     11          */
     12          
     13          #define  DIRECT_SW_GLOBALS
     14          #include <includes.h>

   \                                 In section .bss, align 4
   \   __absolute OS_EVENT *Direct_Sw_Mbox
   \                     Direct_Sw_Mbox:
   \   00000000                      DS8 4
   \   00000004                      DS8 256
     15          
     16          #if WDTLED_MODULE == DEF_ENABLED
     17          /*
     18          *********************************************************************************************************
     19          *                                               CONSTANTS
     20          *********************************************************************************************************
     21          */
     22          
     23          /*
     24          *********************************************************************************************************
     25          *                                           LOCAL VARIABLES
     26          *********************************************************************************************************
     27          */
     28          
     29          static  OS_STK     Direct_Sw_TaskStk[DIRECT_SW_TASK_STK_SIZE];
     30          
     31          /*
     32          *********************************************************************************************************
     33          *                                      LOCAL FUNCTION PROTOTYPES
     34          *********************************************************************************************************
     35          */
     36          
     37          static  void    Direct_Sw_InitOS(void);
     38          static  void    Direct_Sw_Task(void *p_arg);
     39          
     40          
     41          /*
     42          *********************************************************************************************************
     43          *                                       INITIALIZE DIRECT_SW
     44          *********************************************************************************************************
     45          */
     46          

   \                                 In section .text, align 2, keep-with-next
     47          void   Direct_Sw_Init (void)
     48          {
   \                     Direct_Sw_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
     49              Direct_Sw_InitOS();
   \   00000004   0x2003             MOVS     R0,#+3
   \   00000006   0x9004             STR      R0,[SP, #+16]
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x9003             STR      R0,[SP, #+12]
   \   0000000C   0x2040             MOVS     R0,#+64
   \   0000000E   0x9002             STR      R0,[SP, #+8]
   \   00000010   0x2306             MOVS     R3,#+6
   \   00000012   0x....             LDR.N    R4,??DataTable3
   \   00000014   0x1D20             ADDS     R0,R4,#+4
   \   00000016   0x9001             STR      R0,[SP, #+4]
   \   00000018   0xF504 0x7280      ADD      R2,R4,#+256
   \   0000001C   0x2009             MOVS     R0,#+9
   \   0000001E   0x9000             STR      R0,[SP, #+0]
   \   00000020   0x2100             MOVS     R1,#+0
   \   00000022   0x.... 0x....      ADR.W    R0,Direct_Sw_Task
   \   00000026   0x.... 0x....      BL       OSTaskCreateExt
   \   0000002A   0xAA05             ADD      R2,SP,#+20
   \   0000002C   0x.... 0x....      ADR.W    R1,?_1
   \   00000030   0x2006             MOVS     R0,#+6
   \   00000032   0x.... 0x....      BL       OSTaskNameSet
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x.... 0x....      BL       OSMboxCreate
   \   0000003C   0x6020             STR      R0,[R4, #+0]
   \   0000003E   0x466A             MOV      R2,SP
   \   00000040   0x.... 0x....      ADR.W    R1,?_0
   \   00000044   0x.... 0x....      BL       OSEventNameSet
     50          }
   \   00000048   0xB006             ADD      SP,SP,#+24
   \   0000004A   0xBD10             POP      {R4,PC}          ;; return
     51          
     52          /*
     53          *********************************************************************************************************
     54          *                                             Direct_Sw_EventCreate()
     55          *
     56          * Description : Create the application events.
     57          *
     58          * Argument(s) : none.
     59          *
     60          * Return(s)   : none.
     61          *
     62          * Caller(s)   : none.
     63          *
     64          * Note(s)     : none.
     65          *********************************************************************************************************
     66          */
     67          
     68          static  void  Direct_Sw_EventCreate (void)
     69          {
     70          #if (OS_EVENT_NAME_SIZE > 12)
     71              CPU_INT08U  os_err;
     72          #endif
     73          
     74          
     75              Direct_Sw_Mbox = OSMboxCreate((void *)0);                                   /* Create MBOX for communication between Direct switch and Led Out.*/
     76          #if (OS_EVENT_NAME_SIZE > 12)
     77              OSEventNameSet(Direct_Sw_Mbox, "Direct switch to Led Out Mbox", &os_err);
     78          #endif
     79          }
     80          
     81          /*
     82          *********************************************************************************************************
     83          *                             INITIALIZE THE DIRECT_SW TASK AND OS OBJECTS
     84          *********************************************************************************************************
     85          */
     86          
     87          static  void  Direct_Sw_InitOS (void)
     88          {
     89          #if OS_TASK_NAME_SIZE > 0 || OS_EVENT_NAME_SIZE > 7
     90              INT8U  err;
     91          #endif
     92          
     93              (void)OSTaskCreateExt(Direct_Sw_Task,
     94                                    (void *)0,                                          /* No arguments passed to Direct Sw Task() */
     95                                    &Direct_Sw_TaskStk[DIRECT_SW_TASK_STK_SIZE - 1],    /* Set Top-Of-Stack                     */
     96                                    DIRECT_SW_TASK_PRIO,                                /* Lowest priority level                */
     97                                    DIRECT_SW_TASK_ID,
     98                                    &Direct_Sw_TaskStk[0],                              /* Set Bottom-Of-Stack                  */
     99                                    DIRECT_SW_TASK_STK_SIZE,
    100                                    (void *)0,                                          /* No TCB extension                     */
    101                                    OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);         /* Enable stack checking + clear stack  */
    102          
    103          #if OS_TASK_NAME_SIZE > 11
    104              OSTaskNameSet(DIRECT_SW_TASK_PRIO, (INT8U *)"Direct Sw Task", &err);
    105          #endif
    106              
    107              Direct_Sw_EventCreate ();
    108          }
    109          
    110          /*
    111          *********************************************************************************************************
    112          *                                           Direct switch TASK
    113          *********************************************************************************************************
    114          */
    115          

   \                                 In section .text, align 4, keep-with-next
    116          static  void  Direct_Sw_Task (void *p_arg)
    117          {
   \                     Direct_Sw_Task: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
    118              
    119              CPU_BOOLEAN  b1_prev;
    120              CPU_BOOLEAN  b1;
    121              CPU_INT08U   key;
    122          
    123          
    124              (void)p_arg;
    125          
    126              b1_prev = DEF_FALSE;
   \   00000002   0x2400             MOVS     R4,#+0
    127              key     = 0;
   \   00000004   0x2500             MOVS     R5,#+0
   \   00000006   0x....             LDR.N    R6,??DataTable3
   \   00000008   0xE00B             B.N      ??Direct_Sw_Task_0
    128          
    129              while (DEF_TRUE) {
    130                  b1 = load_btn();
    131          
    132                  if ((b1 == DEF_TRUE) && (b1_prev == DEF_FALSE)) {
    133                      if (key == 1) {
    134                          key = 0;
    135                      } else {
    136                          key++;
    137                      }
    138          
    139                      OSMboxPost(Direct_Sw_Mbox, (void *)key);
   \                     ??Direct_Sw_Task_1: (+1)
   \   0000000A   0xB2ED             UXTB     R5,R5
   \   0000000C   0x6830             LDR      R0,[R6, #+0]
   \   0000000E   0x4629             MOV      R1,R5
   \   00000010   0x.... 0x....      BL       OSMboxPost
    140                  }
    141          
    142                  b1_prev = b1;
    143          
    144                  OSTimeDlyHMSM(0, 0, 0, 20);
   \                     ??Direct_Sw_Task_2: (+1)
   \   00000014   0x2314             MOVS     R3,#+20
   \   00000016   0x2200             MOVS     R2,#+0
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x.... 0x....      BL       OSTimeDlyHMSM
   \   00000020   0x463C             MOV      R4,R7
   \                     ??Direct_Sw_Task_0: (+1)
   \   00000022   0x.... 0x....      BL       load_btn
   \   00000026   0x4607             MOV      R7,R0
   \   00000028   0x2F01             CMP      R7,#+1
   \   0000002A   0xBF08             IT       EQ 
   \   0000002C   0x2C00             CMPEQ    R4,#+0
   \   0000002E   0xD1F1             BNE.N    ??Direct_Sw_Task_2
   \   00000030   0x2D01             CMP      R5,#+1
   \   00000032   0xBF0C             ITE      EQ 
   \   00000034   0x2500             MOVEQ    R5,#+0
   \   00000036   0x1C6D             ADDNE    R5,R5,#+1
   \   00000038   0xE7E7             B.N      ??Direct_Sw_Task_1
    145              }
    146          }    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     Direct_Sw_Mbox

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x44 0x69          DC8 "Direct switch to Led Out Mbox"
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x73    
   \              0x77 0x69    
   \              0x74 0x63    
   \              0x68 0x20    
   \              0x74 0x6F    
   \              0x20 0x4C    
   \              0x65 0x64    
   \              0x20 0x4F    
   \              0x75 0x74    
   \              0x20 0x4D    
   \              0x62 0x6F    
   \              0x78 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x44 0x69          DC8 "Direct Sw Task"
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x53    
   \              0x77 0x20    
   \              0x54 0x61    
   \              0x73 0x6B    
   \              0x00         
   \   0000000F   0x00               DC8 0
    147          
    148          #endif
    149          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   Direct_Sw_Init
        32   -> OSEventNameSet
        32   -> OSMboxCreate
        32   -> OSTaskCreateExt
        32   -> OSTaskNameSet
      24   Direct_Sw_Task
        24   -> OSMboxPost
        24   -> OSTimeDlyHMSM
        24   -> load_btn


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
      32  ?_0
      16  ?_1
      76  Direct_Sw_Init
     260  Direct_Sw_Mbox
          Direct_Sw_TaskStk
      58  Direct_Sw_Task

 
 260 bytes in section .bss
 186 bytes in section .text
 
 186 bytes of CODE memory
 260 bytes of DATA memory

Errors: none
Warnings: none
