###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       09/Feb/2018  16:15:16
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\HW Projects\ControlHome\CntrHome - RF69w\uc-terminal\src\usb_prop.c
#    Command line =  
#        "E:\HW Projects\ControlHome\CntrHome -
#        RF69w\uc-terminal\src\usb_prop.c" -lCN "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\Debug\List" -o "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\Debug\Obj" --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\APP\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\BSP\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\CPU\inc\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-CPU\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-RTC\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-LIB\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uCOS-II\Ports\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uCOS-II\Source\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\I2C-Out\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\Direct_Sw\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\Wdt_led\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-LCD\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-RF\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\api\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\config\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\os\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\fsl\fat\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\clib\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\lbl\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\device\mmc\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\file\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-Terminal\src\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-Terminal\inc\" -Oh
#    List file    =  
#        E:\HW Projects\ControlHome\CntrHome - RF69w\Debug\List\usb_prop.lst
#    Object file  =  
#        E:\HW Projects\ControlHome\CntrHome - RF69w\Debug\Obj\usb_prop.o
#
###############################################################################

E:\HW Projects\ControlHome\CntrHome - RF69w\uc-terminal\src\usb_prop.c
      1          /*
      2          *********************************************************************************************************
      3          *	                                  
      4          *	模块名称 : USB虚拟串口相关的程序
      5          *	文件名称 : usb_istr.c
      6          *	版    本 : V2.0
      7          *	USB固件库驱动 : V3.3.0
      8          *	说    明 : 和USB虚拟串口相关的函数集
      9          *	修改记录 :
     10          *		版本号  日期       作者    说明
     11          *		v0.1    2009-12-27 armfly  创建该文件，ST固件库版本为V3.1.2
     12          *		v1.0    2011-01-11 armfly  ST固件库升级到V3.4.0版本。
     13          *		v2.0    2011-10-16 armfly  ST固件库升级到V3.5.0版本。优化工程结构。
     14          *
     15          *	Copyright (C), 2010-2011, 安富莱电子 www.armfly.com
     16          *
     17          *********************************************************************************************************
     18          */
     19          
     20          #include "includes.h"
     21          #if USBD_MODULE == DEF_ENABLED
     22          

   \                                 In section .bss, align 1
     23          static INT8U s_Request = 0;
   \                     s_Request:
   \   00000000                      DS8 1
     24          

   \                                 In section .data, align 4
     25          LINE_CODING linecoding =
   \                     linecoding:
   \   00000000   0x0001C200         DC32 115200
   \   00000004   0x00 0x00          DC8 0, 0, 8, 0
   \              0x08 0x00    
     26          {
     27          	115200, /* 波特率 */
     28          	0x00,   /* 停止位-1 */
     29          	0x00,   /* 检验位： 无 */
     30          	0x08    /* 数据位：8bit */
     31          };
     32          

   \                                 In section .data, align 4
     33          DEVICE Device_Table =
   \                     Device_Table:
   \   00000000   0x04 0x01          DC8 4, 1, 0, 0
   \              0x00 0x00    
     34          {
     35              EP_NUM,	/* 端点个数 */
     36              1
     37          };
     38          
     39          /* 设备属性 */

   \                                 In section .data, align 4
     40          DEVICE_PROP Device_Property =
   \                     Device_Property:
   \   00000000   0x........         DC32 Virtual_Com_Port_init, Virtual_Com_Port_Reset
   \              0x........   
   \   00000008   0x........         DC32 Virtual_Com_Port_Status_In, Virtual_Com_Port_Status_Out
   \              0x........   
   \   00000010   0x........         DC32 Virtual_Com_Port_Data_Setup, Virtual_Com_Port_NoData_Setup
   \              0x........   
   \   00000018   0x........         DC32 Virtual_Com_Port_Get_Interface_Setting
   \   0000001C   0x........         DC32 Virtual_Com_Port_GetDeviceDescriptor
   \   00000020   0x........         DC32 Virtual_Com_Port_GetConfigDescriptor
   \   00000024   0x........         DC32 Virtual_Com_Port_GetStringDescriptor, 0H
   \              0x00000000   
   \   0000002C   0x40 0x00          DC8 64, 0, 0, 0
   \              0x00 0x00    
     41          {
     42              Virtual_Com_Port_init,
     43              Virtual_Com_Port_Reset,
     44              Virtual_Com_Port_Status_In,
     45              Virtual_Com_Port_Status_Out,
     46              Virtual_Com_Port_Data_Setup,
     47              Virtual_Com_Port_NoData_Setup,
     48              Virtual_Com_Port_Get_Interface_Setting,
     49              Virtual_Com_Port_GetDeviceDescriptor,
     50              Virtual_Com_Port_GetConfigDescriptor,
     51              Virtual_Com_Port_GetStringDescriptor,
     52              0,
     53              0x40 	/*MAX PACKET SIZE*/
     54          };
     55          

   \                                 In section .data, align 4
     56          USER_STANDARD_REQUESTS User_Standard_Requests =
   \                     User_Standard_Requests:
   \   00000000   0x........         DC32 NOP_Process, Virtual_Com_Port_SetConfiguration, NOP_Process
   \              0x........   
   \              0x........   
   \   0000000C   0x........         DC32 NOP_Process, NOP_Process, NOP_Process, NOP_Process, NOP_Process
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000020   0x........         DC32 Virtual_Com_Port_SetDeviceAddress
     57          {
     58              Virtual_Com_Port_GetConfiguration,
     59              Virtual_Com_Port_SetConfiguration,
     60              Virtual_Com_Port_GetInterface,
     61              Virtual_Com_Port_SetInterface,
     62              Virtual_Com_Port_GetStatus,
     63              Virtual_Com_Port_ClearFeature,
     64              Virtual_Com_Port_SetEndPointFeature,
     65              Virtual_Com_Port_SetDeviceFeature,
     66              Virtual_Com_Port_SetDeviceAddress
     67          };
     68          

   \                                 In section .data, align 4
     69          ONE_DESCRIPTOR Device_Descriptor =
   \                     Device_Descriptor:
   \   00000000   0x........         DC32 Virtual_Com_Port_DeviceDescriptor
   \   00000004   0x0012             DC16 18
   \   00000006   0x00 0x00          DC8 0, 0
     70          {
     71              (INT8U*)Virtual_Com_Port_DeviceDescriptor,
     72              VIRTUAL_COM_PORT_SIZ_DEVICE_DESC
     73          };
     74          

   \                                 In section .data, align 4
     75          ONE_DESCRIPTOR Config_Descriptor =
   \                     Config_Descriptor:
   \   00000000   0x........         DC32 Virtual_Com_Port_ConfigDescriptor
   \   00000004   0x0043             DC16 67
   \   00000006   0x00 0x00          DC8 0, 0
     76          {
     77              (INT8U*)Virtual_Com_Port_ConfigDescriptor,
     78              VIRTUAL_COM_PORT_SIZ_CONFIG_DESC
     79          };
     80          

   \                                 In section .data, align 4
     81          ONE_DESCRIPTOR String_Descriptor[4] =
   \                     String_Descriptor:
   \   00000000   0x........         DC32 Virtual_Com_Port_StringLangID
   \   00000004   0x0004             DC16 4
   \   00000006   0x00 0x00          DC8 0, 0
   \   00000008   0x........         DC32 Virtual_Com_Port_StringVendor
   \   0000000C   0x0026             DC16 38
   \   0000000E   0x00 0x00          DC8 0, 0
   \   00000010   0x........         DC32 Virtual_Com_Port_StringProduct
   \   00000014   0x0032             DC16 50
   \   00000016   0x00 0x00          DC8 0, 0
   \   00000018   0x........         DC32 Virtual_Com_Port_StringSerial
   \   0000001C   0x001A             DC16 26
   \   0000001E   0x00 0x00          DC8 0, 0
     82          {
     83          	{(INT8U*)Virtual_Com_Port_StringLangID, VIRTUAL_COM_PORT_SIZ_STRING_LANGID},
     84          	{(INT8U*)Virtual_Com_Port_StringVendor, VIRTUAL_COM_PORT_SIZ_STRING_VENDOR},
     85          	{(INT8U*)Virtual_Com_Port_StringProduct, VIRTUAL_COM_PORT_SIZ_STRING_PRODUCT},
     86          	{(INT8U*)Virtual_Com_Port_StringSerial, VIRTUAL_COM_PORT_SIZ_STRING_SERIAL}
     87          };
     88          
     89          /*
     90          *********************************************************************************************************
     91          *	函 数 名: Virtual_Com_Port_init
     92          *	功能说明: 虚拟串口初始化
     93          *	形    参: 无
     94          *	返 回 值: 无
     95          *********************************************************************************************************
     96          */

   \                                 In section .text, align 2, keep-with-next
     97          void Virtual_Com_Port_init(void)
     98          {
   \                     Virtual_Com_Port_init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     99          	/* 获取设备序列号 */
    100          	Get_SerialNum(Virtual_Com_Port_StringSerial);
   \   00000002   0x....             LDR.N    R0,??DataTable11
   \   00000004   0x.... 0x....      BL       Get_SerialNum
    101          	
    102          	pInformation->Current_Configuration = 0;		/* pInformation 全局变量，在USB固件库中定义 */
   \   00000008   0x....             LDR.N    R1,??DataTable11_1
   \   0000000A   0x6809             LDR      R1,[R1, #+0]
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x7288             STRB     R0,[R1, #+10]
    103          	
    104          	/* 连接USB设备。该函数会使能USB上拉电阻，并进行必要的设置 */
    105          	usb_PowerOn();
   \   00000010   0x.... 0x....      BL       usb_PowerOn
    106          	
    107          	/* 执行基本的设备初始化 */
    108          	USB_SIL_Init();
   \   00000014   0x.... 0x....      BL       USB_SIL_Init
    109          	
    110          	bDeviceState = UNCONNECTED;		/* 更行设备状态变量 */
   \   00000018   0x....             LDR.N    R1,??DataTable11_2
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x6008             STR      R0,[R1, #+0]
    111          }
   \   0000001E   0xBD01             POP      {R0,PC}          ;; return
    112          
    113          /*
    114          *********************************************************************************************************
    115          *	函 数 名: Virtual_Com_Port_Reset
    116          *	功能说明: 虚拟串口复位
    117          *	形    参: 无
    118          *	返 回 值: 无
    119          *********************************************************************************************************
    120          */

   \                                 In section .text, align 2, keep-with-next
    121          void Virtual_Com_Port_Reset(void)
    122          {
   \                     Virtual_Com_Port_Reset: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    123          	/* 设置设备状态为：未配置 */
    124          	pInformation->Current_Configuration = 0;
   \   00000002   0x....             LDR.N    R0,??DataTable11_1
   \   00000004   0x6802             LDR      R2,[R0, #+0]
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x7291             STRB     R1,[R2, #+10]
    125          	
    126          	/* 设置设备当前特性 */
    127          	pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
   \   0000000A   0x....             LDR.N    R1,??DataTable11_3
   \   0000000C   0x6802             LDR      R2,[R0, #+0]
   \   0000000E   0x79C9             LDRB     R1,[R1, #+7]
   \   00000010   0x7251             STRB     R1,[R2, #+9]
    128          	
    129          	/* 设置设备当前接口 */
    130          	pInformation->Current_Interface = 0;
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0x72C1             STRB     R1,[R0, #+11]
    131          	
    132          	SetBTABLE(BTABLE_ADDRESS);	/* 设置分组缓冲区描述报表寄存器BTABLE中的地址 */
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x.... 0x....      BL       SetBTABLE
    133          	
    134          	/* 初始化端点0为控制传输模式 */
    135          	SetEPType(ENDP0, EP_CONTROL);
   \   0000001E   0xF44F 0x7100      MOV      R1,#+512
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x.... 0x....      BL       SetEPType
    136          	SetEPTxStatus(ENDP0, EP_TX_STALL);
   \   00000028   0x2110             MOVS     R1,#+16
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x.... 0x....      BL       SetEPTxStatus
    137          	SetEPRxAddr(ENDP0, ENDP0_RXADDR);
   \   00000030   0x2140             MOVS     R1,#+64
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x.... 0x....      BL       SetEPRxAddr
    138          	SetEPTxAddr(ENDP0, ENDP0_TXADDR);
   \   00000038   0x2180             MOVS     R1,#+128
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x.... 0x....      BL       SetEPTxAddr
    139          	Clear_Status_Out(ENDP0);
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x.... 0x....      BL       Clear_Status_Out
    140          	SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
   \   00000046   0x....             LDR.N    R0,??DataTable11_4
   \   00000048   0xF890 0x102C      LDRB     R1,[R0, #+44]
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0x.... 0x....      BL       SetEPRxCount
    141          	SetEPRxValid(ENDP0);
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0x.... 0x....      BL       SetEPRxValid
    142          	
    143          	/* 初始化端点1为BULK批量传输模式 */
    144          	SetEPType(ENDP1, EP_BULK);
   \   00000058   0x2100             MOVS     R1,#+0
   \   0000005A   0x2001             MOVS     R0,#+1
   \   0000005C   0x.... 0x....      BL       SetEPType
    145          	SetEPTxAddr(ENDP1, ENDP1_TXADDR);
   \   00000060   0x21C0             MOVS     R1,#+192
   \   00000062   0x2001             MOVS     R0,#+1
   \   00000064   0x.... 0x....      BL       SetEPTxAddr
    146          	SetEPTxStatus(ENDP1, EP_TX_NAK);
   \   00000068   0x2120             MOVS     R1,#+32
   \   0000006A   0x2001             MOVS     R0,#+1
   \   0000006C   0x.... 0x....      BL       SetEPTxStatus
    147          	SetEPRxStatus(ENDP1, EP_RX_DIS);
   \   00000070   0x2100             MOVS     R1,#+0
   \   00000072   0x2001             MOVS     R0,#+1
   \   00000074   0x.... 0x....      BL       SetEPRxStatus
    148          	
    149          	/* 初始化端点2为中断传输模式 */
    150          	SetEPType(ENDP2, EP_INTERRUPT);
   \   00000078   0xF44F 0x61C0      MOV      R1,#+1536
   \   0000007C   0x2002             MOVS     R0,#+2
   \   0000007E   0x.... 0x....      BL       SetEPType
    151          	SetEPTxAddr(ENDP2, ENDP2_TXADDR);
   \   00000082   0xF44F 0x7180      MOV      R1,#+256
   \   00000086   0x2002             MOVS     R0,#+2
   \   00000088   0x.... 0x....      BL       SetEPTxAddr
    152          	SetEPRxStatus(ENDP2, EP_RX_DIS);
   \   0000008C   0x2100             MOVS     R1,#+0
   \   0000008E   0x2002             MOVS     R0,#+2
   \   00000090   0x.... 0x....      BL       SetEPRxStatus
    153          	SetEPTxStatus(ENDP2, EP_TX_NAK);
   \   00000094   0x2120             MOVS     R1,#+32
   \   00000096   0x2002             MOVS     R0,#+2
   \   00000098   0x.... 0x....      BL       SetEPTxStatus
    154          	
    155          	/* 初始化端点3为BULK批量传输模式 */
    156          	SetEPType(ENDP3, EP_BULK);
   \   0000009C   0x2100             MOVS     R1,#+0
   \   0000009E   0x2003             MOVS     R0,#+3
   \   000000A0   0x.... 0x....      BL       SetEPType
    157          	SetEPRxAddr(ENDP3, ENDP3_RXADDR);
   \   000000A4   0xF44F 0x7188      MOV      R1,#+272
   \   000000A8   0x2003             MOVS     R0,#+3
   \   000000AA   0x.... 0x....      BL       SetEPRxAddr
    158          	SetEPRxCount(ENDP3, VIRTUAL_COM_PORT_DATA_SIZE);
   \   000000AE   0x2140             MOVS     R1,#+64
   \   000000B0   0x2003             MOVS     R0,#+3
   \   000000B2   0x.... 0x....      BL       SetEPRxCount
    159          	SetEPRxStatus(ENDP3, EP_RX_VALID);
   \   000000B6   0xF44F 0x5140      MOV      R1,#+12288
   \   000000BA   0x2003             MOVS     R0,#+3
   \   000000BC   0x.... 0x....      BL       SetEPRxStatus
    160          	SetEPTxStatus(ENDP3, EP_TX_DIS);
   \   000000C0   0x2100             MOVS     R1,#+0
   \   000000C2   0x2003             MOVS     R0,#+3
   \   000000C4   0x.... 0x....      BL       SetEPTxStatus
    161          	
    162          	/* Set this device to response on default address */
    163          	SetDeviceAddress(0);
   \   000000C8   0x2000             MOVS     R0,#+0
   \   000000CA   0x.... 0x....      BL       SetDeviceAddress
    164          
    165          	bDeviceState = ATTACHED;	/* 设备已连接 */
   \   000000CE   0x....             LDR.N    R1,??DataTable11_2
   \   000000D0   0x2001             MOVS     R0,#+1
   \   000000D2   0x6008             STR      R0,[R1, #+0]
    166          }
   \   000000D4   0xBD01             POP      {R0,PC}          ;; return
    167          
    168          /*
    169          *********************************************************************************************************
    170          *	函 数 名: Virtual_Com_Port_SetConfiguration
    171          *	功能说明: 更新设备状态为：已配置
    172          *	形    参: 无
    173          *	返 回 值: 无
    174          *********************************************************************************************************
    175          */

   \                                 In section .text, align 2, keep-with-next
    176          void Virtual_Com_Port_SetConfiguration(void)
    177          {
    178          	DEVICE_INFO *pInfo = &Device_Info;
    179          	
    180          	if (pInfo->Current_Configuration != 0)
   \                     Virtual_Com_Port_SetConfiguration: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable11_5
   \   00000002   0x7A80             LDRB     R0,[R0, #+10]
   \   00000004   0xB110             CBZ.N    R0,??Virtual_Com_Port_SetConfiguration_0
    181          	{
    182          		/* 设备已经配置完成 */
    183          		bDeviceState = CONFIGURED;
   \   00000006   0x....             LDR.N    R1,??DataTable11_2
   \   00000008   0x2005             MOVS     R0,#+5
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    184          	}
    185          }
   \                     ??Virtual_Com_Port_SetConfiguration_0: (+1)
   \   0000000C   0x4770             BX       LR               ;; return
    186          
    187          /*
    188          *********************************************************************************************************
    189          *	函 数 名: Virtual_Com_Port_SetDeviceAddress
    190          *	功能说明: 更新设备状态为：已寻址
    191          *	形    参: 无
    192          *	返 回 值: 无
    193          *********************************************************************************************************
    194          */

   \                                 In section .text, align 2, keep-with-next
    195          void Virtual_Com_Port_SetDeviceAddress (void)
    196          {
    197          	bDeviceState = ADDRESSED;
   \                     Virtual_Com_Port_SetDeviceAddress: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable11_2
   \   00000002   0x2004             MOVS     R0,#+4
   \   00000004   0x6008             STR      R0,[R1, #+0]
    198          }
   \   00000006   0x4770             BX       LR               ;; return
    199          
    200          /*
    201          *********************************************************************************************************
    202          *	函 数 名: Virtual_Com_Port_Status_In
    203          *	功能说明: Virtual COM Port Status In Routine.
    204          *	形    参: 无
    205          *	返 回 值: 无
    206          *********************************************************************************************************
    207          */

   \                                 In section .text, align 2, keep-with-next
    208          void Virtual_Com_Port_Status_In(void)
    209          {
    210          	if (s_Request == SET_LINE_CODING)
   \                     Virtual_Com_Port_Status_In: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable11_6
   \   00000002   0x7801             LDRB     R1,[R0, #+0]
   \   00000004   0x2920             CMP      R1,#+32
   \   00000006   0xBF04             ITT      EQ 
   \   00000008   0x2100             MOVEQ    R1,#+0
   \   0000000A   0x7001             STRBEQ   R1,[R0, #+0]
    211          	{
    212          		/* USART_Config(); */
    213          		s_Request = 0;
    214          	}
    215          }
   \   0000000C   0x4770             BX       LR               ;; return
    216          
    217          /*
    218          *********************************************************************************************************
    219          *	函 数 名: Virtual_Com_Port_Status_Out
    220          *	功能说明: Virtual COM Port Status OUT Routine.
    221          *	形    参: 无
    222          *	返 回 值: 无
    223          *********************************************************************************************************
    224          */

   \                                 In section .text, align 2, keep-with-next
    225          void Virtual_Com_Port_Status_Out(void)
    226          {
    227          }
   \                     Virtual_Com_Port_Status_Out: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    228          
    229          /*
    230          *********************************************************************************************************
    231          *	函 数 名: Virtual_Com_Port_Data_Setup
    232          *	功能说明: handle the data class specific requests
    233          *	形    参: RequestNo
    234          *	返 回 值: USB_UNSUPPORT or USB_SUCCESS.
    235          *********************************************************************************************************
    236          */

   \                                 In section .text, align 2, keep-with-next
    237          RESULT Virtual_Com_Port_Data_Setup(INT8U RequestNo)
    238          {
   \                     Virtual_Com_Port_Data_Setup: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    239          	INT8U    *(*CopyRoutine)(INT16U);
    240          	
    241          	CopyRoutine = NULL;
    242          	
    243          	if (RequestNo == GET_LINE_CODING)
   \   00000002   0x2821             CMP      R0,#+33
   \   00000004   0xD109             BNE.N    ??Virtual_Com_Port_Data_Setup_0
    244          	{
    245          		if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
   \   00000006   0x....             LDR.N    R0,??DataTable11_1
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0x7800             LDRB     R0,[R0, #+0]
   \   0000000C   0xF000 0x007F      AND      R0,R0,#0x7F
   \   00000010   0x2821             CMP      R0,#+33
   \   00000012   0xD115             BNE.N    ??Virtual_Com_Port_Data_Setup_1
    246          		{
    247          			CopyRoutine = Virtual_Com_Port_GetLineCoding;
   \   00000014   0x.... 0x....      ADR.W    R1,Virtual_Com_Port_GetLineCoding
   \   00000018   0xE010             B.N      ??Virtual_Com_Port_Data_Setup_2
    248          		}
    249          	}
    250          	else if (RequestNo == SET_LINE_CODING)
   \                     ??Virtual_Com_Port_Data_Setup_0: (+1)
   \   0000001A   0x2820             CMP      R0,#+32
   \   0000001C   0xD110             BNE.N    ??Virtual_Com_Port_Data_Setup_1
    251          	{
    252          		if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
   \   0000001E   0x....             LDR.N    R1,??DataTable11_1
   \   00000020   0x....             LDR.N    R0,??DataTable11_6
   \   00000022   0x6809             LDR      R1,[R1, #+0]
   \   00000024   0x7809             LDRB     R1,[R1, #+0]
   \   00000026   0xF001 0x017F      AND      R1,R1,#0x7F
   \   0000002A   0x2921             CMP      R1,#+33
   \   0000002C   0xD002             BEQ.N    ??Virtual_Com_Port_Data_Setup_3
   \   0000002E   0x2120             MOVS     R1,#+32
   \   00000030   0x7001             STRB     R1,[R0, #+0]
   \   00000032   0xE005             B.N      ??Virtual_Com_Port_Data_Setup_1
    253          		{
    254          			CopyRoutine = Virtual_Com_Port_SetLineCoding;
    255          		}
    256          		s_Request = SET_LINE_CODING;
   \                     ??Virtual_Com_Port_Data_Setup_3: (+1)
   \   00000034   0x2220             MOVS     R2,#+32
   \   00000036   0x.... 0x....      ADR.W    R1,Virtual_Com_Port_SetLineCoding
   \   0000003A   0x7002             STRB     R2,[R0, #+0]
    257          	}
    258          	
    259          	if (CopyRoutine == NULL)
   \                     ??Virtual_Com_Port_Data_Setup_2: (+1)
   \   0000003C   0x0008             MOVS     R0,R1
   \   0000003E   0xD101             BNE.N    ??Virtual_Com_Port_Data_Setup_4
    260          	{
    261          		return USB_UNSUPPORT;
   \                     ??Virtual_Com_Port_Data_Setup_1: (+1)
   \   00000040   0x2002             MOVS     R0,#+2
   \   00000042   0xBD02             POP      {R1,PC}
    262          	}
    263          	
    264          	pInformation->Ctrl_Info.CopyData = CopyRoutine;
   \                     ??Virtual_Com_Port_Data_Setup_4: (+1)
   \   00000044   0x....             LDR.N    R0,??DataTable11_1
   \   00000046   0x6800             LDR      R0,[R0, #+0]
    265          	pInformation->Ctrl_Info.Usb_wOffset = 0;
   \   00000048   0x2200             MOVS     R2,#+0
   \   0000004A   0x6181             STR      R1,[R0, #+24]
   \   0000004C   0x8242             STRH     R2,[R0, #+18]
    266          	(*CopyRoutine)(0);
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x4788             BLX      R1
    267          	return USB_SUCCESS;
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0xBD02             POP      {R1,PC}          ;; return
    268          }
    269          
    270          /*
    271          *********************************************************************************************************
    272          *	函 数 名: Virtual_Com_Port_NoData_Setup
    273          *	功能说明:  handle the no data class specific requests.
    274          *	形    参: RequestNo
    275          *	返 回 值: USB_UNSUPPORT or USB_SUCCESS.
    276          *********************************************************************************************************
    277          */

   \                                 In section .text, align 2, keep-with-next
    278          RESULT Virtual_Com_Port_NoData_Setup(INT8U RequestNo)
    279          {
    280          	if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
   \                     Virtual_Com_Port_NoData_Setup: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable11_1
   \   00000002   0x6809             LDR      R1,[R1, #+0]
   \   00000004   0x7809             LDRB     R1,[R1, #+0]
   \   00000006   0xF001 0x017F      AND      R1,R1,#0x7F
   \   0000000A   0x2921             CMP      R1,#+33
   \   0000000C   0xD105             BNE.N    ??Virtual_Com_Port_NoData_Setup_0
    281          	{
    282          		if (RequestNo == SET_COMM_FEATURE)
   \   0000000E   0x2802             CMP      R0,#+2
   \   00000010   0xBF18             IT       NE 
   \   00000012   0x2822             CMPNE    R0,#+34
    283          		{
    284          			return USB_SUCCESS;
    285          		}
    286          		else if (RequestNo == SET_CONTROL_LINE_STATE)
   \   00000014   0xD101             BNE.N    ??Virtual_Com_Port_NoData_Setup_0
    287          		{
    288          			return USB_SUCCESS;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x4770             BX       LR
    289          		}
    290          	}
    291          	
    292          	return USB_UNSUPPORT;
   \                     ??Virtual_Com_Port_NoData_Setup_0: (+1)
   \   0000001A   0x2002             MOVS     R0,#+2
   \   0000001C   0x4770             BX       LR               ;; return
    293          }
    294          
    295          /*
    296          *********************************************************************************************************
    297          *	函 数 名: Virtual_Com_Port_GetDeviceDescriptor
    298          *	功能说明:  获取设备描述符
    299          *	形    参: Length : 长度
    300          *	返 回 值: 设备描述符数组的地址
    301          *********************************************************************************************************
    302          */

   \                                 In section .text, align 2, keep-with-next
    303          INT8U *Virtual_Com_Port_GetDeviceDescriptor(INT16U Length)
    304          {
    305          	return Standard_GetDescriptorData(Length, &Device_Descriptor);
   \                     Virtual_Com_Port_GetDeviceDescriptor: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable11_7
   \   00000002   0x.... 0x....      B.W      Standard_GetDescriptorData
    306          }
    307          
    308          /*
    309          *********************************************************************************************************
    310          *	函 数 名: Virtual_Com_Port_GetConfigDescriptor
    311          *	功能说明:  获取配置描述符
    312          *	形    参: Length : 长度
    313          *	返 回 值: 配置描述符数组的地址
    314          *********************************************************************************************************
    315          */

   \                                 In section .text, align 2, keep-with-next
    316          INT8U *Virtual_Com_Port_GetConfigDescriptor(INT16U Length)
    317          {
    318          	return Standard_GetDescriptorData(Length, &Config_Descriptor);
   \                     Virtual_Com_Port_GetConfigDescriptor: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable11_8
   \   00000002   0x.... 0x....      B.W      Standard_GetDescriptorData
    319          }
    320          
    321          /*
    322          *********************************************************************************************************
    323          *	函 数 名: Virtual_Com_Port_GetStringDescriptor
    324          *	功能说明:  获取字符串描述符
    325          *	形    参: Length : 长度
    326          *	返 回 值: 字符串描述符数组的地址
    327          *********************************************************************************************************
    328          */

   \                                 In section .text, align 2, keep-with-next
    329          INT8U *Virtual_Com_Port_GetStringDescriptor(INT16U Length)
    330          {
    331          	INT8U wValue0 = pInformation->USBwValue0;
   \                     Virtual_Com_Port_GetStringDescriptor: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable11_1
   \   00000002   0x6809             LDR      R1,[R1, #+0]
   \   00000004   0x78C9             LDRB     R1,[R1, #+3]
    332          	if (wValue0 > 4)
   \   00000006   0x2905             CMP      R1,#+5
   \   00000008   0xDB01             BLT.N    ??Virtual_Com_Port_GetStringDescriptor_0
    333          	{
    334          		return NULL;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x4770             BX       LR
    335          	}
    336          	else
    337          	{
    338          		return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
   \                     ??Virtual_Com_Port_GetStringDescriptor_0: (+1)
   \   0000000E   0x....             LDR.N    R2,??DataTable11_9
   \   00000010   0xEB02 0x01C1      ADD      R1,R2,R1, LSL #+3
   \   00000014   0x.... 0x....      B.W      Standard_GetDescriptorData
    339          	}
    340          }
    341          
    342          /*
    343          *********************************************************************************************************
    344          *	函 数 名: Virtual_Com_Port_Get_Interface_Setting
    345          *	功能说明: 测试设备是否支持相应的接口
    346          *	形    参: Interface : 接口号； AlternateSetting ：接口设置号
    347          *	返 回 值: 字符串描述符数组的地址
    348          *********************************************************************************************************
    349          */

   \                                 In section .text, align 2, keep-with-next
    350          RESULT Virtual_Com_Port_Get_Interface_Setting(INT8U Interface, INT8U AlternateSetting)
    351          {
    352          	if (AlternateSetting > 0)
   \                     Virtual_Com_Port_Get_Interface_Setting: (+1)
   \   00000000   0xB909             CBNZ.N   R1,??Virtual_Com_Port_Get_Interface_Setting_0
    353          	{
    354          		return USB_UNSUPPORT;
    355          	}
    356          	else if (Interface > 1)
   \   00000002   0x2802             CMP      R0,#+2
   \   00000004   0xDB01             BLT.N    ??Virtual_Com_Port_Get_Interface_Setting_1
    357          	{
    358          		return USB_UNSUPPORT;
   \                     ??Virtual_Com_Port_Get_Interface_Setting_0: (+1)
   \   00000006   0x2002             MOVS     R0,#+2
   \   00000008   0x4770             BX       LR
    359          	}
    360          	return USB_SUCCESS;
   \                     ??Virtual_Com_Port_Get_Interface_Setting_1: (+1)
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x4770             BX       LR               ;; return
    361          }
    362          
    363          /*
    364          *********************************************************************************************************
    365          *	函 数 名: Virtual_Com_Port_GetLineCoding
    366          *	功能说明: 发送 linecoding 结构给PC主机
    367          *	形    参: Length : 长度
    368          *	返 回 值: linecoding 结构体的指针
    369          *********************************************************************************************************
    370          */

   \                                 In section .text, align 4, keep-with-next
    371          INT8U *Virtual_Com_Port_GetLineCoding(INT16U Length)
    372          {
    373          	if (Length == 0)
   \                     Virtual_Com_Port_GetLineCoding: (+1)
   \   00000000   0xB900             CBNZ.N   R0,??Virtual_Com_Port_GetLineCoding_0
    374          	{
    375          		pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
   \   00000002   0x....             B.N      ?Subroutine0
    376          		return NULL;
    377          	}
    378          	return (INT8U *)&linecoding;
   \                     ??Virtual_Com_Port_GetLineCoding_0: (+1)
   \   00000004   0x....             B.N      ?Subroutine1
    379          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable11_10
   \   00000002   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable11_1
   \   00000002   0x6809             LDR      R1,[R1, #+0]
   \   00000004   0x2008             MOVS     R0,#+8
   \   00000006   0x8208             STRH     R0,[R1, #+16]
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x4770             BX       LR
    380          
    381          /*
    382          *********************************************************************************************************
    383          *	函 数 名: Virtual_Com_Port_SetLineCoding
    384          *	功能说明: 设置linecoding结构体的字段
    385          *	形    参: Length : 长度
    386          *	返 回 值: linecoding 结构体的指针
    387          *********************************************************************************************************
    388          */

   \                                 In section .text, align 4, keep-with-next
    389          INT8U *Virtual_Com_Port_SetLineCoding(INT16U Length)
    390          {
    391          	if (Length == 0)
   \                     Virtual_Com_Port_SetLineCoding: (+1)
   \   00000000   0xB900             CBNZ.N   R0,??Virtual_Com_Port_SetLineCoding_0
    392          	{
    393          		pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
   \   00000002   0x....             B.N      ?Subroutine0
    394          		return NULL;
    395          	}
    396          	return(INT8U *)&linecoding;
   \                     ??Virtual_Com_Port_SetLineCoding_0: (+1)
   \   00000004                      REQUIRE ?Subroutine1
   \   00000004                      ;; // Fall through to label ?Subroutine1
    397          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   0x........         DC32     Virtual_Com_Port_StringSerial

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_1:
   \   00000000   0x........         DC32     pInformation

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_2:
   \   00000000   0x........         DC32     bDeviceState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_3:
   \   00000000   0x........         DC32     Virtual_Com_Port_ConfigDescriptor

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_4:
   \   00000000   0x........         DC32     Device_Property

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_5:
   \   00000000   0x........         DC32     Device_Info

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_6:
   \   00000000   0x........         DC32     s_Request

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_7:
   \   00000000   0x........         DC32     Device_Descriptor

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_8:
   \   00000000   0x........         DC32     Config_Descriptor

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_9:
   \   00000000   0x........         DC32     String_Descriptor

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_10:
   \   00000000   0x........         DC32     linecoding
    398          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   Virtual_Com_Port_Data_Setup
         8   -- Indirect call
       0   Virtual_Com_Port_GetConfigDescriptor
         0   -> Standard_GetDescriptorData
       0   Virtual_Com_Port_GetDeviceDescriptor
         0   -> Standard_GetDescriptorData
       0   Virtual_Com_Port_GetLineCoding
       0   Virtual_Com_Port_GetStringDescriptor
         0   -> Standard_GetDescriptorData
       0   Virtual_Com_Port_Get_Interface_Setting
       0   Virtual_Com_Port_NoData_Setup
       8   Virtual_Com_Port_Reset
         8   -> Clear_Status_Out
         8   -> SetBTABLE
         8   -> SetDeviceAddress
         8   -> SetEPRxAddr
         8   -> SetEPRxCount
         8   -> SetEPRxStatus
         8   -> SetEPRxValid
         8   -> SetEPTxAddr
         8   -> SetEPTxStatus
         8   -> SetEPType
       0   Virtual_Com_Port_SetConfiguration
       0   Virtual_Com_Port_SetDeviceAddress
       0   Virtual_Com_Port_SetLineCoding
       0   Virtual_Com_Port_Status_In
       0   Virtual_Com_Port_Status_Out
       8   Virtual_Com_Port_init
         8   -> Get_SerialNum
         8   -> USB_SIL_Init
         8   -> usb_PowerOn


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable11_10
       4  ??DataTable11_2
       4  ??DataTable11_3
       4  ??DataTable11_4
       4  ??DataTable11_5
       4  ??DataTable11_6
       4  ??DataTable11_7
       4  ??DataTable11_8
       4  ??DataTable11_9
      12  ?Subroutine0
       4  ?Subroutine1
       8  Config_Descriptor
       8  Device_Descriptor
      48  Device_Property
       4  Device_Table
      32  String_Descriptor
      36  User_Standard_Requests
      86  Virtual_Com_Port_Data_Setup
       6  Virtual_Com_Port_GetConfigDescriptor
       6  Virtual_Com_Port_GetDeviceDescriptor
       6  Virtual_Com_Port_GetLineCoding
      24  Virtual_Com_Port_GetStringDescriptor
      14  Virtual_Com_Port_Get_Interface_Setting
      30  Virtual_Com_Port_NoData_Setup
     214  Virtual_Com_Port_Reset
      14  Virtual_Com_Port_SetConfiguration
       8  Virtual_Com_Port_SetDeviceAddress
       4  Virtual_Com_Port_SetLineCoding
      14  Virtual_Com_Port_Status_In
       2  Virtual_Com_Port_Status_Out
      32  Virtual_Com_Port_init
       8  linecoding
       1  s_Request

 
   1 byte  in section .bss
 144 bytes in section .data
 520 bytes in section .text
 
 520 bytes of CODE memory
 145 bytes of DATA memory

Errors: none
Warnings: none
