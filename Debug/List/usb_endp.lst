###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       09/Feb/2018  16:15:13
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\HW Projects\ControlHome\CntrHome - RF69w\uc-terminal\src\usb_endp.c
#    Command line =  
#        "E:\HW Projects\ControlHome\CntrHome -
#        RF69w\uc-terminal\src\usb_endp.c" -lCN "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\Debug\List" -o "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\Debug\Obj" --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\APP\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\BSP\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\CPU\inc\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-CPU\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-RTC\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-LIB\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uCOS-II\Ports\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uCOS-II\Source\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\I2C-Out\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\Direct_Sw\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\Wdt_led\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-LCD\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-RF\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\api\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\config\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\os\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\fsl\fat\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\clib\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\lbl\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\device\mmc\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\file\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-Terminal\src\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-Terminal\inc\" -Oh
#    List file    =  
#        E:\HW Projects\ControlHome\CntrHome - RF69w\Debug\List\usb_endp.lst
#    Object file  =  
#        E:\HW Projects\ControlHome\CntrHome - RF69w\Debug\Obj\usb_endp.o
#
###############################################################################

E:\HW Projects\ControlHome\CntrHome - RF69w\uc-terminal\src\usb_endp.c
      1          /*
      2          *********************************************************************************************************
      3          *	                                  
      4          *	模块名称 : USB端点事务处理模块    
      5          *	文件名称 : usb_istr.c
      6          *	版    本 : V2.0
      7          *	USB固件库驱动 : V3.3.0
      8          *	说    明 : USB端点事务处理子程序
      9          *	修改记录 :
     10          *		版本号  日期       作者    说明
     11          *		v0.1    2009-12-27 armfly  创建该文件，ST固件库版本为V3.1.2
     12          *		v1.0    2011-01-11 armfly  ST固件库升级到V3.4.0版本。
     13          *		v2.0    2011-10-16 armfly  ST固件库升级到V3.5.0版本。优化工程结构。
     14          *
     15          *	Copyright (C), 2010-2011, 安富莱电子 www.armfly.com
     16          *
     17          *********************************************************************************************************
     18          */
     19          
     20          #include "includes.h"
     21          
     22          #if USBD_MODULE == DEF_ENABLED
     23          
     24          /* Interval between sending IN packets in frame number (1 frame = 1ms) */
     25          #define VCOMPORT_IN_FRAME_INTERVAL             5
     26          
     27          extern  INT8U USART_Rx_Buffer[];
     28          extern INT32U USART_Rx_ptr_out;
     29          extern INT32U USART_Rx_length;
     30          extern INT8U  USB_Tx_State;
     31          extern INT16U *pdwVal;
     32          extern INT16U i;
     33          

   \                                 In section .bss, align 2
     34          INT16U usWord;
     35          INT8U ucByteNum;
   \                     ucByteNum:
   \   00000000                      DS8 1
   \   00000001                      DS8 1
   \                     usWord:
   \   00000002                      DS8 2
     36          INT16U usTotalSize;
   \                     usTotalSize:
   \   00000004                      DS8 2

   \                                 In section .bss, align 4
     37          INT16U usRxCnt;
   \                     usRxCnt:
   \   00000000                      DS8 2
   \   00000002                      DS8 2
     38          INT8U USB_Rx_Buffer[VIRTUAL_COM_PORT_DATA_SIZE];
   \                     USB_Rx_Buffer:
   \   00000004                      DS8 64
     39          /*
     40          *********************************************************************************************************
     41          *	函 数 名: EP1_IN_Callback
     42          *	功能说明: 端点1 IN包（设备->PC）回调函数
     43          *	形    参: 无
     44          *	返 回 值: 无
     45          *********************************************************************************************************
     46          */

   \                                 In section .text, align 2, keep-with-next
     47          void EP1_IN_Callback (void)
     48          {
   \                     EP1_IN_Callback: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
     49          	/*
     50          	为了提高传输效率，并且方便FIFO操作，将 UserToPMABufferCopy() 函数就地展开 
     51          	void UserToPMABufferCopy(INT8U *pbUsrBuf, INT16U wPMABufAddr, INT16U wNBytes)
     52          	{
     53          	  INT32U n = (wNBytes + 1) >> 1;
     54          	  INT32U i, temp1, temp2;
     55          	  INT16U *pdwVal;
     56          	  pdwVal = (INT16U *)(wPMABufAddr * 2 + PMAAddr);
     57          	  for (i = n; i != 0; i--)
     58          	  {
     59          	    temp1 = (INT16U) * pbUsrBuf;
     60          	    pbUsrBuf++;
     61          	    temp2 = temp1 | (INT16U) * pbUsrBuf << 8;
     62          	    *pdwVal++ = temp2;
     63          	    pdwVal++;
     64          	    pbUsrBuf++;
     65          	  }
     66          	}		
     67          	*/
     68          	
     69          	
     70          	usTotalSize = 0;
   \   00000002   0x....             LDR.N    R4,??DataTable2
     71          	pdwVal = (INT16U *)(ENDP1_TXADDR * 2 + PMAAddr);	
   \   00000004   0x....             LDR.N    R5,??DataTable2_1
     72          	for (i = 0 ; i < VIRTUAL_COM_PORT_DATA_SIZE / 2; i++)
   \   00000006   0x....             LDR.N    R6,??DataTable2_2
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x80A0             STRH     R0,[R4, #+4]
   \   0000000C   0x....             LDR.N    R0,??DataTable2_3  ;; 0x40006180
   \   0000000E   0x6028             STR      R0,[R5, #+0]
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x8030             STRH     R0,[R6, #+0]
     73          	{
     74          		usWord = usb_GetTxWord(&ucByteNum);
   \                     ??EP1_IN_Callback_0: (+1)
   \   00000014   0x4620             MOV      R0,R4
   \   00000016   0x.... 0x....      BL       usb_GetTxWord
     75          		if (ucByteNum == 0)
   \   0000001A   0x7821             LDRB     R1,[R4, #+0]
   \   0000001C   0x8060             STRH     R0,[R4, #+2]
   \   0000001E   0xB169             CBZ.N    R1,??EP1_IN_Callback_1
     76          		{
     77          			break;
     78          		}
     79          		
     80          		usTotalSize += ucByteNum;
   \   00000020   0x88A2             LDRH     R2,[R4, #+4]
   \   00000022   0x1889             ADDS     R1,R1,R2
   \   00000024   0x80A1             STRH     R1,[R4, #+4]
     81          		
     82          		*pdwVal++ = usWord;
   \   00000026   0x6829             LDR      R1,[R5, #+0]
   \   00000028   0x1D09             ADDS     R1,R1,#+4
   \   0000002A   0x6029             STR      R1,[R5, #+0]
   \   0000002C   0xF821 0x0D04      STRH     R0,[R1, #-4]!
     83          		pdwVal++;		
     84          	}
   \   00000030   0x8830             LDRH     R0,[R6, #+0]
   \   00000032   0x1C40             ADDS     R0,R0,#+1
   \   00000034   0x8030             STRH     R0,[R6, #+0]
   \   00000036   0xB280             UXTH     R0,R0
   \   00000038   0x2820             CMP      R0,#+32
   \   0000003A   0xDBEB             BLT.N    ??EP1_IN_Callback_0
     85          	
     86          	if (usTotalSize == 0)
   \                     ??EP1_IN_Callback_1: (+1)
   \   0000003C   0x88A1             LDRH     R1,[R4, #+4]
   \   0000003E   0xB139             CBZ.N    R1,??EP1_IN_Callback_2
     87          	{
     88          		return;
     89          	}
     90          	
     91          	SetEPTxCount(ENDP1, usTotalSize);
   \   00000040   0x2001             MOVS     R0,#+1
   \   00000042   0x.... 0x....      BL       SetEPTxCount
     92          	SetEPTxValid(ENDP1); 
   \   00000046   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   0000004A   0x2001             MOVS     R0,#+1
   \   0000004C   0x.... 0x....      B.W      SetEPTxValid
   \                     ??EP1_IN_Callback_2: (+1)
   \   00000050   0xBD70             POP      {R4-R6,PC}       ;; return
     93          }
     94          
     95          /*
     96          *********************************************************************************************************
     97          *	函 数 名: EP3_OUT_Callback
     98          *	功能说明: 端点3 OUT包（PC->设备）回调函数
     99          *	形    参: 无
    100          *	返 回 值: 无
    101          *********************************************************************************************************
    102          */

   \                                 In section .text, align 2, keep-with-next
    103          void EP3_OUT_Callback(void)
    104          {
   \                     EP3_OUT_Callback: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    105          	/* 将USB端点3收到的数据存储到USB_Rx_Buffer， 数据大小保存在USB_Rx_Cnt */
    106          	usRxCnt = USB_SIL_Read(EP3_OUT, USB_Rx_Buffer);
   \   00000002   0x....             LDR.N    R4,??DataTable2_4
   \   00000004   0x1D21             ADDS     R1,R4,#+4
   \   00000006   0x2003             MOVS     R0,#+3
   \   00000008   0x.... 0x....      BL       USB_SIL_Read
   \   0000000C   0x8020             STRH     R0,[R4, #+0]
    107          	
    108          	/* 立即将接收到的数据缓存到内存 */
    109          	usb_SaveHostDataToBuf(USB_Rx_Buffer, usRxCnt);
   \   0000000E   0x1D20             ADDS     R0,R4,#+4
   \   00000010   0x8821             LDRH     R1,[R4, #+0]
   \   00000012   0x.... 0x....      BL       usb_SaveHostDataToBuf
    110          	
    111          	/* 允许 EP3 端点接收数据 */
    112          	SetEPRxValid(ENDP3);
   \   00000016   0xE8BD 0x4010      POP      {R4,LR}
   \   0000001A   0x2003             MOVS     R0,#+3
   \   0000001C   0x.... 0x....      B.W      SetEPRxValid
    113          }
    114          
    115          /*
    116          *********************************************************************************************************
    117          *	函 数 名: SOF_Callback
    118          *	功能说明: SOF回调函数  .SOF是host用来指示frame的开头的。
    119          *	形    参: 无
    120          *	返 回 值: 无
    121          *********************************************************************************************************
    122          */

   \                                 In section .text, align 2, keep-with-next
    123          void SOF_Callback(void)
    124          {
    125          	static INT32U FrameCount = 0;
    126          	
    127          	if (bDeviceState == CONFIGURED)
   \                     SOF_Callback: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable2_5
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x2805             CMP      R0,#+5
   \   00000006   0xD108             BNE.N    ??SOF_Callback_0
    128          	{
    129          		if (FrameCount++ == VCOMPORT_IN_FRAME_INTERVAL)
   \   00000008   0x....             LDR.N    R0,??DataTable2_6
   \   0000000A   0x6801             LDR      R1,[R0, #+0]
   \   0000000C   0x1C4A             ADDS     R2,R1,#+1
   \   0000000E   0x2905             CMP      R1,#+5
   \   00000010   0x6002             STR      R2,[R0, #+0]
   \   00000012   0xD102             BNE.N    ??SOF_Callback_0
    130          		{
    131          			/* Reset the frame counter */
    132          			FrameCount = 0;
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x6001             STR      R1,[R0, #+0]
    133          			
    134          			/* Check the data to be sent through IN pipe */
    135          			EP1_IN_Callback();
   \   00000018   0x....             B.N      EP1_IN_Callback
    136          			//Handle_USBAsynchXfer();
    137          		}
    138          	}  
    139          }
   \                     ??SOF_Callback_0: (+1)
   \   0000001A   0x4770             BX       LR               ;; return

   \                                 In section .bss, align 4
   \                     ??FrameCount:
   \   00000000                      DS8 4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     ucByteNum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     pdwVal

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x........         DC32     i

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x40006180         DC32     0x40006180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x........         DC32     usRxCnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x........         DC32     bDeviceState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0x........         DC32     ??FrameCount
    140          
    141          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   EP1_IN_Callback
        16   -> SetEPTxCount
         0   -> SetEPTxValid
        16   -> usb_GetTxWord
       8   EP3_OUT_Callback
         0   -> SetEPRxValid
         8   -> USB_SIL_Read
         8   -> usb_SaveHostDataToBuf
       0   SOF_Callback
         0   -> EP1_IN_Callback


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
      82  EP1_IN_Callback
      32  EP3_OUT_Callback
       4  FrameCount
      28  SOF_Callback
       6  ucByteNum
          usWord
          usTotalSize
      68  usRxCnt
          USB_Rx_Buffer

 
  78 bytes in section .bss
 170 bytes in section .text
 
 170 bytes of CODE memory
  78 bytes of DATA memory

Errors: none
Warnings: none
