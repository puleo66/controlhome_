###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       09/Feb/2018  16:14:48
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\HW Projects\ControlHome\CntrHome - RF69w\uC-FatFS\clib\clibmisc.c
#    Command line =  
#        "E:\HW Projects\ControlHome\CntrHome - RF69w\uC-FatFS\clib\clibmisc.c"
#        -lCN "E:\HW Projects\ControlHome\CntrHome - RF69w\Debug\List" -o
#        "E:\HW Projects\ControlHome\CntrHome - RF69w\Debug\Obj" --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\APP\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\BSP\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\CPU\inc\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-CPU\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-RTC\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-LIB\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uCOS-II\Ports\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uCOS-II\Source\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\I2C-Out\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\Direct_Sw\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\Wdt_led\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-LCD\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-RF\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\api\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\config\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\os\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\fsl\fat\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\clib\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\lbl\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\device\mmc\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\file\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-Terminal\src\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-Terminal\inc\" -Oh
#    List file    =  
#        E:\HW Projects\ControlHome\CntrHome - RF69w\Debug\List\clibmisc.lst
#    Object file  =  
#        E:\HW Projects\ControlHome\CntrHome - RF69w\Debug\Obj\clibmisc.o
#
###############################################################################

E:\HW Projects\ControlHome\CntrHome - RF69w\uC-FatFS\clib\clibmisc.c
      1          /*
      2          **********************************************************************
      3          *                          Micrium, Inc.
      4          *                      949 Crestview Circle
      5          *                     Weston,  FL 33327-1848
      6          *
      7          *                            uC/FS
      8          *
      9          *             (c) Copyright 2001 - 2003, Micrium, Inc.
     10          *                      All rights reserved.
     11          *
     12          ***********************************************************************
     13          
     14          ----------------------------------------------------------------------
     15          File        : clibmisc.c
     16          Purpose     : C Library function implementation.
     17                        To avoid usage of C runtime library function, the FS
     18                        uses its own implementation of the required functions.
     19                        Do not use them yourself in the application, because
     20                        they might be limited to the functionality required by
     21                        the FS. They are NOT meant to be a replacement for an
     22                        ANSI C runtime library !
     23          ----------------------------------------------------------------------
     24          Known problems or limitations with current version
     25          ----------------------------------------------------------------------
     26          None.
     27          ---------------------------END-OF-HEADER------------------------------
     28          */
     29          
     30          /*********************************************************************
     31          *
     32          *             #include Section
     33          *
     34          **********************************************************************
     35          */
     36          
     37          #include "fs_port.h"
     38          #ifndef FS_FARCHARPTR
     39            #define FS_FARCHARPTR char *
     40          #endif
     41          #include "fs_conf.h"
     42          #include "fs_clib.h"
     43          
     44          
     45          /*********************************************************************
     46          *
     47          *             Local Variables        
     48          *
     49          **********************************************************************
     50          */
     51          

   \                                 In section .text, align 4, keep-with-next
     52          const unsigned char _ToUpperTable[] = {
   \                     _ToUpperTable:
   \   00000000   0x00 0x01          DC8 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18
   \              0x02 0x03    
   \              0x04 0x05    
   \              0x06 0x07    
   \              0x08 0x09    
   \              0x0A 0x0B    
   \              0x0C 0x0D    
   \              0x0E 0x0F    
   \              0x10 0x11    
   \              0x12         
   \   00000013   0x13 0x14          DC8 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35
   \              0x15 0x16    
   \              0x17 0x18    
   \              0x19 0x1A    
   \              0x1B 0x1C    
   \              0x1D 0x1E    
   \              0x1F 0x20    
   \              0x21 0x22    
   \              0x23         
   \   00000024   0x24 0x25          DC8 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52
   \              0x26 0x27    
   \              0x28 0x29    
   \              0x2A 0x2B    
   \              0x2C 0x2D    
   \              0x2E 0x2F    
   \              0x30 0x31    
   \              0x32 0x33    
   \              0x34         
   \   00000035   0x35 0x36          DC8 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69
   \              0x37 0x38    
   \              0x39 0x3A    
   \              0x3B 0x3C    
   \              0x3D 0x3E    
   \              0x3F 0x40    
   \              0x41 0x42    
   \              0x43 0x44    
   \              0x45         
   \   00000046   0x46 0x47          DC8 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86
   \              0x48 0x49    
   \              0x4A 0x4B    
   \              0x4C 0x4D    
   \              0x4E 0x4F    
   \              0x50 0x51    
   \              0x52 0x53    
   \              0x54 0x55    
   \              0x56         
   \   00000057   0x57 0x58          DC8 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 65, 66, 67, 68, 69, 70, 71
   \              0x59 0x5A    
   \              0x5B 0x5C    
   \              0x5D 0x5E    
   \              0x5F 0x60    
   \              0x41 0x42    
   \              0x43 0x44    
   \              0x45 0x46    
   \              0x47         
   \   00000068   0x48 0x49          DC8 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88
   \              0x4A 0x4B    
   \              0x4C 0x4D    
   \              0x4E 0x4F    
   \              0x50 0x51    
   \              0x52 0x53    
   \              0x54 0x55    
   \              0x56 0x57    
   \              0x58         
   \   00000079   0x59 0x5A          DC8 89, 90, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134
   \              0x7B 0x7C    
   \              0x7D 0x7E    
   \              0x7F 0x80    
   \              0x81 0x82    
   \              0x83 0x84    
   \              0x85 0x86    
   \   00000087   0x87 0x88          DC8 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147
   \              0x89 0x8A    
   \              0x8B 0x8C    
   \              0x8D 0x8E    
   \              0x8F 0x90    
   \              0x91 0x92    
   \              0x93         
   \   00000094   0x94 0x95          DC8 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160
   \              0x96 0x97    
   \              0x98 0x99    
   \              0x9A 0x9B    
   \              0x9C 0x9D    
   \              0x9E 0x9F    
   \              0xA0         
   \   000000A1   0xA1 0xA2          DC8 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173
   \              0xA3 0xA4    
   \              0xA5 0xA6    
   \              0xA7 0xA8    
   \              0xA9 0xAA    
   \              0xAB 0xAC    
   \              0xAD         
   \   000000AE   0xAE 0xAF          DC8 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186
   \              0xB0 0xB1    
   \              0xB2 0xB3    
   \              0xB4 0xB5    
   \              0xB6 0xB7    
   \              0xB8 0xB9    
   \              0xBA         
   \   000000BB   0xBB 0xBC          DC8 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199
   \              0xBD 0xBE    
   \              0xBF 0xC0    
   \              0xC1 0xC2    
   \              0xC3 0xC4    
   \              0xC5 0xC6    
   \              0xC7         
   \   000000C8   0xC8 0xC9          DC8 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212
   \              0xCA 0xCB    
   \              0xCC 0xCD    
   \              0xCE 0xCF    
   \              0xD0 0xD1    
   \              0xD2 0xD3    
   \              0xD4         
   \   000000D5   0xD5 0xD6          DC8 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225
   \              0xD7 0xD8    
   \              0xD9 0xDA    
   \              0xDB 0xDC    
   \              0xDD 0xDE    
   \              0xDF 0xE0    
   \              0xE1         
   \   000000E2   0xE2 0xE3          DC8 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238
   \              0xE4 0xE5    
   \              0xE6 0xE7    
   \              0xE8 0xE9    
   \              0xEA 0xEB    
   \              0xEC 0xED    
   \              0xEE         
   \   000000EF   0xEF 0xF0          DC8 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251
   \              0xF1 0xF2    
   \              0xF3 0xF4    
   \              0xF5 0xF6    
   \              0xF7 0xF8    
   \              0xF9 0xFA    
   \              0xFB         
   \   000000FC   0xFC 0xFD          DC8 252, 253, 254, 255
   \              0xFE 0xFF    
     53            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
     54            0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
     55            0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
     56            0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
     57            0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
     58            0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
     59            0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
     60            0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
     61            0x40, 'A',  'B',  'C',  'D',  'E',  'F',  'G',
     62            'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',
     63            'P',  'Q',  'R',  'S',  'T',  'U',  'V',  'W',
     64            'X',  'Y',  'Z', 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
     65            0x60, 'A',  'B',  'C',  'D',  'E',  'F',  'G',
     66            'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',
     67            'P',  'Q',  'R',  'S',  'T',  'U',  'V',  'W',
     68            'X',  'Y',  'Z', 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,
     69            0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
     70            0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,
     71            0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,
     72            0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,
     73            0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,
     74            0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,
     75            0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7,
     76            0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,
     77            0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7,
     78            0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,
     79            0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7,
     80            0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,
     81            0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7,
     82            0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,
     83            0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,
     84            0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff
     85          };
     86          
     87          
     88          /*********************************************************************
     89          *
     90          *             Global functions
     91          *
     92          **********************************************************************
     93          */
     94          
     95          /*********************************************************************
     96          *
     97          *             FS__CLIB_strchr
     98          *
     99            Description:
    100            FS internal function. Locate the first occurrence of c (converted
    101            to a char) in the string pointed to by s.
    102          
    103            Parameters:
    104            s           - Pointer to a zero terminated string.
    105            c           - 'Character' value to find.
    106           
    107            Return value:
    108            ==0         - c was not found
    109            !=0         - Pointer to the located character in s.
    110          */
    111          

   \                                 In section .text, align 2, keep-with-next
    112          FS_FARCHARPTR FS__CLIB_strchr(const char *s, int c) {
    113            const char ch = c;
   \                     FS__CLIB_strchr: (+1)
   \   00000000   0xB2C9             UXTB     R1,R1
    114          
    115            for (; *s != ch; ++s) {
   \                     ??FS__CLIB_strchr_0: (+1)
   \   00000002   0x7802             LDRB     R2,[R0, #+0]
   \   00000004   0x428A             CMP      R2,R1
   \   00000006   0xD004             BEQ.N    ??FS__CLIB_strchr_1
    116              if (*s == '\0') {
   \   00000008   0xF810 0x2B01      LDRB     R2,[R0], #+1
   \   0000000C   0x2A00             CMP      R2,#+0
   \   0000000E   0xD1F8             BNE.N    ??FS__CLIB_strchr_0
    117          			return 0;
   \   00000010   0x2000             MOVS     R0,#+0
    118              }
    119            }
    120          	return ((FS_FARCHARPTR)s);
   \                     ??FS__CLIB_strchr_1: (+1)
   \   00000012   0x4770             BX       LR               ;; return
    121          }
    122          
    123          
    124          /*********************************************************************
    125          *
    126          *             FS__CLIB_strlen
    127          *
    128            Description:
    129            FS internal function. Compute the length of a string pointed to by s.
    130          
    131            Parameters:
    132            s           - Pointer to a zero terminated string.
    133           
    134            Return value:
    135            Number of characters preceding the terminating 0.
    136          */
    137          

   \                                 In section .text, align 2, keep-with-next
    138          FS_size_t FS__CLIB_strlen(const char *s) {	
    139          	const char *sc;
    140          
    141            for (sc = s; *sc != '\0'; ++sc) {
   \                     FS__CLIB_strlen: (+1)
   \   00000000   0x4601             MOV      R1,R0
   \   00000002   0xE000             B.N      ??FS__CLIB_strlen_0
   \                     ??FS__CLIB_strlen_1: (+1)
   \   00000004   0x1C49             ADDS     R1,R1,#+1
   \                     ??FS__CLIB_strlen_0: (+1)
   \   00000006   0x780A             LDRB     R2,[R1, #+0]
   \   00000008   0x2A00             CMP      R2,#+0
   \   0000000A   0xD1FB             BNE.N    ??FS__CLIB_strlen_1
    142            }
    143          	return (sc - s);
   \   0000000C   0x1A08             SUBS     R0,R1,R0
   \   0000000E   0x4770             BX       LR               ;; return
    144          }
    145          
    146          
    147          /*********************************************************************
    148          *
    149          *             FS__CLIB_strncmp
    150          *
    151            Description:
    152            FS internal function. Compare not more than n characters from the
    153            array pointed to by s1 to the array pointed to by s2.
    154          
    155            Parameters:
    156            s1          - Pointer to a character array.
    157            s2          - Pointer to a character array.
    158            n           - Number of characters to compare.
    159           
    160            Return value:
    161            <0          - s1<s2
    162            ==0         - s1==s2.
    163            >0          - s1>s2
    164          */
    165          

   \                                 In section .text, align 2, keep-with-next
    166          int FS__CLIB_strncmp(const char *s1, const char *s2, FS_size_t n) {
   \                     FS__CLIB_strncmp: (+1)
   \   00000000   0xE001             B.N      ??FS__CLIB_strncmp_0
    167            for (; 0 < n; ++s1, ++s2, --n) {
   \                     ??FS__CLIB_strncmp_1: (+1)
   \   00000002   0x1C49             ADDS     R1,R1,#+1
   \   00000004   0x1E52             SUBS     R2,R2,#+1
   \                     ??FS__CLIB_strncmp_0: (+1)
   \   00000006   0xB16A             CBZ.N    R2,??FS__CLIB_strncmp_2
    168              if (*s1 != *s2) {
   \   00000008   0x780B             LDRB     R3,[R1, #+0]
   \   0000000A   0xF890 0xC000      LDRB     R12,[R0, #+0]
   \   0000000E   0x459C             CMP      R12,R3
   \   00000010   0xD004             BEQ.N    ??FS__CLIB_strncmp_3
    169          			return (*(unsigned char *)s1 < *(unsigned char *)s2 ? -1 : +1);
   \   00000012   0xBF34             ITE      CC 
   \   00000014   0xF04F 0x30FF      MOVCC    R0,#-1
   \   00000018   0x2001             MOVCS    R0,#+1
   \   0000001A   0x4770             BX       LR
    170              }
    171              else if (*s1 == '\0') {
   \                     ??FS__CLIB_strncmp_3: (+1)
   \   0000001C   0xF810 0x3B01      LDRB     R3,[R0], #+1
   \   00000020   0x2B00             CMP      R3,#+0
   \   00000022   0xD1EE             BNE.N    ??FS__CLIB_strncmp_1
    172          			return 0;
    173              }
    174            }
    175          	return 0;
   \                     ??FS__CLIB_strncmp_2: (+1)
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x4770             BX       LR               ;; return
    176          }
    177          
    178          
    179          /*********************************************************************
    180          *
    181          *             FS__CLIB_strcmp
    182          *
    183            Description:
    184            FS internal function. Compare the sring pointed to by s1 with the 
    185            string pointed to by s2.
    186          
    187            Parameters:
    188            s1          - Pointer to a zero terminated string.
    189            s2          - Pointer to a zero terminated string.
    190           
    191            Return value:
    192            <0          - s1<s2
    193            ==0         - s1==s2.
    194            >0          - s1>s2
    195          */
    196          

   \                                 In section .text, align 2, keep-with-next
    197          int FS__CLIB_strcmp(const char *s1, const char *s2)	{
   \                     FS__CLIB_strcmp: (+1)
   \   00000000   0xE000             B.N      ??FS__CLIB_strcmp_0
    198            for (; *s1 == *s2; ++s1, ++s2) {
   \                     ??FS__CLIB_strcmp_1: (+1)
   \   00000002   0x1C49             ADDS     R1,R1,#+1
   \                     ??FS__CLIB_strcmp_0: (+1)
   \   00000004   0x780A             LDRB     R2,[R1, #+0]
   \   00000006   0x7803             LDRB     R3,[R0, #+0]
   \   00000008   0x4293             CMP      R3,R2
   \   0000000A   0xD105             BNE.N    ??FS__CLIB_strcmp_2
    199              if (*s1 == '\0') 
   \   0000000C   0xF810 0x2B01      LDRB     R2,[R0], #+1
   \   00000010   0x2A00             CMP      R2,#+0
   \   00000012   0xD1F6             BNE.N    ??FS__CLIB_strcmp_1
    200                return 0;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x4770             BX       LR
    201            }
    202            return (*(unsigned char *)s1 < *(unsigned char *)s2 ? -1 : +1);
   \                     ??FS__CLIB_strcmp_2: (+1)
   \   00000018   0xBF34             ITE      CC 
   \   0000001A   0xF04F 0x30FF      MOVCC    R0,#-1
   \   0000001E   0x2001             MOVCS    R0,#+1
   \   00000020   0x4770             BX       LR
    203          }
    204          
    205          
    206          /*********************************************************************
    207          *
    208          *             FS__CLIB_atoi
    209          *
    210            Description:
    211            FS internal function. Convert string to int. The function stops with
    212            the first character it cannot convert. It expects decimal numbers only.
    213            It can handle +/- at the beginning and leading 0. It cannot handle
    214            HEX or any other numbers.
    215          
    216            Parameters:
    217            s           - Pointer to a zero terminated string.
    218           
    219            Return value:
    220            0           - In case of any problem or if the converted value is zero.
    221            !=0         - Integer value of the converted string.
    222          */
    223          

   \                                 In section .text, align 2, keep-with-next
    224          int FS__CLIB_atoi(const char *s) {
   \                     FS__CLIB_atoi: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
    225            int value;
    226            int len;
    227            int i;
    228            unsigned int base;
    229            const char *t;
    230            char c;
    231            signed char sign;
    232          
    233            value = 0;
   \   00000002   0x2100             MOVS     R1,#+0
    234            /* Check for +/- */
    235            sign = 1;
   \   00000004   0x2201             MOVS     R2,#+1
    236            len = FS__CLIB_strlen(s);
   \   00000006   0x4603             MOV      R3,R0
   \   00000008   0xE000             B.N      ??FS__CLIB_atoi_0
   \                     ??FS__CLIB_atoi_1: (+1)
   \   0000000A   0x1C5B             ADDS     R3,R3,#+1
   \                     ??FS__CLIB_atoi_0: (+1)
   \   0000000C   0x781C             LDRB     R4,[R3, #+0]
   \   0000000E   0x2C00             CMP      R4,#+0
   \   00000010   0xD1FB             BNE.N    ??FS__CLIB_atoi_1
    237            if (len <= 0) {
   \   00000012   0x1A1B             SUBS     R3,R3,R0
   \   00000014   0x2B01             CMP      R3,#+1
   \   00000016   0xDB28             BLT.N    ??FS__CLIB_atoi_2
    238              return 0;
    239            }
    240            t = s;
    241            if (*t == '-') {
   \   00000018   0x7803             LDRB     R3,[R0, #+0]
   \   0000001A   0x2B2D             CMP      R3,#+45
   \   0000001C   0xD103             BNE.N    ??FS__CLIB_atoi_3
    242              t++;
   \   0000001E   0x1C40             ADDS     R0,R0,#+1
    243              sign = -1;
   \   00000020   0xF04F 0x32FF      MOV      R2,#-1
   \   00000024   0xE002             B.N      ??FS__CLIB_atoi_4
    244            }
    245            else if (*t == '+') {
   \                     ??FS__CLIB_atoi_3: (+1)
   \   00000026   0x2B2B             CMP      R3,#+43
   \   00000028   0xBF08             IT       EQ 
   \   0000002A   0x1C40             ADDEQ    R0,R0,#+1
    246              t++;
    247            }
    248            /* Skip leading 0 */
    249            len = FS__CLIB_strlen(t);
   \                     ??FS__CLIB_atoi_4: (+1)
   \   0000002C   0x4603             MOV      R3,R0
   \   0000002E   0xE000             B.N      ??FS__CLIB_atoi_5
   \                     ??FS__CLIB_atoi_6: (+1)
   \   00000030   0x1C5B             ADDS     R3,R3,#+1
   \                     ??FS__CLIB_atoi_5: (+1)
   \   00000032   0x781C             LDRB     R4,[R3, #+0]
   \   00000034   0x2C00             CMP      R4,#+0
   \   00000036   0xD1FB             BNE.N    ??FS__CLIB_atoi_6
   \   00000038   0x1A1B             SUBS     R3,R3,R0
    250            if (len <= 0) {
   \   0000003A   0x2B01             CMP      R3,#+1
   \   0000003C   0xDB15             BLT.N    ??FS__CLIB_atoi_2
    251              return 0;
    252            }
    253            while (1) {
    254              if (*t != '0') {
   \                     ??FS__CLIB_atoi_7: (+1)
   \   0000003E   0x7804             LDRB     R4,[R0, #+0]
   \   00000040   0x2C30             CMP      R4,#+48
   \   00000042   0xD103             BNE.N    ??FS__CLIB_atoi_8
    255                break;
    256              }
    257              t++;
   \   00000044   0x1C40             ADDS     R0,R0,#+1
    258              len--;
   \   00000046   0x1E5B             SUBS     R3,R3,#+1
    259              if (len <= 0) {
   \   00000048   0x2B01             CMP      R3,#+1
   \   0000004A   0xDAF8             BGE.N    ??FS__CLIB_atoi_7
    260                break;
    261              }
    262            }
    263            /* Find end of number */
    264            for (i = 0; i < len; i++) {
   \                     ??FS__CLIB_atoi_8: (+1)
   \   0000004C   0x2400             MOVS     R4,#+0
   \   0000004E   0x4605             MOV      R5,R0
   \   00000050   0xE000             B.N      ??FS__CLIB_atoi_9
   \                     ??FS__CLIB_atoi_10: (+1)
   \   00000052   0x1C64             ADDS     R4,R4,#+1
   \                     ??FS__CLIB_atoi_9: (+1)
   \   00000054   0x429C             CMP      R4,R3
   \   00000056   0xBFBC             ITT      LT 
   \   00000058   0x782E             LDRBLT   R6,[R5, #+0]
   \   0000005A   0x2E3A             CMPLT    R6,#+58
    265              if (t[i] > '9') {
   \   0000005C   0xDA03             BGE.N    ??FS__CLIB_atoi_11
    266                break;
    267              }
    268              if (t[i] < '0') {
   \   0000005E   0xF815 0x6B01      LDRB     R6,[R5], #+1
   \   00000062   0x2E30             CMP      R6,#+48
   \   00000064   0xDAF5             BGE.N    ??FS__CLIB_atoi_10
    269                break;
    270              }
    271            }
    272            len = i;
    273            if (len <= 0) {
   \                     ??FS__CLIB_atoi_11: (+1)
   \   00000066   0x2C01             CMP      R4,#+1
   \   00000068   0xDA02             BGE.N    ??FS__CLIB_atoi_12
    274                return 0;
   \                     ??FS__CLIB_atoi_2: (+1)
   \   0000006A   0xBC70             POP      {R4-R6}
   \   0000006C   0x2000             MOVS     R0,#+0
   \   0000006E   0x4770             BX       LR
    275            }
    276            /* Calculate base */
    277            base = 1;
   \                     ??FS__CLIB_atoi_12: (+1)
   \   00000070   0x2301             MOVS     R3,#+1
    278            for (i = 1; i < len; i++) {
   \   00000072   0x2C02             CMP      R4,#+2
   \   00000074   0xDB05             BLT.N    ??FS__CLIB_atoi_13
   \   00000076   0x1E65             SUBS     R5,R4,#+1
    279              base *= 10;
   \                     ??FS__CLIB_atoi_14: (+1)
   \   00000078   0xEB03 0x0683      ADD      R6,R3,R3, LSL #+2
   \   0000007C   0x0073             LSLS     R3,R6,#+1
    280            }
   \   0000007E   0x1E6D             SUBS     R5,R5,#+1
   \   00000080   0xD1FA             BNE.N    ??FS__CLIB_atoi_14
    281            /* Get value */
    282            for (i = 0; i < len; i++) {
    283              c = t[i];
   \                     ??FS__CLIB_atoi_13: (+1)
   \   00000082   0xF810 0x5B01      LDRB     R5,[R0], #+1
    284              if (c > '9') {
   \   00000086   0x2D3A             CMP      R5,#+58
   \   00000088   0xDA0A             BGE.N    ??FS__CLIB_atoi_15
    285                break;
    286              }
    287              if (c < '0') {
   \   0000008A   0x2D30             CMP      R5,#+48
   \   0000008C   0xDB08             BLT.N    ??FS__CLIB_atoi_15
    288                break;
    289              }
    290              c -= '0';
    291              value += c*base;
   \   0000008E   0x3D30             SUBS     R5,R5,#+48
   \   00000090   0xB2ED             UXTB     R5,R5
   \   00000092   0xFB03 0x1105      MLA      R1,R3,R5,R1
    292              base /= 10;
   \   00000096   0x250A             MOVS     R5,#+10
    293            }
   \   00000098   0x1E64             SUBS     R4,R4,#+1
   \   0000009A   0xFBB3 0xF3F5      UDIV     R3,R3,R5
   \   0000009E   0xD1F0             BNE.N    ??FS__CLIB_atoi_13
    294            return sign * value;
   \                     ??FS__CLIB_atoi_15: (+1)
   \   000000A0   0xBC70             POP      {R4-R6}
   \   000000A2   0xFB01 0xF002      MUL      R0,R1,R2
   \   000000A6   0x4770             BX       LR               ;; return
    295          }
    296          
    297          
    298          /*********************************************************************
    299          *
    300          *             FS__CLIB_memset
    301          *
    302            Description:
    303            FS internal function. Copy the value of c (converted to an unsigned
    304            char) into each of the first n characters of the object pointed to 
    305            by s.
    306          
    307            Parameters:
    308            s           - Pointer to an object.
    309            c           - 'Character' value to be set.
    310            n           - Number of characters to be set.
    311           
    312            Return value:
    313            Value of s.
    314          */
    315          

   \                                 In section .text, align 2, keep-with-next
    316          void *FS__CLIB_memset(void *s, int c, FS_size_t n) {
   \                     FS__CLIB_memset: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x0010             MOVS     R0,R2
    317            const unsigned char uc = c;
    318            unsigned char *su = (unsigned char *)s;
    319            
    320            for (; 0 < n; ++su, --n) {
   \   00000006   0xD004             BEQ.N    ??FS__CLIB_memset_0
    321              *su = uc;
   \   00000008   0x460A             MOV      R2,R1
   \   0000000A   0x4601             MOV      R1,R0
   \   0000000C   0x4620             MOV      R0,R4
   \   0000000E   0x.... 0x....      BL       __aeabi_memset
    322            }
    323            return s;
   \                     ??FS__CLIB_memset_0: (+1)
   \   00000012   0x4620             MOV      R0,R4
   \   00000014   0xBD10             POP      {R4,PC}          ;; return
    324          }
    325          
    326          
    327          /*********************************************************************
    328          *
    329          *             FS__CLIB_memcpy
    330          *
    331            Description:
    332            FS internal function. Copy n characters from the object pointed to
    333            by s2 into the object pointed to by s1. 
    334          
    335            Parameters:
    336            s1          - Pointer to an object.
    337            s2          - Pointer to an object.
    338            n           - Number of characters to copy.
    339           
    340            Return value:
    341            Value of s1.
    342          */
    343          

   \                                 In section .text, align 2, keep-with-next
    344          void *FS__CLIB_memcpy(void *s1, const void *s2, FS_size_t n) {	
    345            char *su1 = (char *)s1;
   \                     FS__CLIB_memcpy: (+1)
   \   00000000   0x4603             MOV      R3,R0
    346            const char *su2 = (const char *)s2;
   \   00000002   0xB12A             CBZ.N    R2,??FS__CLIB_memcpy_0
    347            
    348            for (; 0 < n; ++su1, ++su2, --n) {
    349              *su1 = *su2;
   \                     ??FS__CLIB_memcpy_1: (+1)
   \   00000004   0xF811 0xCB01      LDRB     R12,[R1], #+1
   \   00000008   0xF803 0xCB01      STRB     R12,[R3], #+1
    350            }
   \   0000000C   0x1E52             SUBS     R2,R2,#+1
   \   0000000E   0xD1F9             BNE.N    ??FS__CLIB_memcpy_1
    351            return s1;
   \                     ??FS__CLIB_memcpy_0: (+1)
   \   00000010   0x4770             BX       LR               ;; return
    352          }
    353          
    354          
    355          /*********************************************************************
    356          *
    357          *             FS__CLIB_strncpy
    358          *
    359            Description:
    360            FS internal function. Copy not more than n characters from the array
    361            pointed to by s2 to the array pointed to by s1.
    362          
    363            Parameters:
    364            s1          - Pointer to a character array.
    365            s2          - Pointer to a character array.
    366            n           - Number of characters to copy.
    367           
    368            Return value:
    369            Value of s1.
    370          */
    371          

   \                                 In section .text, align 2, keep-with-next
    372          char *FS__CLIB_strncpy(char *s1, const char *s2, FS_size_t n) {
   \                     FS__CLIB_strncpy: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    373            char *s;
    374            
    375            for (s = s1; (0 < n) && (*s2 != '\0'); --n) {
   \   00000004   0xE004             B.N      ??FS__CLIB_strncpy_0
    376              *s++ = *s2++;	/* copy at most n chars from s2[] */
   \                     ??FS__CLIB_strncpy_1: (+1)
   \   00000006   0xF811 0x3B01      LDRB     R3,[R1], #+1
   \   0000000A   0xF800 0x3B01      STRB     R3,[R0], #+1
    377            }
   \   0000000E   0x1E52             SUBS     R2,R2,#+1
   \                     ??FS__CLIB_strncpy_0: (+1)
   \   00000010   0xB12A             CBZ.N    R2,??FS__CLIB_strncpy_2
   \   00000012   0x780B             LDRB     R3,[R1, #+0]
   \   00000014   0x2B00             CMP      R3,#+0
   \   00000016   0xD1F6             BNE.N    ??FS__CLIB_strncpy_1
    378            for (; 0 < n; --n) {
    379              *s++ = '\0';
   \   00000018   0x4611             MOV      R1,R2
   \   0000001A   0x.... 0x....      BL       __aeabi_memclr
    380            }
    381            return s1;
   \                     ??FS__CLIB_strncpy_2: (+1)
   \   0000001E   0x4620             MOV      R0,R4
   \   00000020   0xBD10             POP      {R4,PC}          ;; return
    382          }
    383          
    384          
    385          /*********************************************************************
    386          *
    387          *             FS__CLIB_toupper
    388          *
    389            Description:
    390            FS internal function. Convert a lowecase letter to a corresponding
    391            uppercase letter. 
    392          
    393            Parameters:
    394            c           - Letter to convert.
    395           
    396            Return value:
    397            Corresponding uppercase character.
    398          */
    399          

   \                                 In section .text, align 2, keep-with-next
    400          int FS__CLIB_toupper(int c)	{
    401            return (int)_ToUpperTable[c];
   \                     FS__CLIB_toupper: (+1)
   \   00000000   0x.... 0x....      ADR.W    R1,_ToUpperTable
   \   00000004   0x5C40             LDRB     R0,[R0, R1]
   \   00000006   0x4770             BX       LR               ;; return
    402          }
    403          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      12   FS__CLIB_atoi
       0   FS__CLIB_memcpy
       8   FS__CLIB_memset
         8   -> __aeabi_memset
       0   FS__CLIB_strchr
       0   FS__CLIB_strcmp
       0   FS__CLIB_strlen
       0   FS__CLIB_strncmp
       8   FS__CLIB_strncpy
         8   -> __aeabi_memclr
       0   FS__CLIB_toupper


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     168  FS__CLIB_atoi
      18  FS__CLIB_memcpy
      22  FS__CLIB_memset
      20  FS__CLIB_strchr
      34  FS__CLIB_strcmp
      16  FS__CLIB_strlen
      40  FS__CLIB_strncmp
      34  FS__CLIB_strncpy
       8  FS__CLIB_toupper
     256  _ToUpperTable

 
 616 bytes in section .text
 
 616 bytes of CODE memory

Errors: none
Warnings: none
