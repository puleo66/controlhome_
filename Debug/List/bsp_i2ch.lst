###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       09/Feb/2018  16:14:46
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  E:\HW Projects\ControlHome\CntrHome - RF69w\BSP\bsp_i2ch.c
#    Command line =  
#        "E:\HW Projects\ControlHome\CntrHome - RF69w\BSP\bsp_i2ch.c" -lCN
#        "E:\HW Projects\ControlHome\CntrHome - RF69w\Debug\List" -o "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\Debug\Obj" --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\APP\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\BSP\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\CPU\inc\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-CPU\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-RTC\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-LIB\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uCOS-II\Ports\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uCOS-II\Source\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\I2C-Out\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\Direct_Sw\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\Wdt_led\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-LCD\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-RF\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\api\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\config\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\os\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\fsl\fat\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\clib\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\lbl\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\device\mmc\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\file\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-Terminal\src\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-Terminal\inc\" -Oh
#    List file    =  
#        E:\HW Projects\ControlHome\CntrHome - RF69w\Debug\List\bsp_i2ch.lst
#    Object file  =  
#        E:\HW Projects\ControlHome\CntrHome - RF69w\Debug\Obj\bsp_i2ch.o
#
###############################################################################

E:\HW Projects\ControlHome\CntrHome - RF69w\BSP\bsp_i2ch.c
      1          /*
      2          *********************************************************************************************************
      3          *
      4          *                                        I2C DRIVER (MASTER ONLY)
      5          *                                                                         
      6          *
      7          * Filename      : bsp_i2c.c
      8          * Version       : V1.00
      9          * Programmer(s) : Puleo
     10          *********************************************************************************************************
     11          * Note(s)       :
     12          *********************************************************************************************************
     13          */
     14          
     15          /*
     16          *********************************************************************************************************
     17          *                                             INCLUDE FILES
     18          *********************************************************************************************************
     19          */
     20          
     21          #define  BSP_I2C_MODULE
     22          #include <bsp.h>
     23          
     24          
     25          /*
     26          *********************************************************************************************************
     27          *                                              LOCAL DEFINES
     28          *********************************************************************************************************
     29          */
     30          
     31             
     32          
     33          /*
     34          *********************************************************************************************************
     35          *                                           LOCAL CONSTANTS
     36          *********************************************************************************************************
     37          */
     38          
     39          
     40          
     41          /*
     42          *********************************************************************************************************
     43          *                                          LOCAL DATA TYPES
     44          *
     45          * Note(s) :  (1) The 'BSP_I2C_DEV_STATUS' structure defines the status of the current transfer
     46          *
     47          *            (2) The 'BSP_I2C_REG' defines the register set for the I2C1/I2C2 peripherals.
     48          *********************************************************************************************************
     49          */
     50          
     51          
     52          /*
     53          *********************************************************************************************************
     54          *                                            LOCAL TABLES
     55          *********************************************************************************************************
     56          */
     57          
     58          
     59          /*
     60          *********************************************************************************************************
     61          *                                       LOCAL GLOBAL VARIABLES
     62          *********************************************************************************************************
     63          */
     64          
     65          /*
     66          *********************************************************************************************************
     67          *                                      LOCAL FUNCTION PROTOTYPES
     68          *********************************************************************************************************
     69          */
     70          
     71          /*
     72          *********************************************************************************************************
     73          *                                     LOCAL CONFIGURATION ERRORS
     74          *********************************************************************************************************
     75          */
     76          
     77          
     78          /*
     79          *********************************************************************************************************
     80          *********************************************************************************************************
     81          **                                         GLOBAL FUNCTIONS
     82          *********************************************************************************************************
     83          *********************************************************************************************************
     84          */

   \                                 In section .text, align 2, keep-with-next
     85          void i2c_init() 
     86          {
   \                     i2c_init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
     87            GPIO_InitTypeDef GPIO_InitStructure;
     88            I2C_InitTypeDef I2C_InitStructure;
     89            
     90            RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C2, ENABLE);
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0xF44F 0x0080      MOV      R0,#+4194304
   \   0000000A   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
     91            RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB | RCC_APB2Periph_AFIO, ENABLE);
   \   0000000E   0x2101             MOVS     R1,#+1
   \   00000010   0x2009             MOVS     R0,#+9
   \   00000012   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     92             
     93            /*I2C Init */
     94            I2C_InitStructure.I2C_Mode = I2C_Mode_I2C; 
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xF8AD 0x0004      STRH     R0,[SP, #+4]
     95            I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
   \   0000001C   0xF64B 0x70FF      MOVW     R0,#+49151
   \   00000020   0xF8AD 0x0006      STRH     R0,[SP, #+6]
     96            I2C_InitStructure.I2C_OwnAddress1 = 0x00;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0xF8AD 0x0008      STRH     R0,[SP, #+8]
     97            I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
   \   0000002A   0xF44F 0x6080      MOV      R0,#+1024
   \   0000002E   0xF8AD 0x000A      STRH     R0,[SP, #+10]
     98            I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
   \   00000032   0xF44F 0x4080      MOV      R0,#+16384
   \   00000036   0xF8AD 0x000C      STRH     R0,[SP, #+12]
     99            I2C_InitStructure.I2C_ClockSpeed = 100000;
    100            I2C_Init(I2C2, &I2C_InitStructure);
   \   0000003A   0xA901             ADD      R1,SP,#+4
   \   0000003C   0x....             LDR.N    R0,??DataTable1  ;; 0x186a0
   \   0000003E   0x....             LDR.N    R4,??DataTable1_1  ;; 0x40005800
   \   00000040   0x9004             STR      R0,[SP, #+16]
   \   00000042   0x4620             MOV      R0,R4
   \   00000044   0x.... 0x....      BL       I2C_Init
    101            I2C_Cmd(I2C2, ENABLE);
   \   00000048   0x2101             MOVS     R1,#+1
   \   0000004A   0x4620             MOV      R0,R4
   \   0000004C   0x.... 0x....      BL       I2C_Cmd
    102          
    103            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10 | GPIO_Pin_11;
   \   00000050   0xF44F 0x6040      MOV      R0,#+3072
   \   00000054   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    104            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;
    105            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    106            GPIO_Init(GPIOB, &GPIO_InitStructure);
   \   00000058   0x4669             MOV      R1,SP
   \   0000005A   0x201C             MOVS     R0,#+28
   \   0000005C   0xF88D 0x0003      STRB     R0,[SP, #+3]
   \   00000060   0x2003             MOVS     R0,#+3
   \   00000062   0xF88D 0x0002      STRB     R0,[SP, #+2]
   \   00000066   0x....             LDR.N    R0,??DataTable1_2  ;; 0x40010c00
   \   00000068   0x.... 0x....      BL       GPIO_Init
    107          
    108          }
   \   0000006C   0xB006             ADD      SP,SP,#+24
   \   0000006E   0xBD10             POP      {R4,PC}          ;; return
    109          
    110          

   \                                 In section .text, align 2, keep-with-next
    111          CPU_INT08U read_pcf8574(CPU_INT08U addr) {
    112                   CPU_INT08U pcf_pins;
    113          //         CPU_INT08U pcf_addr = addr;
    114          //         CPU_INT08U tmpH, tmpL;
    115          
    116                   pcf_pins = 0;
    117                   /* While the bus is busy */
    118          //         while(I2C_GetFlagStatus(I2C2, I2C_FLAG_BUSY));
    119                   /* Send START condition */
    120          //         I2C_GenerateSTART(I2C2, ENABLE);
    121                   /* Test on EV5 and clear it */
    122          //         while(!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_MODE_SELECT));
    123                   /* Send TMP100 address for write */
    124          //         I2C_Send7bitAddress(I2C2, pcf_addr, I2C_Direction_Transmitter);
    125                   /* Test on EV6 and clear it */
    126          //         while(!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
    127                   /*set TMP100 register*/
    128          //         I2C_SendData(I2C2, 0x01);
    129                   /* Test on EV8 and clear it */
    130          //         while(!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
    131                   /*set TMP100 register value*/
    132          //         I2C_SendData(I2C2, 0x60); //12 bit
    133                   /* Test on EV8 and clear it */
    134          //         while(!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
    135                   /* Send stop condition */
    136          //         I2C_GenerateSTOP(I2C2, ENABLE);
    137          
    138          //         Delay_ms(320);
    139          
    140                   /* Send START condition */
    141          //         I2C_GenerateSTART(I2C2, ENABLE);
    142                   /* Test on EV5 and clear it */
    143          //         while(!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_MODE_SELECT));
    144                   /* Send TMP100 address for write */
    145          //         I2C_Send7bitAddress(I2C2, 0x90, I2C_Direction_Transmitter);
    146                   /* Test on EV6 and clear it */
    147          //         while(!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
    148                   /*set TMP100 register*/
    149          //         I2C_SendData(I2C2, 0x00);
    150                   /* Test on EV8 and clear it */
    151          //         while(!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
    152          
    153                   /* Send RESTART condition */
    154          //         I2C_GenerateSTART(I2C2, ENABLE);
    155                   /* Test on EV5 and clear it */
    156          //         while(!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_MODE_SELECT));
    157                   /* Send TMP100 address for read */
    158          //         I2C_Send7bitAddress(I2C2, 0x91, I2C_Direction_Receiver);
    159          //         while(!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
    160                    /* Test on EV6 and clear it */
    161                   //while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_BYTE_RECEIVED));
    162          
    163          //        I2C_AcknowledgeConfig(I2C2, ENABLE);
    164          //        while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_BYTE_RECEIVED));
    165          //        tmpH=I2C_ReceiveData(I2C2);
    166          
    167          
    168          //        I2C_AcknowledgeConfig(I2C2, DISABLE);
    169          //        while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_BYTE_RECEIVED));
    170          //        tmpL=I2C_ReceiveData(I2C2);
    171          
    172          
    173                  /* Send STOP Condition */
    174          //        I2C_GenerateSTOP(I2C2, ENABLE);
    175                  //temp = (((uint16_t)(tmpH))<<8)|((uint16_t)(tmpL));
    176          
    177          //        tmpL = tmpL/25.6;
    178                  //return tmpH;
    179          //        return tmpL;
    180          	
    181          	return pcf_pins;	
   \                     read_pcf8574: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    182          }
    183          

   \                                 In section .text, align 2, keep-with-next
    184          void write_pcf8574(CPU_INT08U addr, CPU_INT08U data) 
    185          {
   \                     write_pcf8574: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    186            
    187          	CPU_INT08U pcf_data = data;
    188          	CPU_INT08U pcf_addr = addr;
   \   00000006   0x....             LDR.N    R6,??DataTable1_1  ;; 0x40005800
    189           
    190          	while(I2C_GetFlagStatus(I2C2, I2C_FLAG_BUSY));
   \                     ??write_pcf8574_0: (+1)
   \   00000008   0xF44F 0x3100      MOV      R1,#+131072
   \   0000000C   0x4630             MOV      R0,R6
   \   0000000E   0x.... 0x....      BL       I2C_GetFlagStatus
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD1F8             BNE.N    ??write_pcf8574_0
    191          	I2C_GenerateSTART(I2C2, ENABLE);
   \   00000016   0x2101             MOVS     R1,#+1
   \   00000018   0x4630             MOV      R0,R6
   \   0000001A   0x.... 0x....      BL       I2C_GenerateSTART
   \   0000001E   0x....             LDR.N    R7,??DataTable1_3  ;; 0x30001
    192          	while(!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_MODE_SELECT));
   \                     ??write_pcf8574_1: (+1)
   \   00000020   0x4639             MOV      R1,R7
   \   00000022   0x4630             MOV      R0,R6
   \   00000024   0x.... 0x....      BL       I2C_CheckEvent
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD0F9             BEQ.N    ??write_pcf8574_1
    193          	I2C_Send7bitAddress(I2C2, pcf_addr, I2C_Direction_Transmitter);
   \   0000002C   0x2200             MOVS     R2,#+0
   \   0000002E   0x4621             MOV      R1,R4
   \   00000030   0x4630             MOV      R0,R6
   \   00000032   0x.... 0x....      BL       I2C_Send7bitAddress
   \   00000036   0x....             LDR.N    R4,??DataTable1_4  ;; 0x70082
    194          	while(!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
   \                     ??write_pcf8574_2: (+1)
   \   00000038   0x4621             MOV      R1,R4
   \   0000003A   0x4630             MOV      R0,R6
   \   0000003C   0x.... 0x....      BL       I2C_CheckEvent
   \   00000040   0x2800             CMP      R0,#+0
   \   00000042   0xD0F9             BEQ.N    ??write_pcf8574_2
    195                  I2C_SendData(I2C2, pcf_data);
   \   00000044   0x4629             MOV      R1,R5
   \   00000046   0x4630             MOV      R0,R6
   \   00000048   0x.... 0x....      BL       I2C_SendData
   \   0000004C   0x....             LDR.N    R4,??DataTable1_5  ;; 0x70084
    196          	while(!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
   \                     ??write_pcf8574_3: (+1)
   \   0000004E   0x4621             MOV      R1,R4
   \   00000050   0x4630             MOV      R0,R6
   \   00000052   0x.... 0x....      BL       I2C_CheckEvent
   \   00000056   0x2800             CMP      R0,#+0
   \   00000058   0xD0F9             BEQ.N    ??write_pcf8574_3
    197          	I2C_GenerateSTOP(I2C2, ENABLE);
   \   0000005A   0x2101             MOVS     R1,#+1
   \   0000005C   0x4630             MOV      R0,R6
   \   0000005E   0x.... 0x....      BL       I2C_GenerateSTOP
   \   00000062   0x....             LDR.N    R4,??DataTable1_6  ;; 0x60000010
    198          	while(I2C_GetFlagStatus(I2C2, I2C_FLAG_STOPF));
   \                     ??write_pcf8574_4: (+1)
   \   00000064   0x4621             MOV      R1,R4
   \   00000066   0x4630             MOV      R0,R6
   \   00000068   0x.... 0x....      BL       I2C_GetFlagStatus
   \   0000006C   0x2800             CMP      R0,#+0
   \   0000006E   0xD1F9             BNE.N    ??write_pcf8574_4
    199          
    200          	return;
   \   00000070   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    201          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x000186A0         DC32     0x186a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x40005800         DC32     0x40005800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x40010C00         DC32     0x40010c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x00030001         DC32     0x30001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x00070082         DC32     0x70082

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x00070084         DC32     0x70084

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   0x60000010         DC32     0x60000010

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   i2c_init
        32   -> GPIO_Init
        32   -> I2C_Cmd
        32   -> I2C_Init
        32   -> RCC_APB1PeriphClockCmd
        32   -> RCC_APB2PeriphClockCmd
       0   read_pcf8574
      24   write_pcf8574
        24   -> I2C_CheckEvent
        24   -> I2C_GenerateSTART
        24   -> I2C_GenerateSTOP
        24   -> I2C_GetFlagStatus
        24   -> I2C_Send7bitAddress
        24   -> I2C_SendData


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
     112  i2c_init
       4  read_pcf8574
     114  write_pcf8574

 
 258 bytes in section .text
 
 258 bytes of CODE memory

Errors: none
Warnings: none
