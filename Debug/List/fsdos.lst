###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       07/Oct/2017  09:33:09
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\HW Projects\ControlHome\CntrHome - RF69w\uC-FatFS\fsdos.c
#    Command line =  
#        "E:\HW Projects\ControlHome\CntrHome - RF69w\uC-FatFS\fsdos.c" -lCN
#        "E:\HW Projects\ControlHome\CntrHome - RF69w\Debug\List" -o "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\Debug\Obj" --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\APP\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\BSP\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\CPU\inc\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-CPU\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-RTC\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-LIB\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uCOS-II\Ports\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uCOS-II\Source\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\I2C-Out\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\Direct_Sw\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\Wdt_led\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-LCD\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-RF\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\" -Oh
#    List file    =  
#        E:\HW Projects\ControlHome\CntrHome - RF69w\Debug\List\fsdos.lst
#    Object file  =  
#        E:\HW Projects\ControlHome\CntrHome - RF69w\Debug\Obj\fsdos.o
#
###############################################################################

E:\HW Projects\ControlHome\CntrHome - RF69w\uC-FatFS\fsdos.c
      1          /*
      2          *********************************************************************************************************
      3          *                                           FS DOS Interface
      4          *
      5          *
      6          *
      7          * Filename   : fsdos.c
      8          * Version    : V1.00
      9          * Programmer : Puleo
     10          *********************************************************************************************************
     11          */
     12          
     13          #define  FSDOS_GLOBALS
     14          #include <includes.h>
     15          
     16          /*
     17          *********************************************************************************************************
     18          *                                               CONSTANTS
     19          *********************************************************************************************************
     20          */
     21          
     22          /*
     23          *********************************************************************************************************
     24          *                                           LOCAL VARIABLES
     25          *********************************************************************************************************
     26          */
     27          
     28          extern CPU_INT08U time_buffer[];
     29          extern struct tm time_now;
     30          

   \                                 In section .bss, align 4
     31          CPU_CHAR str[60];
   \                     `str`:
   \   00000000                      DS8 60
     32          
     33          FATFS Fatfs;	/* File system specific */

   \                                 In section .bss, align 1
     34          BOOLEAN isInitialized = FALSE;
   \                     isInitialized:
   \   00000000                      DS8 1
     35          
     36          char FileBuffer[40];    // file copy buffer
     37          char name1[30];
     38          char name[30];

   \                                 In section .bss, align 4
     39          char Fstr[20];
   \                     Fstr:
   \   00000000                      DS8 20

   \                                 In section .data, align 4
   \                     FileBuffer:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000010   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000020   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
     40          
     41          int logCount = 1;
   \                     logCount:
   \   00000028   0x00000001         DC32 1
   \                     Fatfs:
   \   0000002C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000003C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000004C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000005C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000006C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000007C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000008C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000009C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000AC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000BC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000CC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000DC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000EC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000FC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000010C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000011C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000012C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000013C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000014C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000015C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000016C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000017C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000018C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000019C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001AC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001BC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001CC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001DC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001EC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001FC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000020C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000021C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000022C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000023C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000024C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \                     name1:
   \   0000025C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000026C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \                     name:
   \   0000027C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000028C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
     42          
     43          
     44          /*
     45          *********************************************************************************************************
     46          *                                      LOCAL FUNCTION PROTOTYPES
     47          *********************************************************************************************************
     48          */
     49          

   \                                 In section .text, align 2, keep-with-next
     50          BOOLEAN mount(BOOLEAN flag) 
     51          {
   \                     mount: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     52            
     53            if (flag){
   \   00000002   0xB130             CBZ.N    R0,??mount_0
     54              // Initialize filesystem
     55              if (f_mount(0, &Fatfs) != FR_OK)
   \   00000004   0x....             LDR.N    R1,??DataTable12_4
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x.... 0x....      BL       f_mount
   \   0000000C   0xB120             CBZ.N    R0,??mount_1
     56              {
     57                  // Error.No micro-SD with FAT16 is present 
     58                  return FALSE;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xBD02             POP      {R1,PC}
     59              }
     60            }else
     61              f_mount(0, NULL);
   \                     ??mount_0: (+1)
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x.... 0x....      BL       f_mount
     62              
     63          
     64            return TRUE;
   \                     ??mount_1: (+1)
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0xBD02             POP      {R1,PC}          ;; return
     65          }
     66          /*
     67          *********************************************************************************************************
     68          */

   \                                 In section .text, align 2, keep-with-next
     69          FRESULT tree_files(char *path) {
   \                     tree_files: (+1)
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \   00000004   0xB097             SUB      SP,SP,#+92
     70            FRESULT res;
     71            DIR dirs;
     72            FILINFO fno;
     73            long p1;
     74            FATFS *fs;
     75            UINT s1, s2;
     76          
     77            res = f_opendir(&dirs, path);
   \   00000006   0x4601             MOV      R1,R0
   \   00000008   0xA811             ADD      R0,SP,#+68
   \   0000000A   0x.... 0x....      BL       f_opendir
   \   0000000E   0x0006             MOVS     R6,R0
     78            if(res == FR_OK){
   \   00000010   0xD14A             BNE.N    ??tree_files_0
     79              p1 = s1 = s2 = 0;
   \   00000012   0x2400             MOVS     R4,#+0
   \   00000014   0x2500             MOVS     R5,#+0
   \   00000016   0x9009             STR      R0,[SP, #+36]
   \   00000018   0x.... 0x....      ADR.W    R8,??DataTable12  ;; "\n"
   \   0000001C   0x.... 0x....      ADR.W    R9,?_0
   \   00000020   0xE022             B.N      ??tree_files_1
     80              for(;;) {
     81              
     82                res = f_readdir(&dirs, &fno);
     83                if ((res != FR_OK) || !fno.fname[0]) 
     84                  break;
     85                if (fno.fattrib & AM_DIR) {
     86                  s2++;
     87                } else {
     88                  s1++; p1 += fno.fsize;
     89                }
     90          	
     91                printf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
     92          	(fno.fattrib & AM_DIR) ? 'D' : '-',
     93          	(fno.fattrib & AM_RDO) ? 'R' : '-',
     94          	(fno.fattrib & AM_HID) ? 'H' : '-',
     95          	(fno.fattrib & AM_SYS) ? 'S' : '-',
     96          	(fno.fattrib & AM_ARC) ? 'A' : '-',
     97          	(fno.fdate >> 9) + 1980, (fno.fdate >> 5) & 15, fno.fdate & 31,
     98          	(fno.ftime >> 11), (fno.ftime >> 5) & 63,
     99          	fno.fsize, &(fno.fname[0]));
   \                     ??tree_files_2: (+1)
   \   00000022   0xF8BD 0xE030      LDRH     LR,[SP, #+48]
   \   00000026   0xF8BD 0x6032      LDRH     R6,[SP, #+50]
   \   0000002A   0xF10D 0x0735      ADD      R7,SP,#+53
   \   0000002E   0x9708             STR      R7,[SP, #+32]
   \   00000030   0x9F0B             LDR      R7,[SP, #+44]
   \   00000032   0x9707             STR      R7,[SP, #+28]
   \   00000034   0xF3C6 0x1745      UBFX     R7,R6,#+5,#+6
   \   00000038   0x9706             STR      R7,[SP, #+24]
   \   0000003A   0x0AF6             LSRS     R6,R6,#+11
   \   0000003C   0x9605             STR      R6,[SP, #+20]
   \   0000003E   0xF00E 0x061F      AND      R6,LR,#0x1F
   \   00000042   0x9604             STR      R6,[SP, #+16]
   \   00000044   0xF3CE 0x1643      UBFX     R6,LR,#+5,#+4
   \   00000048   0xEA4F 0x2E5E      LSR      LR,LR,#+9
   \   0000004C   0x9603             STR      R6,[SP, #+12]
   \   0000004E   0xF20E 0x7EBC      ADDW     LR,LR,#+1980
   \   00000052   0x9001             STR      R0,[SP, #+4]
   \   00000054   0xF8CD 0xE008      STR      LR,[SP, #+8]
   \   00000058   0xF8CD 0xC000      STR      R12,[SP, #+0]
   \   0000005C   0x4648             MOV      R0,R9
   \   0000005E   0x.... 0x....      BL       printf
    100          
    101          	printf("\n");
   \   00000062   0x4640             MOV      R0,R8
   \   00000064   0x.... 0x....      BL       printf
   \                     ??tree_files_1: (+1)
   \   00000068   0xA90B             ADD      R1,SP,#+44
   \   0000006A   0xA811             ADD      R0,SP,#+68
   \   0000006C   0x.... 0x....      BL       f_readdir
   \   00000070   0x0006             MOVS     R6,R0
   \   00000072   0xD102             BNE.N    ??tree_files_3
   \   00000074   0xF89D 0x0035      LDRB     R0,[SP, #+53]
   \   00000078   0xB9D0             CBNZ.N   R0,??tree_files_4
    102              }
    103            
    104              printf("\n%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
   \                     ??tree_files_3: (+1)
   \   0000007A   0x9A09             LDR      R2,[SP, #+36]
   \   0000007C   0x.... 0x....      ADR.W    R0,?_2
   \   00000080   0xB2A3             UXTH     R3,R4
   \   00000082   0xB2A9             UXTH     R1,R5
   \   00000084   0x.... 0x....      BL       printf
    105            
    106              if (f_getfree("0:", (DWORD*)&p1, &fs) == FR_OK)
   \   00000088   0xAA0A             ADD      R2,SP,#+40
   \   0000008A   0xA909             ADD      R1,SP,#+36
   \   0000008C   0x....             ADR.N    R0,??DataTable12_1  ;; 0x30, 0x3A, 0x00, 0x00
   \   0000008E   0x.... 0x....      BL       f_getfree
   \   00000092   0xB948             CBNZ.N   R0,??tree_files_0
    107                printf(", %10lu bytes free\n", p1 * fs->csize * 512);
   \   00000094   0x990A             LDR      R1,[SP, #+40]
   \   00000096   0x9809             LDR      R0,[SP, #+36]
   \   00000098   0xF891 0x102B      LDRB     R1,[R1, #+43]
   \   0000009C   0x4348             MULS     R0,R1,R0
   \   0000009E   0x0241             LSLS     R1,R0,#+9
   \   000000A0   0x.... 0x....      ADR.W    R0,?_4
   \   000000A4   0x.... 0x....      BL       printf
    108            }
    109            return res;
   \                     ??tree_files_0: (+1)
   \   000000A8   0x4630             MOV      R0,R6
   \   000000AA   0xB017             ADD      SP,SP,#+92
   \   000000AC   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
   \                     ??tree_files_4: (+1)
   \   000000B0   0xF89D 0x1034      LDRB     R1,[SP, #+52]
   \   000000B4   0x06C8             LSLS     R0,R1,#+27
   \   000000B6   0xBF48             IT       MI 
   \   000000B8   0x1C64             ADDMI    R4,R4,#+1
   \   000000BA   0xD404             BMI.N    ??tree_files_5
   \   000000BC   0x9809             LDR      R0,[SP, #+36]
   \   000000BE   0x9A0B             LDR      R2,[SP, #+44]
   \   000000C0   0x1810             ADDS     R0,R2,R0
   \   000000C2   0x1C6D             ADDS     R5,R5,#+1
   \   000000C4   0x9009             STR      R0,[SP, #+36]
   \                     ??tree_files_5: (+1)
   \   000000C6   0x0688             LSLS     R0,R1,#+26
   \   000000C8   0xBF4C             ITE      MI 
   \   000000CA   0x2041             MOVMI    R0,#+65
   \   000000CC   0x202D             MOVPL    R0,#+45
   \   000000CE   0x074A             LSLS     R2,R1,#+29
   \   000000D0   0xBF4C             ITE      MI 
   \   000000D2   0xF04F 0x0C53      MOVMI    R12,#+83
   \   000000D6   0xF04F 0x0C2D      MOVPL    R12,#+45
   \   000000DA   0x078A             LSLS     R2,R1,#+30
   \   000000DC   0xBF4C             ITE      MI 
   \   000000DE   0x2348             MOVMI    R3,#+72
   \   000000E0   0x232D             MOVPL    R3,#+45
   \   000000E2   0x07CA             LSLS     R2,R1,#+31
   \   000000E4   0xBF4C             ITE      MI 
   \   000000E6   0x2252             MOVMI    R2,#+82
   \   000000E8   0x222D             MOVPL    R2,#+45
   \   000000EA   0x06C9             LSLS     R1,R1,#+27
   \   000000EC   0xBF4C             ITE      MI 
   \   000000EE   0x2144             MOVMI    R1,#+68
   \   000000F0   0x212D             MOVPL    R1,#+45
   \   000000F2   0xE796             B.N      ??tree_files_2
    110          }
    111          /*
    112          *********************************************************************************************************
    113          */

   \                                 In section .text, align 2, keep-with-next
    114          FRESULT scan_files(char *path) {
   \                     scan_files: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB08C             SUB      SP,SP,#+48
   \   00000004   0x4604             MOV      R4,R0
    115            
    116            FRESULT res;
    117            FILINFO fno;
    118            DIR dirs;
    119            int i;
    120            char *fn;
    121          
    122          
    123            res = f_opendir(&dirs, path);
   \   00000006   0x4621             MOV      R1,R4
   \   00000008   0xA806             ADD      R0,SP,#+24
   \   0000000A   0x.... 0x....      BL       f_opendir
    124            if (res == FR_OK) {
   \   0000000E   0xBB50             CBNZ.N   R0,??scan_files_0
    125              i = strlen(path);
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0x.... 0x....      BL       strlen
   \   00000016   0x4605             MOV      R5,R0
   \   00000018   0x.... 0x....      ADR.W    R6,?_5
   \   0000001C   0xE00D             B.N      ??scan_files_1
    126                   
    127              for (;;) {
    128                res = f_readdir(&dirs, &fno);
    129                if (res != FR_OK || fno.fname[0] == 0)
    130                  break;
    131                if (fno.fname[0] == '.')
    132                  continue;
    133                fn = fno.fname;
    134                if (fno.fattrib & AM_DIR) {
    135                  path[i++] = '/';
   \                     ??scan_files_2: (+1)
   \   0000001E   0x202F             MOVS     R0,#+47
   \   00000020   0x5528             STRB     R0,[R5, R4]
   \   00000022   0x1C6D             ADDS     R5,R5,#+1
    136                  strcpy(&path[i], fn);
   \   00000024   0xF10D 0x0109      ADD      R1,SP,#+9
   \   00000028   0x1928             ADDS     R0,R5,R4
   \   0000002A   0x.... 0x....      BL       strcpy
    137                  res = scan_files(path);
   \   0000002E   0x4620             MOV      R0,R4
   \   00000030   0xF7FF 0xFFE6      BL       scan_files
    138                  if (res != FR_OK)
   \   00000034   0xB9B8             CBNZ.N   R0,??scan_files_0
    139                    break;
    140                  i--;
   \   00000036   0x1E6D             SUBS     R5,R5,#+1
    141                  path[i] = 0;
   \   00000038   0x5528             STRB     R0,[R5, R4]
    142                }else {
   \                     ??scan_files_1: (+1)
   \   0000003A   0x4669             MOV      R1,SP
   \   0000003C   0xA806             ADD      R0,SP,#+24
   \   0000003E   0x.... 0x....      BL       f_readdir
   \   00000042   0xB980             CBNZ.N   R0,??scan_files_0
   \   00000044   0xF89D 0x1009      LDRB     R1,[SP, #+9]
   \   00000048   0x2900             CMP      R1,#+0
   \   0000004A   0xD00C             BEQ.N    ??scan_files_0
   \   0000004C   0x292E             CMP      R1,#+46
   \   0000004E   0xD0F4             BEQ.N    ??scan_files_1
   \   00000050   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   00000054   0x06C0             LSLS     R0,R0,#+27
   \   00000056   0xD4E2             BMI.N    ??scan_files_2
    143                  printf("%s/%s\r\n", path, fn);
   \   00000058   0xF10D 0x0209      ADD      R2,SP,#+9
   \   0000005C   0x4621             MOV      R1,R4
   \   0000005E   0x4630             MOV      R0,R6
   \   00000060   0x.... 0x....      BL       printf
   \   00000064   0xE7E9             B.N      ??scan_files_1
    144                }
    145              }
    146            }
    147            
    148          
    149            return res;
   \                     ??scan_files_0: (+1)
   \   00000066   0xB00C             ADD      SP,SP,#+48
   \   00000068   0xBD70             POP      {R4-R6,PC}       ;; return
    150          }
    151          /*
    152          *********************************************************************************************************
    153          */

   \                                 In section .text, align 2, keep-with-next
    154          FRESULT dump_file(char *name) {
   \                     dump_file: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
    155             FIL fsrc;  // file objects
    156          //   BYTE buffer[512];    // file copy buffer   
    157             FRESULT res;         // FatFs function common result code   
    158             UINT br;             // File R/W count 
    159             unsigned int i;
    160                
    161              
    162             mount(TRUE);
   \   00000004   0x....             LDR.N    R5,??DataTable12_5
   \   00000006   0xF5AD 0x7D0B      SUB      SP,SP,#+556
   \   0000000A   0xF105 0x012C      ADD      R1,R5,#+44
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x.... 0x....      BL       f_mount
    163            
    164            // Open source file   
    165            res = f_open(&fsrc, name, FA_OPEN_EXISTING | FA_READ);
   \   00000014   0x2201             MOVS     R2,#+1
   \   00000016   0x4621             MOV      R1,R4
   \   00000018   0xA801             ADD      R0,SP,#+4
   \   0000001A   0x.... 0x....      BL       f_open
   \   0000001E   0x0004             MOVS     R4,R0
    166            if (res == FR_OK){
   \   00000020   0x....             ADR.N    R7,??DataTable12_2  ;; 0x25, 0x63, 0x00, 0x00
   \   00000022   0xD117             BNE.N    ??dump_file_0
    167              for (;;) {
    168                res = f_read(&fsrc, FileBuffer, sizeof(FileBuffer), &br);   
   \                     ??dump_file_1: (+1)
   \   00000024   0x466B             MOV      R3,SP
   \   00000026   0x2228             MOVS     R2,#+40
   \   00000028   0x4629             MOV      R1,R5
   \   0000002A   0xA801             ADD      R0,SP,#+4
   \   0000002C   0x.... 0x....      BL       f_read
   \   00000030   0x0004             MOVS     R4,R0
    169                if (res || br == 0)
   \   00000032   0xD10F             BNE.N    ??dump_file_0
   \   00000034   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000038   0xB160             CBZ.N    R0,??dump_file_0
    170                  break;   // error or eof   
    171                for( i = 0; i < br; ++i )
   \   0000003A   0x2400             MOVS     R4,#+0
   \   0000003C   0x462E             MOV      R6,R5
   \                     ??dump_file_2: (+1)
   \   0000003E   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000042   0x4284             CMP      R4,R0
   \   00000044   0xD2EE             BCS.N    ??dump_file_1
    172                  printf("%c",FileBuffer[i]);
   \   00000046   0xF816 0x1B01      LDRB     R1,[R6], #+1
   \   0000004A   0x4638             MOV      R0,R7
   \   0000004C   0x.... 0x....      BL       printf
   \   00000050   0x1C64             ADDS     R4,R4,#+1
   \   00000052   0xE7F4             B.N      ??dump_file_2
    173                }
    174            }
    175            printf("\n");
   \                     ??dump_file_0: (+1)
   \   00000054   0x....             ADR.N    R0,??DataTable12  ;; "\n"
   \   00000056   0x.... 0x....      BL       printf
    176            f_close(&fsrc);
   \   0000005A   0xA801             ADD      R0,SP,#+4
   \   0000005C   0x.... 0x....      BL       f_close
    177            
    178            mount(FALSE);
   \   00000060   0x2100             MOVS     R1,#+0
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0x.... 0x....      BL       f_mount
    179              
    180            return res;
   \   00000068   0x4620             MOV      R0,R4
   \   0000006A   0xF50D 0x7D0B      ADD      SP,SP,#+556
   \   0000006E   0xBDF0             POP      {R4-R7,PC}       ;; return
    181          }
    182          
    183          /*
    184          *********************************************************************************************************
    185          *
    186          *                                        Log_File
    187          *
    188          *                            Create,update log file or error file
    189          *********************************************************************************************************
    190          */
    191          

   \                                 In section .text, align 2, keep-with-next
    192          FRESULT log_file(char *txt)
    193          { 
   \                     log_file: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    194            int i;  
    195            FILINFO file_info;
    196            
    197            FRESULT res;             // FatFs function common result code 
    198            FIL fsrc;                // file objects
    199            UINT bw;                 // File R/W count
    200            
    201            FileBuffer[0] = '\0';
   \   00000002   0x....             LDR.N    R4,??DataTable12_5
   \   00000004   0xF5AD 0x7D10      SUB      SP,SP,#+576
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x7021             STRB     R1,[R4, #+0]
    202          /*
    203            Get_Time_Now();
    204            //Set Date string
    205            sprintf((char*)name,"/LOG/%c%c%c%c%c%c_%d.log", time_buffer[2],
    206                                                       time_buffer[3],
    207                                                       time_buffer[5],
    208                                                       time_buffer[6],
    209                                                       time_buffer[8],
    210                                                       time_buffer[9],
    211                                                       logCount-1);
    212            //Set Time string
    213            Fstr[0] = time_buffer[11];
    214            Fstr[1] = time_buffer[12];
    215            Fstr[2] = ':';
    216            Fstr[3] = time_buffer[14];
    217            Fstr[4] = time_buffer[15];
    218            Fstr[5] = ':';
    219            Fstr[6] = time_buffer[17];
    220            Fstr[7] = time_buffer[18];
    221            Fstr[8] = ' ';
    222          */  
    223          //  strcpy((char*)FileBuffer,(char const*)Fstr);
    224          
    225            strcat((char*)FileBuffer,(char const*)txt);
   \   0000000C   0xF504 0x751F      ADD      R5,R4,#+636
   \   00000010   0x4601             MOV      R1,R0
   \   00000012   0x4620             MOV      R0,R4
   \   00000014   0x.... 0x....      BL       strcat
    226            strcat((char*)FileBuffer,(char const*)"\r\n");
   \   00000018   0x....             ADR.N    R1,??DataTable12_3  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000001A   0x.... 0x....      BL       strcat
    227          /*  
    228            i = strlen((char const*)FileBuffer);
    229            
    230            mount(TRUE);
    231            
    232            // Read a file size 
    233            f_stat(name, &file_info);
    234            
    235            if(file_info.fsize == 0){
    236              file_info.fsize++;
    237            }
    238            
    239            if(file_info.fsize + i > 1024){
    240              
    241              for(i=logCount; i > 0; i--){
    242                
    243                sprintf((char*)name1,"/LOG/%c%c%c%c%c%c_%d.log", time_buffer[2],   // xxx_0.log -> xxx_1.log
    244                                                                 time_buffer[3],
    245                                                                 time_buffer[5],
    246                                                                 time_buffer[6],
    247                                                                 time_buffer[8],
    248                                                                 time_buffer[9],
    249                                                                 logCount);
    250                sprintf((char*)name,"/LOG/%c%c%c%c%c%c_%d.log",  time_buffer[2],   // xxx_0.log -> xxx_1.log
    251                                                                 time_buffer[3],
    252                                                                 time_buffer[5],
    253                                                                 time_buffer[6],
    254                                                                 time_buffer[8],
    255                                                                 time_buffer[9],
    256                                                                 logCount-1);
    257                f_rename((char const*)name, (char const*)name1);
    258                f_unlink((char const*)name);
    259              }
    260              logCount++;
    261            }
    262          */   
    263            
    264          //  mount(TRUE);
    265          
    266            sprintf((char*)name,"LOG_%d.log",  logCount);
   \   0000001E   0x.... 0x....      ADR.W    R6,?_8
   \   00000022   0x6AA2             LDR      R2,[R4, #+40]
   \   00000024   0x4631             MOV      R1,R6
   \   00000026   0x4628             MOV      R0,R5
   \   00000028   0x.... 0x....      BL       sprintf
    267            sprintf((char*)name1,"LOG_%d.log",  logCount);
   \   0000002C   0x6AA2             LDR      R2,[R4, #+40]
   \   0000002E   0x4631             MOV      R1,R6
   \   00000030   0xF504 0x7017      ADD      R0,R4,#+604
   \   00000034   0x.... 0x....      BL       sprintf
    268          
    269            res = f_open(&fsrc, name, FA_WRITE);
    270            if (res != FR_OK)
   \   00000038   0x2202             MOVS     R2,#+2
   \   0000003A   0x4629             MOV      R1,R5
   \   0000003C   0xA807             ADD      R0,SP,#+28
   \   0000003E   0x.... 0x....      BL       f_open
   \   00000042   0xB130             CBZ.N    R0,??log_file_0
    271            {
    272              // If file does not exist create it
    273              res = f_open(&fsrc, name, FA_CREATE_ALWAYS | FA_WRITE );
    274              if (res != FR_OK)
   \   00000044   0x220A             MOVS     R2,#+10
   \   00000046   0x4629             MOV      R1,R5
   \   00000048   0xA807             ADD      R0,SP,#+28
   \   0000004A   0x.... 0x....      BL       f_open
   \   0000004E   0xB100             CBZ.N    R0,??log_file_0
    275              {
    276                // Error. Cannot create the file 
    277                while(1);
   \                     ??log_file_1: (+1)
   \   00000050   0xE7FE             B.N      ??log_file_1
    278              }
    279            }
    280             
    281            f_stat(name, &file_info);
   \                     ??log_file_0: (+1)
   \   00000052   0xA901             ADD      R1,SP,#+4
   \   00000054   0x4628             MOV      R0,R5
   \   00000056   0x.... 0x....      BL       f_stat
    282          
    283            //Set the file write pointer to first location 
    284            res = f_lseek(&fsrc, file_info.fsize);
    285            if (res != FR_OK)
   \   0000005A   0x9901             LDR      R1,[SP, #+4]
   \   0000005C   0xA807             ADD      R0,SP,#+28
   \   0000005E   0x.... 0x....      BL       f_lseek
   \   00000062   0xB100             CBZ.N    R0,??log_file_2
    286            {
    287              // Error. Cannot set the file write pointer 
    288              while(1);
   \                     ??log_file_3: (+1)
   \   00000064   0xE7FE             B.N      ??log_file_3
    289            }
    290            
    291             //Write a buffer to file
    292             res = f_write(&fsrc, FileBuffer, sizeof(FileBuffer), &bw);
    293             if ((res != FR_OK) || (sizeof(FileBuffer) != bw))
   \                     ??log_file_2: (+1)
   \   00000066   0x466B             MOV      R3,SP
   \   00000068   0x2228             MOVS     R2,#+40
   \   0000006A   0x4621             MOV      R1,R4
   \   0000006C   0xA807             ADD      R0,SP,#+28
   \   0000006E   0x.... 0x....      BL       f_write
   \   00000072   0x2800             CMP      R0,#+0
   \   00000074   0xBF04             ITT      EQ 
   \   00000076   0xF8BD 0x0000      LDRHEQ   R0,[SP, #+0]
   \   0000007A   0x2828             CMPEQ    R0,#+40
   \   0000007C   0xD000             BEQ.N    ??log_file_4
    294            {
    295              // Error. Cannot write the file 
    296              while(1);
   \                     ??log_file_5: (+1)
   \   0000007E   0xE7FE             B.N      ??log_file_5
    297            }
    298            f_sync(&fsrc);
   \                     ??log_file_4: (+1)
   \   00000080   0xA807             ADD      R0,SP,#+28
   \   00000082   0x.... 0x....      BL       f_sync
    299            
    300            // Close the file 
    301            res = f_close(&fsrc);
    302            if (res != FR_OK)
   \   00000086   0xA807             ADD      R0,SP,#+28
   \   00000088   0x.... 0x....      BL       f_close
   \   0000008C   0xB100             CBZ.N    R0,??log_file_6
    303            {
    304              // Error. Cannot close the file 
    305              while(1);
   \                     ??log_file_7: (+1)
   \   0000008E   0xE7FE             B.N      ??log_file_7
    306            } 
    307            
    308          //  mount(FALSE);
    309            
    310            return res;
   \                     ??log_file_6: (+1)
   \   00000090   0xF50D 0x7D10      ADD      SP,SP,#+576
   \   00000094   0xBD70             POP      {R4-R6,PC}       ;; return
    311          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0x0A 0x00          DC8      "\n",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_1:
   \   00000000   0x30 0x3A          DC8      0x30, 0x3A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_2:
   \   00000000   0x25 0x63          DC8      0x25, 0x63, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_3:
   \   00000000   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_4:
   \   00000000   0x........         DC32     FileBuffer+0x2C

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_5:
   \   00000000   0x........         DC32     FileBuffer

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x25 0x63          DC8 "%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s"
   \              0x25 0x63    
   \              0x25 0x63    
   \              0x25 0x63    
   \              0x25 0x63    
   \              0x20 0x25    
   \              0x75 0x2F    
   \              0x25 0x30    
   \              0x32 0x75    
   \              0x2F 0x25    
   \              0x30 0x32    
   \              0x75 0x20    
   \              0x25 0x30    
   \              0x32 0x75    
   \              0x3A 0x25    
   \              0x30 0x32    
   \              0x75 0x20    
   \              0x25 0x39    
   \              0x6C 0x75    
   \              0x20 0x20    
   \              0x25 0x73    
   \              0x00         
   \   0000002B   0x00               DC8 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     ?_1:
   \   00000000   0x0A 0x00          DC8 "\012"

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x30 0x3A          DC8 "0:"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_6:
   \   00000000   0x25 0x63          DC8 "%c"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x0A 0x25          DC8 "\012%4u File(s),%10lu bytes total\012%4u Dir(s)"
   \              0x34 0x75    
   \              0x20 0x46    
   \              0x69 0x6C    
   \              0x65 0x28    
   \              0x73 0x29    
   \              0x2C 0x25    
   \              0x31 0x30    
   \              0x6C 0x75    
   \              0x20 0x62    
   \              0x79 0x74    
   \              0x65 0x73    
   \              0x20 0x74    
   \              0x6F 0x74    
   \              0x61 0x6C    
   \              0x0A 0x25    
   \              0x34 0x75    
   \              0x20 0x44    
   \              0x69 0x72    
   \              0x28 0x73    
   \              0x29 0x00    
   \   0000002A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0x2C 0x20          DC8 ", %10lu bytes free\012"
   \              0x25 0x31    
   \              0x30 0x6C    
   \              0x75 0x20    
   \              0x62 0x79    
   \              0x74 0x65    
   \              0x73 0x20    
   \              0x66 0x72    
   \              0x65 0x65    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_5:
   \   00000000   0x25 0x73          DC8 "%s/%s\015\012"
   \              0x2F 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_8:
   \   00000000   0x4C 0x4F          DC8 "LOG_%d.log"
   \              0x47 0x5F    
   \              0x25 0x64    
   \              0x2E 0x6C    
   \              0x6F 0x67    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_7:
   \   00000000   0x0D 0x0A          DC8 "\015\012"
   \              0x00         
   \   00000003   0x00               DC8 0
    312          
    313          /*
    314          *********************************************************************************************************
    315          */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
     576   dump_file
       576   -> f_close
       576   -> f_mount
       576   -> f_open
       576   -> f_read
       576   -> printf
     592   log_file
       592   -> f_close
       592   -> f_lseek
       592   -> f_open
       592   -> f_stat
       592   -> f_sync
       592   -> f_write
       592   -> sprintf
       592   -> strcat
       8   mount
         8   -> f_mount
      64   scan_files
        64   -> f_opendir
        64   -> f_readdir
        64   -> printf
        64   -> scan_files
        64   -> strcpy
        64   -> strlen
     120   tree_files
       120   -> f_getfree
       120   -> f_opendir
       120   -> f_readdir
       120   -> printf


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable12
       4  ??DataTable12_1
       4  ??DataTable12_2
       4  ??DataTable12_3
       4  ??DataTable12_4
       4  ??DataTable12_5
      44  ?_0
       2  ?_1
      44  ?_2
       4  ?_3
      20  ?_4
       8  ?_5
       4  ?_6
       4  ?_7
      12  ?_8
     668  FileBuffer
          logCount
          Fatfs
          name1
          name
      20  Fstr
     112  dump_file
       1  isInitialized
     150  log_file
      28  mount
     106  scan_files
      60  str
     244  tree_files

 
  81 bytes in section .bss
 668 bytes in section .data
  14 bytes in section .rodata
 792 bytes in section .text
 
 792 bytes of CODE  memory
  14 bytes of CONST memory
 749 bytes of DATA  memory

Errors: none
Warnings: 1
