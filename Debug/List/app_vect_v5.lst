###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       09/Feb/2018  16:14:44
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\HW Projects\ControlHome\CntrHome - RF69w\APP\app_vect_v5.c
#    Command line =  
#        "E:\HW Projects\ControlHome\CntrHome - RF69w\APP\app_vect_v5.c" -lCN
#        "E:\HW Projects\ControlHome\CntrHome - RF69w\Debug\List" -o "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\Debug\Obj" --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\APP\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\BSP\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\CPU\inc\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-CPU\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-RTC\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-LIB\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uCOS-II\Ports\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uCOS-II\Source\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\I2C-Out\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\Direct_Sw\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\Wdt_led\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-LCD\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-RF\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\api\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\config\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\os\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\fsl\fat\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\clib\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\lbl\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\device\mmc\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\file\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-Terminal\src\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-Terminal\inc\" -Oh
#    List file    =  
#        E:\HW Projects\ControlHome\CntrHome - RF69w\Debug\List\app_vect_v5.lst
#    Object file  =  
#        E:\HW Projects\ControlHome\CntrHome - RF69w\Debug\Obj\app_vect_v5.o
#
###############################################################################

E:\HW Projects\ControlHome\CntrHome - RF69w\APP\app_vect_v5.c
      1          /*
      2          *********************************************************************************************************
      3          *                                              EXAMPLE CODE
      4          *
      5          *                          (c) Copyright 2003-2007; Micrium, Inc.; Weston, FL
      6          *
      7          *               All rights reserved.  Protected by international copyright laws.
      8          *               Knowledge of the source code may NOT be used to develop a similar product.
      9          *               Please help us continue to provide the Embedded community with the finest
     10          *               software available.  Your honesty is greatly appreciated.
     11          *********************************************************************************************************
     12          */
     13          
     14          /*
     15          *********************************************************************************************************
     16          *
     17          *                                         EXCEPTION VECTORS
     18          *
     19          *                                     ST Microelectronics STM32
     20          *                                              with the
     21          *                                   IAR STM32-SK Evaluation Board
     22          *
     23          * Filename      : app_vect_v5.c
     24          * Version       : V1.10
     25          * Programmer(s) : BAN
     26          *********************************************************************************************************
     27          */
     28          
     29          #include <includes.h>
     30          
     31          
     32          /*
     33          *********************************************************************************************************
     34          *                                            LOCAL DEFINES
     35          *********************************************************************************************************
     36          */
     37          
     38          
     39          /*
     40          *********************************************************************************************************
     41          *                                          LOCAL DATA TYPES
     42          *********************************************************************************************************
     43          */
     44          
     45          typedef  union {
     46              CPU_FNCT_VOID   Fnct;
     47              void           *Ptr;
     48          } APP_INTVECT_ELEM;
     49          
     50          /*
     51          *********************************************************************************************************
     52          *                                            LOCAL TABLES
     53          *********************************************************************************************************
     54          */
     55          
     56          
     57          /*
     58          *********************************************************************************************************
     59          *                                       LOCAL GLOBAL VARIABLES
     60          *********************************************************************************************************
     61          */
     62          
     63          
     64          /*
     65          *********************************************************************************************************
     66          *                                      LOCAL FUNCTION PROTOTYPES
     67          *********************************************************************************************************
     68          */
     69          
     70          #pragma language=extended
     71          #pragma segment="CSTACK"
     72          
     73          static  void  App_NMI_ISR        (void);
     74          
     75          static  void  App_Fault_ISR      (void);
     76          
     77          static  void  App_BusFault_ISR   (void);
     78          
     79          static  void  App_UsageFault_ISR (void);
     80          
     81          static  void  App_MemFault_ISR   (void);
     82          
     83          static  void  App_Spurious_ISR   (void);
     84          
     85          extern  void  __iar_program_start(void);
     86          
     87          
     88          /*
     89          *********************************************************************************************************
     90          *                                     LOCAL CONFIGURATION ERRORS
     91          *********************************************************************************************************
     92          */
     93          
     94          /*
     95          *********************************************************************************************************
     96          *                                  EXCEPTION / INTERRUPT VECTOR TABLE
     97          *
     98          * Note(s) : (1) The Cortex-M3 may have up to 256 external interrupts, which are the final entries in the
     99          *               vector table.  The STM32 has 48 external interrupt vectors.
    100          *********************************************************************************************************
    101          */
    102          

   \                                 In section .intvec, align 4, root
    103          __root  const  APP_INTVECT_ELEM  __vector_table[] @ ".intvec" = {
   \                     __vector_table:
   \   00000000   0x........         DC32 SFE(CSTACK), __iar_program_start, App_NMI_ISR, App_Fault_ISR
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000010   0x........         DC32 App_MemFault_ISR, App_BusFault_ISR, App_UsageFault_ISR
   \              0x........   
   \              0x........   
   \   0000001C   0x........         DC32 App_Spurious_ISR, App_Spurious_ISR, App_Spurious_ISR
   \              0x........   
   \              0x........   
   \   00000028   0x........         DC32 App_Spurious_ISR, App_Spurious_ISR, App_Spurious_ISR
   \              0x........   
   \              0x........   
   \   00000034   0x........         DC32 App_Spurious_ISR, OS_CPU_PendSVHandler, OS_CPU_SysTickHandler
   \              0x........   
   \              0x........   
   \   00000040   0x........         DC32 BSP_IntHandlerWWDG, BSP_IntHandlerPVD, BSP_IntHandlerTAMPER
   \              0x........   
   \              0x........   
   \   0000004C   0x........         DC32 BSP_IntHandlerRTC, BSP_IntHandlerFLASH, BSP_IntHandlerRCC
   \              0x........   
   \              0x........   
   \   00000058   0x........         DC32 BSP_IntHandlerEXTI0, BSP_IntHandlerEXTI1, BSP_IntHandlerEXTI2
   \              0x........   
   \              0x........   
   \   00000064   0x........         DC32 BSP_IntHandlerEXTI3, BSP_IntHandlerEXTI4, BSP_IntHandlerDMA1_CH1
   \              0x........   
   \              0x........   
   \   00000070   0x........         DC32 BSP_IntHandlerDMA1_CH2, BSP_IntHandlerDMA1_CH3
   \              0x........   
   \   00000078   0x........         DC32 BSP_IntHandlerDMA1_CH4, BSP_IntHandlerDMA1_CH5
   \              0x........   
   \   00000080   0x........         DC32 BSP_IntHandlerDMA1_CH6, BSP_IntHandlerDMA1_CH7
   \              0x........   
   \   00000088   0x........         DC32 BSP_IntHandlerADC1_2, BSP_IntHandlerUSB_HP_CAN_TX
   \              0x........   
   \   00000090   0x........         DC32 BSP_IntHandlerUSB_LP_CAN_RX0, BSP_IntHandlerCAN_RX1
   \              0x........   
   \   00000098   0x........         DC32 BSP_IntHandlerCAN_SCE, BSP_IntHandlerEXTI9_5
   \              0x........   
   \   000000A0   0x........         DC32 BSP_IntHandlerTIM1_BRK, BSP_IntHandlerTIM1_UP
   \              0x........   
   \   000000A8   0x........         DC32 BSP_IntHandlerTIM1_TRG_COM, BSP_IntHandlerTIM1_CC
   \              0x........   
   \   000000B0   0x........         DC32 BSP_IntHandlerTIM2, BSP_IntHandlerTIM3, BSP_IntHandlerTIM4
   \              0x........   
   \              0x........   
   \   000000BC   0x........         DC32 BSP_IntHandlerI2C1_EV, BSP_IntHandlerI2C1_ER
   \              0x........   
   \   000000C4   0x........         DC32 BSP_IntHandlerI2C2_EV, BSP_IntHandlerI2C2_ER, BSP_IntHandlerSPI1
   \              0x........   
   \              0x........   
   \   000000D0   0x........         DC32 BSP_IntHandlerSPI2, BSP_IntHandlerUSART1, BSP_IntHandlerUSART2
   \              0x........   
   \              0x........   
   \   000000DC   0x........         DC32 BSP_IntHandlerUSART3, BSP_IntHandlerEXTI15_10
   \              0x........   
   \   000000E4   0x........         DC32 BSP_IntHandlerRTCAlarm, BSP_IntHandlerUSBWakeUp
   \              0x........   
    104              { .Ptr = (void *)__sfe( "CSTACK" )},                        /*  0, SP start value.                                  */
    105              __iar_program_start,                                        /*  1, PC start value.                                  */
    106              App_NMI_ISR,                                                /*  2, NMI.                                             */
    107              App_Fault_ISR,                                              /*  3, Hard Fault.                                      */
    108              App_MemFault_ISR,                                           /*  4, Memory Management.                               */
    109              App_BusFault_ISR,                                           /*  5, Bus Fault.                                       */
    110              App_UsageFault_ISR,                                         /*  6, Usage Fault.                                     */
    111              App_Spurious_ISR,                                           /*  7, Reserved.                                        */
    112              App_Spurious_ISR,                                           /*  8, Reserved.                                        */
    113              App_Spurious_ISR,                                           /*  9, Reserved.                                        */
    114              App_Spurious_ISR,                                           /* 10, Reserved.                                        */
    115              App_Spurious_ISR,                                           /* 11, SVCall.                                          */
    116              App_Spurious_ISR,                                           /* 12, Debug Monitor.                                   */
    117              App_Spurious_ISR,                                           /* 13, Reserved.                                        */
    118              OS_CPU_PendSVHandler,                                       /* 14, PendSV Handler.                                  */
    119              OS_CPU_SysTickHandler,                                      /* 15, uC/OS-II Tick ISR Handler.                       */
    120          
    121              BSP_IntHandlerWWDG,                                         /* 16, INTISR[  0]  Window Watchdog.                    */
    122              BSP_IntHandlerPVD,                                          /* 17, INTISR[  1]  PVD through EXTI Line Detection.    */
    123              BSP_IntHandlerTAMPER,                                       /* 18, INTISR[  2]  Tamper Interrupt.                   */
    124              BSP_IntHandlerRTC,                                          /* 19, INTISR[  3]  RTC Global Interrupt.               */
    125              BSP_IntHandlerFLASH,                                        /* 20, INTISR[  4]  FLASH Global Interrupt.             */
    126              BSP_IntHandlerRCC,                                          /* 21, INTISR[  5]  RCC Global Interrupt.               */
    127              BSP_IntHandlerEXTI0,                                        /* 22, INTISR[  6]  EXTI Line0 Interrupt.               */
    128              BSP_IntHandlerEXTI1,                                        /* 23, INTISR[  7]  EXTI Line1 Interrupt.               */
    129              BSP_IntHandlerEXTI2,                                        /* 24, INTISR[  8]  EXTI Line2 Interrupt.               */
    130              BSP_IntHandlerEXTI3,                                        /* 25, INTISR[  9]  EXTI Line3 Interrupt.               */
    131              BSP_IntHandlerEXTI4,                                        /* 26, INTISR[ 10]  EXTI Line4 Interrupt.               */
    132              BSP_IntHandlerDMA1_CH1,                                     /* 27, INTISR[ 11]  DMA Channel1 Global Interrupt.      */
    133              BSP_IntHandlerDMA1_CH2,                                     /* 28, INTISR[ 12]  DMA Channel2 Global Interrupt.      */
    134              BSP_IntHandlerDMA1_CH3,                                     /* 29, INTISR[ 13]  DMA Channel3 Global Interrupt.      */
    135              BSP_IntHandlerDMA1_CH4,                                     /* 30, INTISR[ 14]  DMA Channel4 Global Interrupt.      */
    136              BSP_IntHandlerDMA1_CH5,                                     /* 31, INTISR[ 15]  DMA Channel5 Global Interrupt.      */
    137          
    138              BSP_IntHandlerDMA1_CH6,                                     /* 32, INTISR[ 16]  DMA Channel6 Global Interrupt.      */
    139              BSP_IntHandlerDMA1_CH7,                                     /* 33, INTISR[ 17]  DMA Channel7 Global Interrupt.      */
    140              BSP_IntHandlerADC1_2,                                       /* 34, INTISR[ 18]  ADC1 & ADC2 Global Interrupt.       */
    141              BSP_IntHandlerUSB_HP_CAN_TX,                                /* 35, INTISR[ 19]  USB High Prio / CAN TX  Interrupts. */
    142              BSP_IntHandlerUSB_LP_CAN_RX0,                               /* 36, INTISR[ 20]  USB Low  Prio / CAN RX0 Interrupts. */
    143              BSP_IntHandlerCAN_RX1,                                      /* 37, INTISR[ 21]  CAN RX1 Interrupt.                  */
    144              BSP_IntHandlerCAN_SCE,                                      /* 38, INTISR[ 22]  CAN SCE Interrupt.                  */
    145              BSP_IntHandlerEXTI9_5,                                      /* 39, INTISR[ 23]  EXTI Line[9:5] Interrupt.           */
    146              BSP_IntHandlerTIM1_BRK,                                     /* 40, INTISR[ 24]  TIM1 Break  Interrupt.              */
    147              BSP_IntHandlerTIM1_UP,                                      /* 41, INTISR[ 25]  TIM1 Update Interrupt.              */
    148              BSP_IntHandlerTIM1_TRG_COM,                                 /* 42, INTISR[ 26]  TIM1 Trig & Commutation Interrupts. */
    149              BSP_IntHandlerTIM1_CC,                                      /* 43, INTISR[ 27]  TIM1 Capture Compare Interrupt.     */
    150              BSP_IntHandlerTIM2,                                         /* 44, INTISR[ 28]  TIM2 Global Interrupt.              */
    151              BSP_IntHandlerTIM3,                                         /* 45, INTISR[ 29]  TIM3 Global Interrupt.              */
    152              BSP_IntHandlerTIM4,                                         /* 46, INTISR[ 30]  TIM4 Global Interrupt.              */
    153              BSP_IntHandlerI2C1_EV,                                      /* 47, INTISR[ 31]  I2C1 Event  Interrupt.              */
    154          
    155              BSP_IntHandlerI2C1_ER,                                      /* 48, INTISR[ 32]  I2C1 Error  Interrupt.              */
    156              BSP_IntHandlerI2C2_EV,                                      /* 49, INTISR[ 33]  I2C2 Event  Interrupt.              */
    157              BSP_IntHandlerI2C2_ER,                                      /* 50, INTISR[ 34]  I2C2 Error  Interrupt.              */
    158              BSP_IntHandlerSPI1,                                         /* 51, INTISR[ 35]  SPI1 Global Interrupt.              */
    159              BSP_IntHandlerSPI2,                                         /* 52, INTISR[ 36]  SPI2 Global Interrupt.              */
    160              BSP_IntHandlerUSART1,                                       /* 53, INTISR[ 37]  USART1 Global Interrupt.            */
    161              BSP_IntHandlerUSART2,                                       /* 54, INTISR[ 38]  USART2 Global Interrupt.            */
    162              BSP_IntHandlerUSART3,                                       /* 55, INTISR[ 39]  USART3 Global Interrupt.            */
    163              BSP_IntHandlerEXTI15_10,                                    /* 56, INTISR[ 40]  EXTI Line [15:10] Interrupts.       */
    164              BSP_IntHandlerRTCAlarm,                                     /* 57, INTISR[ 41]  RTC Alarm EXT Line Interrupt.       */
    165              BSP_IntHandlerUSBWakeUp,                                    /* 58, INTISR[ 42]  USB Wakeup from Suspend EXTI Int.   */
    166          };
    167          
    168          /*
    169          *********************************************************************************************************
    170          *                                            App_NMI_ISR()
    171          *
    172          * Description : Handle Non-Maskable Interrupt (NMI).
    173          *
    174          * Argument(s) : none.
    175          *
    176          * Return(s)   : none.
    177          *
    178          * Caller(s)   : This is an ISR.
    179          *
    180          * Note(s)     : (1) Since the NMI is not being used, this serves merely as a catch for a spurious
    181          *                   exception.
    182          *********************************************************************************************************
    183          */
    184          

   \                                 In section .text, align 2, keep-with-next
    185          static  void  App_NMI_ISR (void)
    186          {
    187              while (DEF_TRUE) {
   \                     App_NMI_ISR: (+1)
   \                     ??App_NMI_ISR_0: (+1)
   \   00000000   0xE7FE             B.N      ??App_NMI_ISR_0
    188                  ;
    189              }
    190          }
    191          
    192          /*
    193          *********************************************************************************************************
    194          *                                             App_Fault_ISR()
    195          *
    196          * Description : Handle hard fault.
    197          *
    198          * Argument(s) : none.
    199          *
    200          * Return(s)   : none.
    201          *
    202          * Caller(s)   : This is an ISR.
    203          *
    204          * Note(s)     : none.
    205          *********************************************************************************************************
    206          */
    207          

   \                                 In section .text, align 2, keep-with-next
    208          static  void  App_Fault_ISR (void)
    209          {
    210              while (DEF_TRUE) {
   \                     App_Fault_ISR: (+1)
   \                     ??App_Fault_ISR_0: (+1)
   \   00000000   0xE7FE             B.N      ??App_Fault_ISR_0
    211                  ;
    212              }
    213          }
    214          
    215          
    216          /*
    217          *********************************************************************************************************
    218          *                                           App_BusFault_ISR()
    219          *
    220          * Description : Handle bus fault.
    221          *
    222          * Argument(s) : none.
    223          *
    224          * Return(s)   : none.
    225          *
    226          * Caller(s)   : This is an ISR.
    227          *
    228          * Note(s)     : none.
    229          *********************************************************************************************************
    230          */
    231          

   \                                 In section .text, align 2, keep-with-next
    232          static  void  App_BusFault_ISR (void)
    233          {
    234              while (DEF_TRUE) {
   \                     App_BusFault_ISR: (+1)
   \                     ??App_BusFault_ISR_0: (+1)
   \   00000000   0xE7FE             B.N      ??App_BusFault_ISR_0
    235                  ;
    236              }
    237          }
    238          
    239          
    240          /*
    241          *********************************************************************************************************
    242          *                                          App_UsageFault_ISR()
    243          *
    244          * Description : Handle usage fault.
    245          *
    246          * Argument(s) : none.
    247          *
    248          * Return(s)   : none.
    249          *
    250          * Caller(s)   : This is an ISR.
    251          *
    252          * Note(s)     : none.
    253          *********************************************************************************************************
    254          */
    255          

   \                                 In section .text, align 2, keep-with-next
    256          static  void  App_UsageFault_ISR (void)
    257          {
    258              while (DEF_TRUE) {
   \                     App_UsageFault_ISR: (+1)
   \                     ??App_UsageFault_ISR_0: (+1)
   \   00000000   0xE7FE             B.N      ??App_UsageFault_ISR_0
    259                  ;
    260              }
    261          }
    262          
    263          
    264          /*
    265          *********************************************************************************************************
    266          *                                           App_MemFault_ISR()
    267          *
    268          * Description : Handle memory fault.
    269          *
    270          * Argument(s) : none.
    271          *
    272          * Return(s)   : none.
    273          *
    274          * Caller(s)   : This is an ISR.
    275          *
    276          * Note(s)     : none.
    277          *********************************************************************************************************
    278          */
    279          

   \                                 In section .text, align 2, keep-with-next
    280          static  void  App_MemFault_ISR (void)
    281          {
    282              while (DEF_TRUE) {
   \                     App_MemFault_ISR: (+1)
   \                     ??App_MemFault_ISR_0: (+1)
   \   00000000   0xE7FE             B.N      ??App_MemFault_ISR_0
    283                  ;
    284              }
    285          }
    286          
    287          
    288          /*
    289          *********************************************************************************************************
    290          *                                           App_Spurious_ISR()
    291          *
    292          * Description : Handle spurious interrupt.
    293          *
    294          * Argument(s) : none.
    295          *
    296          * Return(s)   : none.
    297          *
    298          * Caller(s)   : This is an ISR.
    299          *
    300          * Note(s)     : none.
    301          *********************************************************************************************************
    302          */
    303          

   \                                 In section .text, align 2, keep-with-next
    304          static  void  App_Spurious_ISR (void)
    305          {
    306              while (DEF_TRUE) {
   \                     App_Spurious_ISR: (+1)
   \                     ??App_Spurious_ISR_0: (+1)
   \   00000000   0xE7FE             B.N      ??App_Spurious_ISR_0
    307                  ;
    308              }
    309          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   App_BusFault_ISR
       0   App_Fault_ISR
       0   App_MemFault_ISR
       0   App_NMI_ISR
       0   App_Spurious_ISR
       0   App_UsageFault_ISR


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       2  App_BusFault_ISR
       2  App_Fault_ISR
       2  App_MemFault_ISR
       2  App_NMI_ISR
       2  App_Spurious_ISR
       2  App_UsageFault_ISR
     236  __vector_table

 
 236 bytes in section .intvec
  12 bytes in section .text
 
  12 bytes of CODE  memory
 236 bytes of CONST memory

Errors: none
Warnings: none
