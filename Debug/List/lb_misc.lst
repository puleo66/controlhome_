###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       09/Feb/2018  16:14:57
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\HW Projects\ControlHome\CntrHome - RF69w\uC-FatFS\lbl\lb_misc.c
#    Command line =  
#        "E:\HW Projects\ControlHome\CntrHome - RF69w\uC-FatFS\lbl\lb_misc.c"
#        -lCN "E:\HW Projects\ControlHome\CntrHome - RF69w\Debug\List" -o
#        "E:\HW Projects\ControlHome\CntrHome - RF69w\Debug\Obj" --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\APP\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\BSP\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\CPU\inc\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-CPU\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-RTC\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-LIB\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uCOS-II\Ports\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uCOS-II\Source\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\I2C-Out\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\Direct_Sw\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\Wdt_led\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-LCD\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-RF\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\api\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\config\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\os\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\fsl\fat\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\clib\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\lbl\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\device\mmc\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-FatFS\file\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-Terminal\src\" -I "E:\HW
#        Projects\ControlHome\CntrHome - RF69w\uC-Terminal\inc\" -Oh
#    List file    =  
#        E:\HW Projects\ControlHome\CntrHome - RF69w\Debug\List\lb_misc.lst
#    Object file  =  
#        E:\HW Projects\ControlHome\CntrHome - RF69w\Debug\Obj\lb_misc.o
#
###############################################################################

E:\HW Projects\ControlHome\CntrHome - RF69w\uC-FatFS\lbl\lb_misc.c
      1          /*
      2          **********************************************************************
      3          *                          Micrium, Inc.
      4          *                      949 Crestview Circle
      5          *                     Weston,  FL 33327-1848
      6          *
      7          *                            uC/FS
      8          *
      9          *             (c) Copyright 2001 - 2003, Micrium, Inc.
     10          *                      All rights reserved.
     11          *
     12          ***********************************************************************
     13          
     14          ----------------------------------------------------------------------
     15          File        : lb_misc.c
     16          Purpose     : Logical Block Layer
     17          ----------------------------------------------------------------------
     18          Known problems or limitations with current version
     19          ----------------------------------------------------------------------
     20          None.
     21          ---------------------------END-OF-HEADER------------------------------
     22          */
     23          
     24          /*********************************************************************
     25          *
     26          *             #include Section
     27          *
     28          **********************************************************************
     29          */
     30          
     31          #include "fs_port.h"
     32          #include "fs_conf.h"
     33          #include "fs_dev.h"
     34          #include "fs_api.h"
     35          #include "fs_lbl.h"
     36          #include "fs_os.h"
     37          #include "fs_fsl.h"
     38          #include "fs_int.h"
     39          #include "fs_clib.h"
     40          
     41          
     42          /*********************************************************************
     43          *
     44          *             Local functions
     45          *
     46          **********************************************************************
     47          */
     48          
     49          #if FS_USE_LB_READCACHE
     50          
     51          /*********************************************************************
     52          *
     53          *             _FS_LB_GetDriverIndex
     54          *
     55            Description:
     56            FS internal function. Get index of a driver in the device information
     57            table referred by FS__pDevInfo.
     58          
     59            Parameters:
     60            pDriver     - Pointer to a device driver structure
     61           
     62            Return value:
     63            =>0         - Index of pDriver in the device information table.
     64            <0          - An error has occured.
     65          */
     66          
     67          static int _FS_LB_GetDriverIndex(const FS__device_type *pDriver) {
     68            unsigned int i;
     69          
     70            i = 0;
     71            while (1) {
     72              if (i >= FS__maxdev) {
     73                break;  /* Driver not found */
     74              }
     75              if (FS__pDevInfo[i].devdriver == pDriver) {
     76                break;  /* Driver found */
     77              }
     78              i++;
     79            }
     80            if (i >= FS__maxdev) {
     81              return -1;
     82            }
     83            return i;
     84          }
     85          
     86          
     87          /*********************************************************************
     88          *
     89          *             _FS_LB_GetFromCache
     90          *
     91            Description:
     92            FS internal function. Copy sector from cache, if available.
     93          
     94            Parameters:
     95            pDriver     - Pointer to a device driver structure.
     96            Unit        - Unit number.
     97            Sector      - Sector to be read from the device's cache.
     98            pBuffer     - Pointer to a data buffer for storing data of the cache. 
     99           
    100            Return value:
    101            ==0         - Sector is in cache and has been copied to pBuffer.
    102            <0          - An error has occured.
    103          */
    104          
    105          static int _FS_LB_GetFromCache(const FS__device_type *pDriver, FS_u32 Unit, FS_u32 Sector, void *pBuffer) {
    106            int i;
    107            int idx;
    108          
    109            idx = _FS_LB_GetDriverIndex(pDriver);
    110            if (idx < 0) {
    111              return -1;
    112            }
    113            if (FS__pDevInfo[idx].pDevCacheInfo) {
    114              i = 0;
    115              while (1) {
    116                if (i >= FS__pDevInfo[idx].pDevCacheInfo[Unit].MaxCacheNum) {
    117                  break;  /* Sector not in cache */
    118                }
    119                if (Sector == FS__pDevInfo[idx].pDevCacheInfo[Unit].pCache[i].BlockId) {
    120                  break;  /* Sector found */
    121                }
    122                i++;
    123              }
    124              if (i < FS__pDevInfo[idx].pDevCacheInfo[Unit].MaxCacheNum) {
    125                FS__CLIB_memcpy(pBuffer, FS__pDevInfo[idx].pDevCacheInfo[Unit].pCache[i].aBlockData, FS_LB_BLOCKSIZE);
    126                return 0;
    127              }
    128            }
    129            return -1;  
    130          }
    131          
    132          
    133          /*********************************************************************
    134          *
    135          *             _FS_LB_CopyToCache
    136          *
    137            Description:
    138            FS internal function. Copy a sector to the cache of the device.
    139          
    140            Parameters:
    141            pDriver     - Pointer to a device driver structure.
    142            Unit        - Unit number.
    143            Sector      - Sector to be copied to the device's cache.
    144            pBuffer     - Pointer to a data buffer to be stored in the cache. 
    145           
    146            Return value:
    147            None.
    148          */
    149          
    150          static void _FS_LB_CopyToCache(const FS__device_type *pDriver, FS_u32 Unit, FS_u32 Sector, void *pBuffer) {
    151            int idx;
    152          
    153            idx = _FS_LB_GetDriverIndex(pDriver);
    154            if (idx < 0) {
    155              return;
    156            }
    157            if (FS__pDevInfo[idx].pDevCacheInfo) {
    158              FS__CLIB_memcpy(FS__pDevInfo[idx].pDevCacheInfo[Unit].pCache[FS__pDevInfo[idx].pDevCacheInfo[Unit].CacheIndex].aBlockData,
    159                      pBuffer, FS_LB_BLOCKSIZE);
    160              FS__pDevInfo[idx].pDevCacheInfo[Unit].pCache[FS__pDevInfo[idx].pDevCacheInfo[Unit].CacheIndex].BlockId = Sector;
    161              FS__pDevInfo[idx].pDevCacheInfo[Unit].CacheIndex++;
    162              if (FS__pDevInfo[idx].pDevCacheInfo[Unit].CacheIndex >= FS__pDevInfo[idx].pDevCacheInfo[Unit].MaxCacheNum) {
    163                FS__pDevInfo[idx].pDevCacheInfo[Unit].CacheIndex = 0;
    164              }
    165            }
    166          }
    167          
    168          
    169          /*********************************************************************
    170          *
    171          *             _FS_LB_UpdateInCache
    172          *
    173            Description:
    174            FS internal function. Update sector in cache, if it is there.
    175          
    176            Parameters:
    177            pDriver     - Pointer to a device driver structure.
    178            Unit        - Unit number.
    179            Sector      - Sector to be updated in the device's cache.
    180            pBuffer     - Pointer to a data buffer to be stored in the cache. 
    181           
    182            Return value:
    183            None.
    184          */
    185          
    186          static void _FS_LB_UpdateInCache(const FS__device_type *pDriver, FS_u32 Unit, FS_u32 Sector, void *pBuffer) {
    187            int i;
    188            int idx;
    189          
    190            idx = _FS_LB_GetDriverIndex(pDriver);
    191            if (idx < 0) {
    192              return;
    193            }
    194            if (FS__pDevInfo[idx].pDevCacheInfo) {
    195              i = 0;
    196              while (1) {
    197                if (i >= FS__pDevInfo[idx].pDevCacheInfo[Unit].MaxCacheNum) {
    198                  break; /* Sector not in cache */
    199                }
    200                if (Sector == FS__pDevInfo[idx].pDevCacheInfo[Unit].pCache[i].BlockId) {
    201                  break; /* Sector found */
    202                }
    203                i++;
    204              }
    205              if (i < FS__pDevInfo[idx].pDevCacheInfo[Unit].MaxCacheNum) {
    206                FS__CLIB_memcpy(FS__pDevInfo[idx].pDevCacheInfo[Unit].pCache[i].aBlockData, pBuffer, FS_LB_BLOCKSIZE);
    207              }
    208            }
    209          }
    210          
    211          
    212          /*********************************************************************
    213          *
    214          *             _FS_LB_ClearCache
    215          *
    216            Description:
    217            FS internal function. Clear cache of a device.
    218          
    219            Parameters:
    220            pDriver     - Pointer to a device driver structure.
    221            Unit        - Unit number.
    222           
    223            Return value:
    224            None.
    225          */
    226          
    227          static void _FS_LB_ClearCache(const FS__device_type *pDriver, FS_u32 Unit) {
    228            int i;
    229            int idx;
    230          
    231            idx = _FS_LB_GetDriverIndex(pDriver);
    232            if (idx<0) {
    233              return;
    234            }
    235            if (FS__pDevInfo[idx].pDevCacheInfo) {
    236              FS__pDevInfo[idx].pDevCacheInfo[Unit].CacheIndex = 0;
    237              for (i = 0; i < FS__pDevInfo[idx].pDevCacheInfo[Unit].MaxCacheNum; i++) {
    238                FS__pDevInfo[idx].pDevCacheInfo[Unit].pCache[i].BlockId = 0xffffffffUL;
    239              }
    240            }
    241          }
    242          
    243          #endif  /* FS_USE_LB_READCACHE */
    244          
    245          
    246          /*********************************************************************
    247          *
    248          *             Global functions
    249          *
    250          **********************************************************************
    251          
    252            Functions here are global, although their names indicate a local
    253            scope. They should not be called by user application.
    254          */
    255          
    256          /*********************************************************************
    257          *
    258          *             FS__lb_status
    259          *
    260            Description:
    261            FS internal function. Get status of a device.
    262          
    263            Parameters:
    264            pDriver     - Pointer to a device driver structure.
    265            Unit        - Unit number.
    266           
    267            Return value:
    268            ==1 (FS_LBL_MEDIACHANGED) - The media of the device has changed.
    269            ==0                       - Device okay and ready for operation.
    270            <0                        - An error has occured.
    271          */
    272          

   \                                 In section .text, align 2, keep-with-next
    273          int FS__lb_status(const FS__device_type *pDriver, FS_u32 Unit) {
   \                     FS__lb_status: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    274            int x;
    275          
    276            if (pDriver->dev_status) {
   \   00000006   0x6860             LDR      R0,[R4, #+4]
   \   00000008   0xB160             CBZ.N    R0,??FS__lb_status_0
    277              FS_X_OS_LockDeviceOp(pDriver, Unit);
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0x.... 0x....      BL       FS_X_OS_LockDeviceOp
    278              x = (pDriver->dev_status)(Unit);
   \   00000010   0x6861             LDR      R1,[R4, #+4]
   \   00000012   0x4628             MOV      R0,R5
   \   00000014   0x4788             BLX      R1
   \   00000016   0x4606             MOV      R6,R0
    279          #if FS_USE_LB_READCACHE
    280              if (x != 0) {
    281                _FS_LB_ClearCache(pDriver, Unit);
    282              }
    283          #endif  /* FS_USE_LB_READCACHE */
    284              FS_X_OS_UnlockDeviceOp(pDriver, Unit);
   \   00000018   0x4629             MOV      R1,R5
   \   0000001A   0x4620             MOV      R0,R4
   \   0000001C   0x.... 0x....      BL       FS_X_OS_UnlockDeviceOp
    285              return x;
   \   00000020   0x4630             MOV      R0,R6
   \   00000022   0xBD70             POP      {R4-R6,PC}
    286            }
    287            return -1;
   \                     ??FS__lb_status_0: (+1)
   \   00000024   0xF04F 0x30FF      MOV      R0,#-1
   \   00000028   0xBD70             POP      {R4-R6,PC}       ;; return
    288          }
    289          
    290          
    291          /*********************************************************************
    292          *
    293          *             FS__lb_read
    294          *
    295            Description:
    296            FS internal function. Read sector from device.
    297          
    298            Parameters:
    299            pDriver     - Pointer to a device driver structure.
    300            Unit        - Unit number.
    301            Sector      - Sector to be read from the device.
    302            pBuffer     - Pointer to buffer for storing the data.
    303           
    304            Return value:
    305            ==0         - Sector has been read and copied to pBuffer.
    306            <0          - An error has occured.
    307          */
    308          

   \                                 In section .text, align 2, keep-with-next
    309          int FS__lb_read(const FS__device_type *pDriver, FS_u32 Unit, FS_u32 Sector, void *pBuffer) {
   \                     FS__lb_read: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    310            int x;
    311          
    312            if (pDriver->dev_read) {
   \   00000006   0x68A0             LDR      R0,[R4, #+8]
   \   00000008   0x4616             MOV      R6,R2
   \   0000000A   0x461F             MOV      R7,R3
   \   0000000C   0xB140             CBZ.N    R0,??FS__lb_read_0
    313              FS_X_OS_LockDeviceOp(pDriver, Unit);
   \   0000000E   0x4620             MOV      R0,R4
   \   00000010   0x.... 0x....      BL       FS_X_OS_LockDeviceOp
    314          #if FS_USE_LB_READCACHE
    315              x = _FS_LB_GetFromCache(pDriver, Unit, Sector, pBuffer);
    316              if (x != 0) {
    317                x = (pDriver->dev_read)(Unit, Sector, pBuffer);
    318                if (x == 0) {
    319                  _FS_LB_CopyToCache(pDriver, Unit, Sector, pBuffer);
    320                }
    321              }
    322          #else
    323              x = (pDriver->dev_read)(Unit, Sector, pBuffer);
   \   00000014   0x68A3             LDR      R3,[R4, #+8]
   \   00000016   0x463A             MOV      R2,R7
   \   00000018   0x4631             MOV      R1,R6
   \   0000001A   0x4628             MOV      R0,R5
   \   0000001C   0x4798             BLX      R3
   \   0000001E   0x....             B.N      ?Subroutine0
    324          #endif  /* FS_USE_LB_READCACHE */
    325              FS_X_OS_UnlockDeviceOp(pDriver, Unit);
    326              return  x;
    327            }
    328            return -1;
   \                     ??FS__lb_read_0: (+1)
   \   00000020   0x....             B.N      ?Subroutine1
    329          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0xF04F 0x30FF      MOV      R0,#-1
   \   00000004   0xBDF2             POP      {R1,R4-R7,PC}    ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x4606             MOV      R6,R0
   \   00000002   0x4629             MOV      R1,R5
   \   00000004   0x4620             MOV      R0,R4
   \   00000006   0x.... 0x....      BL       FS_X_OS_UnlockDeviceOp
   \   0000000A   0x4630             MOV      R0,R6
   \   0000000C   0xBDF2             POP      {R1,R4-R7,PC}
    330          
    331          
    332          /*********************************************************************
    333          *
    334          *             FS__lb_write
    335          *
    336            Description:
    337            FS internal function. Write sector to device.
    338          
    339            Parameters:
    340            pDriver     - Pointer to a device driver structure.
    341            Unit        - Unit number.
    342            Sector      - Sector to be written to the device.
    343            pBuffer     - Pointer to data to be stored.
    344           
    345            Return value:
    346            ==0         - Sector has been written to the device.
    347            <0          - An error has occured.
    348          */
    349          

   \                                 In section .text, align 2, keep-with-next
    350          int FS__lb_write(const FS__device_type *pDriver, FS_u32 Unit, FS_u32 Sector, void *pBuffer) {
   \                     FS__lb_write: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    351            int x;
    352          
    353            if (pDriver->dev_write) {
   \   00000006   0x68E0             LDR      R0,[R4, #+12]
   \   00000008   0x4616             MOV      R6,R2
   \   0000000A   0x461F             MOV      R7,R3
   \   0000000C   0xB140             CBZ.N    R0,??FS__lb_write_0
    354              FS_X_OS_LockDeviceOp(pDriver, Unit);
   \   0000000E   0x4620             MOV      R0,R4
   \   00000010   0x.... 0x....      BL       FS_X_OS_LockDeviceOp
    355              x = (pDriver->dev_write)(Unit, Sector, pBuffer);
   \   00000014   0x68E3             LDR      R3,[R4, #+12]
   \   00000016   0x463A             MOV      R2,R7
   \   00000018   0x4631             MOV      R1,R6
   \   0000001A   0x4628             MOV      R0,R5
   \   0000001C   0x4798             BLX      R3
   \   0000001E   0x....             B.N      ?Subroutine0
    356          #if FS_USE_LB_READCACHE
    357              if (x==0) {
    358                _FS_LB_UpdateInCache(pDriver, Unit, Sector, pBuffer);
    359              }
    360              else {
    361                _FS_LB_ClearCache(pDriver, Unit);
    362              }
    363          #endif  /* FS_USE_LB_READCACHE */
    364              FS_X_OS_UnlockDeviceOp(pDriver, Unit);
    365              return x;
    366            }
    367            return -1;
   \                     ??FS__lb_write_0: (+1)
   \   00000020                      REQUIRE ?Subroutine1
   \   00000020                      ;; // Fall through to label ?Subroutine1
    368          }
    369          
    370          
    371          /*********************************************************************
    372          *
    373          *             FS__lb_ioctl
    374          *
    375            Description:
    376            FS internal function. Execute device command.
    377          
    378            Parameters:
    379            pDriver     - Pointer to a device driver structure.
    380            Unit        - Unit number.
    381            Cmd         - Command to be executed.
    382            Aux         - Parameter depending on command.
    383            pBuffer     - Pointer to a buffer used for the command.
    384           
    385            Return value:
    386            Command specific. In general a negative value means an error.
    387          */
    388          

   \                                 In section .text, align 2, keep-with-next
    389          int FS__lb_ioctl(const FS__device_type *pDriver, FS_u32 Unit, FS_i32 Cmd, FS_i32 Aux, void *pBuffer) {
   \                     FS__lb_ioctl: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    390            int x;
    391          
    392            if (pDriver->dev_ioctl) {
   \   00000006   0x6920             LDR      R0,[R4, #+16]
   \   00000008   0x4616             MOV      R6,R2
   \   0000000A   0x461F             MOV      R7,R3
   \   0000000C   0xB148             CBZ.N    R0,??FS__lb_ioctl_0
    393              FS_X_OS_LockDeviceOp(pDriver, Unit);
   \   0000000E   0x4620             MOV      R0,R4
   \   00000010   0x.... 0x....      BL       FS_X_OS_LockDeviceOp
    394              x = (pDriver->dev_ioctl)(Unit, Cmd, Aux, pBuffer);
   \   00000014   0x4631             MOV      R1,R6
   \   00000016   0x9B06             LDR      R3,[SP, #+24]
   \   00000018   0x6926             LDR      R6,[R4, #+16]
   \   0000001A   0x463A             MOV      R2,R7
   \   0000001C   0x4628             MOV      R0,R5
   \   0000001E   0x47B0             BLX      R6
   \   00000020   0x....             B.N      ?Subroutine0
    395              FS_X_OS_UnlockDeviceOp(pDriver, Unit);
    396              return x;
    397            }
    398            return -1;
   \                     ??FS__lb_ioctl_0: (+1)
   \   00000022   0x....             B.N      ?Subroutine1
    399          }
    400          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   FS__lb_ioctl
        24   -- Indirect call
        24   -> FS_X_OS_LockDeviceOp
        24   -> FS_X_OS_UnlockDeviceOp
      24   FS__lb_read
        24   -- Indirect call
        24   -> FS_X_OS_LockDeviceOp
        24   -> FS_X_OS_UnlockDeviceOp
      16   FS__lb_status
        16   -- Indirect call
        16   -> FS_X_OS_LockDeviceOp
        16   -> FS_X_OS_UnlockDeviceOp
      24   FS__lb_write
        24   -- Indirect call
        24   -> FS_X_OS_LockDeviceOp
        24   -> FS_X_OS_UnlockDeviceOp


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      14  ?Subroutine0
       6  ?Subroutine1
      36  FS__lb_ioctl
      34  FS__lb_read
      42  FS__lb_status
      32  FS__lb_write

 
 164 bytes in section .text
 
 164 bytes of CODE memory

Errors: none
Warnings: none
